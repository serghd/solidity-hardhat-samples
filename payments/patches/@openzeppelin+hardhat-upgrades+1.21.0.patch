diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts
index bebc6bf..782d78e 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts
@@ -1,10 +1,10 @@
 import type { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { Contract, Signer } from 'ethers';
-export type ChangeAdminFunction = (proxyAddress: string, newAdmin: string, signer?: Signer) => Promise<void>;
-export type TransferProxyAdminOwnershipFunction = (newOwner: string, signer?: Signer) => Promise<void>;
-export type GetInstanceFunction = (signer?: Signer) => Promise<Contract>;
-export declare function makeChangeProxyAdmin(hre: HardhatRuntimeEnvironment, platformModule: boolean): ChangeAdminFunction;
-export declare function makeTransferProxyAdminOwnership(hre: HardhatRuntimeEnvironment, platformModule: boolean): TransferProxyAdminOwnershipFunction;
+import { Contract } from 'ethers';
+export declare type ChangeAdminFunction = (proxyAddress: string, newAdmin: string) => Promise<void>;
+export declare type TransferProxyAdminOwnershipFunction = (newOwner: string) => Promise<void>;
+export declare type GetInstanceFunction = () => Promise<Contract>;
+export declare function makeChangeProxyAdmin(hre: HardhatRuntimeEnvironment): ChangeAdminFunction;
+export declare function makeTransferProxyAdminOwnership(hre: HardhatRuntimeEnvironment): TransferProxyAdminOwnershipFunction;
 export declare function makeGetInstanceFunction(hre: HardhatRuntimeEnvironment): GetInstanceFunction;
-export declare function getManifestAdmin(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<Contract>;
+export declare function getManifestAdmin(hre: HardhatRuntimeEnvironment): Promise<Contract>;
 //# sourceMappingURL=admin.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts.map
index a7ad3f8..88cffa5 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"admin.d.ts","sourceRoot":"","sources":["../src/admin.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAE/D,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAO1C,MAAM,MAAM,mBAAmB,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;AAC7G,MAAM,MAAM,mCAAmC,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;AACvG,MAAM,MAAM,mBAAmB,GAAG,CAAC,MAAM,CAAC,EAAE,MAAM,KAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEzE,wBAAgB,oBAAoB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,mBAAmB,CAajH;AAED,wBAAgB,+BAA+B,CAC7C,GAAG,EAAE,yBAAyB,EAC9B,cAAc,EAAE,OAAO,GACtB,mCAAmC,CAkBrC;AAED,wBAAgB,uBAAuB,CAAC,GAAG,EAAE,yBAAyB,GAAG,mBAAmB,CAI3F;AAED,wBAAsB,gBAAgB,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAWzG"}
\ No newline at end of file
+{"version":3,"file":"admin.d.ts","sourceRoot":"","sources":["../src/admin.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAE/D,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAMlC,oBAAY,mBAAmB,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5F,oBAAY,mCAAmC,GAAG,CAAC,QAAQ,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;AACtF,oBAAY,mBAAmB,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;AAE1D,wBAAgB,oBAAoB,CAAC,GAAG,EAAE,yBAAyB,GAAG,mBAAmB,CAWxF;AAED,wBAAgB,+BAA+B,CAAC,GAAG,EAAE,yBAAyB,GAAG,mCAAmC,CAgBnH;AAED,wBAAgB,uBAAuB,CAAC,GAAG,EAAE,yBAAyB,GAAG,mBAAmB,CAI3F;AAED,wBAAsB,gBAAgB,CAAC,GAAG,EAAE,yBAAyB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAWxF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js
index 2f79163..646bbbc 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js
@@ -7,13 +7,11 @@ exports.getManifestAdmin = exports.makeGetInstanceFunction = exports.makeTransfe
 const chalk_1 = __importDefault(require("chalk"));
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
 const SUCCESS_CHECK = chalk_1.default.green('✔') + ' ';
 const FAILURE_CROSS = chalk_1.default.red('✘') + ' ';
-function makeChangeProxyAdmin(hre, platformModule) {
-    return async function changeProxyAdmin(proxyAddress, newAdmin, signer) {
-        (0, utils_2.disablePlatform)(hre, platformModule, {}, changeProxyAdmin.name);
-        const admin = await getManifestAdmin(hre, signer);
+function makeChangeProxyAdmin(hre) {
+    return async function changeProxyAdmin(proxyAddress, newAdmin) {
+        const admin = await getManifestAdmin(hre);
         const proxyAdminAddress = await (0, upgrades_core_1.getAdminAddress)(hre.network.provider, proxyAddress);
         if (admin.address !== proxyAdminAddress) {
             throw new Error('Proxy admin is not the one registered in the network manifest');
@@ -24,10 +22,9 @@ function makeChangeProxyAdmin(hre, platformModule) {
     };
 }
 exports.makeChangeProxyAdmin = makeChangeProxyAdmin;
-function makeTransferProxyAdminOwnership(hre, platformModule) {
-    return async function transferProxyAdminOwnership(newOwner, signer) {
-        (0, utils_2.disablePlatform)(hre, platformModule, {}, transferProxyAdminOwnership.name);
-        const admin = await getManifestAdmin(hre, signer);
+function makeTransferProxyAdminOwnership(hre) {
+    return async function transferProxyAdminOwnership(newOwner) {
+        const admin = await getManifestAdmin(hre);
         await admin.transferOwnership(newOwner);
         const { provider } = hre.network;
         const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
@@ -44,19 +41,19 @@ function makeTransferProxyAdminOwnership(hre, platformModule) {
 }
 exports.makeTransferProxyAdminOwnership = makeTransferProxyAdminOwnership;
 function makeGetInstanceFunction(hre) {
-    return async function getInstance(signer) {
-        return await getManifestAdmin(hre, signer);
+    return async function getInstance() {
+        return await getManifestAdmin(hre);
     };
 }
 exports.makeGetInstanceFunction = makeGetInstanceFunction;
-async function getManifestAdmin(hre, signer) {
+async function getManifestAdmin(hre) {
     const manifest = await upgrades_core_1.Manifest.forNetwork(hre.network.provider);
     const manifestAdmin = await manifest.getAdmin();
     const proxyAdminAddress = manifestAdmin?.address;
     if (proxyAdminAddress === undefined) {
         throw new Error('No ProxyAdmin was found in the network manifest');
     }
-    const AdminFactory = await (0, utils_1.getProxyAdminFactory)(hre, signer);
+    const AdminFactory = await (0, utils_1.getProxyAdminFactory)(hre);
     return AdminFactory.attach(proxyAdminAddress);
 }
 exports.getManifestAdmin = getManifestAdmin;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js.map
index 4ee6d83..e9f584a 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/admin.js.map
@@ -1 +1 @@
-{"version":3,"file":"admin.js","sourceRoot":"","sources":["../src/admin.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"admin.js","sourceRoot":"","sources":["../src/admin.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B,+DAAwE;AAExE,mCAA+C;AAE/C,MAAM,aAAa,GAAG,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AAC7C,MAAM,aAAa,GAAG,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AAM3C,SAAgB,oBAAoB,CAAC,GAA8B;IACjE,OAAO,KAAK,UAAU,gBAAgB,CAAC,YAAY,EAAE,QAAQ;QAC3D,MAAM,KAAK,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,iBAAiB,GAAG,MAAM,IAAA,+BAAe,EAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAEpF,IAAI,KAAK,CAAC,OAAO,KAAK,iBAAiB,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;aAAM,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;YACrC,MAAM,KAAK,CAAC,gBAAgB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;SACtD;IACH,CAAC,CAAC;AACJ,CAAC;AAXD,oDAWC;AAED,SAAgB,+BAA+B,CAAC,GAA8B;IAC5E,OAAO,KAAK,UAAU,2BAA2B,CAAC,QAAQ;QACxD,MAAM,KAAK,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAExC,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC1C,KAAK,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,OAAO,EAAE;YACvC,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,MAAM,IAAA,+BAAe,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,EAAE;gBAC/D,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,OAAO,KAAK,IAAI,kDAAkD,CAAC,CAAC;aACpG;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,OAAO,KAAK,IAAI,+CAA+C,CAAC,CAAC;aACjG;SACF;IACH,CAAC,CAAC;AACJ,CAAC;AAhBD,0EAgBC;AAED,SAAgB,uBAAuB,CAAC,GAA8B;IACpE,OAAO,KAAK,UAAU,WAAW;QAC/B,OAAO,MAAM,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC;AACJ,CAAC;AAJD,0DAIC;AAEM,KAAK,UAAU,gBAAgB,CAAC,GAA8B;IACnE,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACjE,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAChD,MAAM,iBAAiB,GAAG,aAAa,EAAE,OAAO,CAAC;IAEjD,IAAI,iBAAiB,KAAK,SAAS,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACpE;IAED,MAAM,YAAY,GAAG,MAAM,IAAA,4BAAoB,EAAC,GAAG,CAAC,CAAC;IACrD,OAAO,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAChD,CAAC;AAXD,4CAWC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts
index ea961fc..75a7b50 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts
@@ -5,5 +5,5 @@ export interface DeployBeaconProxyFunction {
     (beacon: ContractAddressOrInstance, attachTo: ContractFactory, args?: unknown[], opts?: DeployBeaconProxyOptions): Promise<Contract>;
     (beacon: ContractAddressOrInstance, attachTo: ContractFactory, opts?: DeployBeaconProxyOptions): Promise<Contract>;
 }
-export declare function makeDeployBeaconProxy(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployBeaconProxyFunction;
+export declare function makeDeployBeaconProxy(hre: HardhatRuntimeEnvironment): DeployBeaconProxyFunction;
 //# sourceMappingURL=deploy-beacon-proxy.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts.map
index 45a645f..7a60444 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-beacon-proxy.d.ts","sourceRoot":"","sources":["../src/deploy-beacon-proxy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAanD,OAAO,EACL,wBAAwB,EAIxB,yBAAyB,EAG1B,MAAM,SAAS,CAAC;AAIjB,MAAM,WAAW,yBAAyB;IACxC,CACE,MAAM,EAAE,yBAAyB,EACjC,QAAQ,EAAE,eAAe,EACzB,IAAI,CAAC,EAAE,OAAO,EAAE,EAChB,IAAI,CAAC,EAAE,wBAAwB,GAC9B,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC,MAAM,EAAE,yBAAyB,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,wBAAwB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CACpH;AAED,wBAAgB,qBAAqB,CACnC,GAAG,EAAE,yBAAyB,EAC9B,cAAc,EAAE,OAAO,GACtB,yBAAyB,CAoD3B"}
\ No newline at end of file
+{"version":3,"file":"deploy-beacon-proxy.d.ts","sourceRoot":"","sources":["../src/deploy-beacon-proxy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAYnD,OAAO,EACL,wBAAwB,EAIxB,yBAAyB,EAG1B,MAAM,SAAS,CAAC;AAEjB,MAAM,WAAW,yBAAyB;IACxC,CACE,MAAM,EAAE,yBAAyB,EACjC,QAAQ,EAAE,eAAe,EACzB,IAAI,CAAC,EAAE,OAAO,EAAE,EAChB,IAAI,CAAC,EAAE,wBAAwB,GAC9B,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC,MAAM,EAAE,yBAAyB,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,wBAAwB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CACpH;AAED,wBAAgB,qBAAqB,CAAC,GAAG,EAAE,yBAAyB,GAAG,yBAAyB,CAqD/F"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js
index ef9881f..8e1d3b8 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js
@@ -4,9 +4,7 @@ exports.makeDeployBeaconProxy = void 0;
 const ethers_1 = require("ethers");
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
-const contract_instance_1 = require("./utils/contract-instance");
-function makeDeployBeaconProxy(hre, platformModule) {
+function makeDeployBeaconProxy(hre) {
     return async function deployBeaconProxy(beacon, attachTo, args = [], opts = {}) {
         if (!(attachTo instanceof ethers_1.ContractFactory)) {
             throw new upgrades_core_1.UpgradesError(`attachTo must specify a contract factory`, () => `Include the contract factory for the beacon's current implementation in the attachTo parameter`);
@@ -15,7 +13,6 @@ function makeDeployBeaconProxy(hre, platformModule) {
             opts = args;
             args = [];
         }
-        opts = (0, utils_2.enablePlatform)(hre, platformModule, opts);
         const { provider } = hre.network;
         const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
         if (opts.kind !== undefined && opts.kind !== 'beacon') {
@@ -34,9 +31,12 @@ function makeDeployBeaconProxy(hre, platformModule) {
             ]);
         }
         const BeaconProxyFactory = await (0, utils_1.getBeaconProxyFactory)(hre, attachTo.signer);
-        const proxyDeployment = Object.assign({ kind: opts.kind }, await (0, utils_1.deploy)(hre, opts, BeaconProxyFactory, beaconAddress, data));
+        const proxyDeployment = Object.assign({ kind: opts.kind }, await (0, utils_1.deploy)(BeaconProxyFactory, beaconAddress, data));
         await manifest.addProxy(proxyDeployment);
-        return (0, contract_instance_1.getContractInstance)(hre, attachTo, opts, proxyDeployment);
+        const inst = attachTo.attach(proxyDeployment.address);
+        // @ts-ignore Won't be readonly because inst was created through attach.
+        inst.deployTransaction = proxyDeployment.deployTransaction;
+        return inst;
     };
 }
 exports.makeDeployBeaconProxy = makeDeployBeaconProxy;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js.map
index 58123da..bffdf86 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon-proxy.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-beacon-proxy.js","sourceRoot":"","sources":["../src/deploy-beacon-proxy.ts"],"names":[],"mappings":";;;AACA,mCAAmD;AAEnD,+DASqC;AAErC,mCAQiB;AACjB,4CAAkD;AAClD,iEAAgE;AAYhE,SAAgB,qBAAqB,CACnC,GAA8B,EAC9B,cAAuB;IAEvB,OAAO,KAAK,UAAU,iBAAiB,CACrC,MAAiC,EACjC,QAAyB,EACzB,OAA6C,EAAE,EAC/C,OAAiC,EAAE;QAEnC,IAAI,CAAC,CAAC,QAAQ,YAAY,wBAAe,CAAC,EAAE;YAC1C,MAAM,IAAI,6BAAa,CACrB,0CAA0C,EAC1C,GAAG,EAAE,CAAC,gGAAgG,CACvG,CAAC;SACH;QACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,GAAG,EAAE,CAAC;SACX;QAED,IAAI,GAAG,IAAA,sBAAc,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACrD,MAAM,IAAI,0CAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QAErB,MAAM,aAAa,GAAG,IAAA,0BAAkB,EAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,CAAC,MAAM,IAAA,wBAAQ,EAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,EAAE;YAC9C,MAAM,IAAI,iDAAiC,CAAC,aAAa,CAAC,CAAC;SAC5D;QAED,MAAM,IAAI,GAAG,IAAA,0BAAkB,EAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5E,IAAI,MAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE;YAC7B,IAAA,0BAAU,EAAC,uDAAuD,EAAE;gBAClE,sEAAsE;gBACtE,6DAA6D;aAC9D,CAAC,CAAC;SACJ;QAED,MAAM,kBAAkB,GAAG,MAAM,IAAA,6BAAqB,EAAC,GAAG,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7E,MAAM,eAAe,GAAuE,MAAM,CAAC,MAAM,CACvG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EACnB,MAAM,IAAA,cAAM,EAAC,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAE,aAAa,EAAE,IAAI,CAAC,CACjE,CAAC;QAEF,MAAM,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAEzC,OAAO,IAAA,uCAAmB,EAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AAvDD,sDAuDC"}
\ No newline at end of file
+{"version":3,"file":"deploy-beacon-proxy.js","sourceRoot":"","sources":["../src/deploy-beacon-proxy.ts"],"names":[],"mappings":";;;AACA,mCAAmD;AAEnD,+DAQqC;AAErC,mCAQiB;AAYjB,SAAgB,qBAAqB,CAAC,GAA8B;IAClE,OAAO,KAAK,UAAU,iBAAiB,CACrC,MAAiC,EACjC,QAAyB,EACzB,OAA6C,EAAE,EAC/C,OAAiC,EAAE;QAEnC,IAAI,CAAC,CAAC,QAAQ,YAAY,wBAAe,CAAC,EAAE;YAC1C,MAAM,IAAI,6BAAa,CACrB,0CAA0C,EAC1C,GAAG,EAAE,CAAC,gGAAgG,CACvG,CAAC;SACH;QACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,GAAG,EAAE,CAAC;SACX;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACrD,MAAM,IAAI,0CAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QAErB,MAAM,aAAa,GAAG,IAAA,0BAAkB,EAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,CAAC,MAAM,IAAA,wBAAQ,EAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,EAAE;YAC9C,MAAM,IAAI,iDAAiC,CAAC,aAAa,CAAC,CAAC;SAC5D;QAED,MAAM,IAAI,GAAG,IAAA,0BAAkB,EAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5E,IAAI,MAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE;YAC7B,IAAA,0BAAU,EAAC,uDAAuD,EAAE;gBAClE,sEAAsE;gBACtE,6DAA6D;aAC9D,CAAC,CAAC;SACJ;QAED,MAAM,kBAAkB,GAAG,MAAM,IAAA,6BAAqB,EAAC,GAAG,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7E,MAAM,eAAe,GAAkD,MAAM,CAAC,MAAM,CAClF,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EACnB,MAAM,IAAA,cAAM,EAAC,kBAAkB,EAAE,aAAa,EAAE,IAAI,CAAC,CACtD,CAAC;QAEF,MAAM,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAEzC,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACtD,wEAAwE;QACxE,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC,iBAAiB,CAAC;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AArDD,sDAqDC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts
index 55668be..41d1f1a 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts
@@ -4,5 +4,5 @@ import { DeployBeaconOptions } from './utils';
 export interface DeployBeaconFunction {
     (ImplFactory: ContractFactory, opts?: DeployBeaconOptions): Promise<Contract>;
 }
-export declare function makeDeployBeacon(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployBeaconFunction;
+export declare function makeDeployBeacon(hre: HardhatRuntimeEnvironment): DeployBeaconFunction;
 //# sourceMappingURL=deploy-beacon.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts.map
index 6cefe80..50cb966 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-beacon.d.ts","sourceRoot":"","sources":["../src/deploy-beacon.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAIxD,OAAO,EAAE,mBAAmB,EAA4E,MAAM,SAAS,CAAC;AAGxH,MAAM,WAAW,oBAAoB;IACnC,CAAC,WAAW,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,mBAAmB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC/E;AAED,wBAAgB,gBAAgB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,oBAAoB,CAc9G"}
\ No newline at end of file
+{"version":3,"file":"deploy-beacon.d.ts","sourceRoot":"","sources":["../src/deploy-beacon.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAIxD,OAAO,EAAE,mBAAmB,EAA4E,MAAM,SAAS,CAAC;AAExH,MAAM,WAAW,oBAAoB;IACnC,CAAC,WAAW,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,mBAAmB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC/E;AAED,wBAAgB,gBAAgB,CAAC,GAAG,EAAE,yBAAyB,GAAG,oBAAoB,CAYrF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js
index 016c86f..2b4bc8a 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js
@@ -2,13 +2,11 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.makeDeployBeacon = void 0;
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
-function makeDeployBeacon(hre, platformModule) {
+function makeDeployBeacon(hre) {
     return async function deployBeacon(ImplFactory, opts = {}) {
-        (0, utils_2.disablePlatform)(hre, platformModule, opts, deployBeacon.name);
         const { impl } = await (0, utils_1.deployBeaconImpl)(hre, ImplFactory, opts);
         const UpgradeableBeaconFactory = await (0, utils_1.getUpgradeableBeaconFactory)(hre, ImplFactory.signer);
-        const beaconDeployment = await (0, utils_1.deploy)(hre, opts, UpgradeableBeaconFactory, impl);
+        const beaconDeployment = await (0, utils_1.deploy)(UpgradeableBeaconFactory, impl);
         const beaconContract = UpgradeableBeaconFactory.attach(beaconDeployment.address);
         // @ts-ignore Won't be readonly because beaconContract was created through attach.
         beaconContract.deployTransaction = beaconDeployment.deployTransaction;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js.map
index a0107a2..0aff58d 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-beacon.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-beacon.js","sourceRoot":"","sources":["../src/deploy-beacon.ts"],"names":[],"mappings":";;;AAKA,mCAAwH;AACxH,4CAAmD;AAMnD,SAAgB,gBAAgB,CAAC,GAA8B,EAAE,cAAuB;IACtF,OAAO,KAAK,UAAU,YAAY,CAAC,WAA4B,EAAE,OAA4B,EAAE;QAC7F,IAAA,uBAAe,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QAE9D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAEhE,MAAM,wBAAwB,GAAG,MAAM,IAAA,mCAA2B,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAC5F,MAAM,gBAAgB,GAAmC,MAAM,IAAA,cAAM,EAAC,GAAG,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,CAAC,CAAC;QACjH,MAAM,cAAc,GAAG,wBAAwB,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAEjF,kFAAkF;QAClF,cAAc,CAAC,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,CAAC;QACtE,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;AACJ,CAAC;AAdD,4CAcC"}
\ No newline at end of file
+{"version":3,"file":"deploy-beacon.js","sourceRoot":"","sources":["../src/deploy-beacon.ts"],"names":[],"mappings":";;;AAKA,mCAAwH;AAMxH,SAAgB,gBAAgB,CAAC,GAA8B;IAC7D,OAAO,KAAK,UAAU,YAAY,CAAC,WAA4B,EAAE,OAA4B,EAAE;QAC7F,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAEhE,MAAM,wBAAwB,GAAG,MAAM,IAAA,mCAA2B,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAC5F,MAAM,gBAAgB,GAA6C,MAAM,IAAA,cAAM,EAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;QAChH,MAAM,cAAc,GAAG,wBAAwB,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAEjF,kFAAkF;QAClF,cAAc,CAAC,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,CAAC;QACtE,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;AACJ,CAAC;AAZD,4CAYC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.d.ts
deleted file mode 100644
index 09c7948..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import type { ContractFactory, Contract } from 'ethers';
-import { DeployContractOptions } from './utils';
-export interface DeployContractFunction {
-    (Contract: ContractFactory, args?: unknown[], opts?: DeployContractOptions): Promise<Contract>;
-    (Contract: ContractFactory, opts?: DeployContractOptions): Promise<Contract>;
-}
-export declare function makeDeployContract(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployContractFunction;
-//# sourceMappingURL=deploy-contract.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.d.ts.map
deleted file mode 100644
index 34f6cda..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"deploy-contract.d.ts","sourceRoot":"","sources":["../src/deploy-contract.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAExD,OAAO,EAAU,qBAAqB,EAAqB,MAAM,SAAS,CAAC;AAa3E,MAAM,WAAW,sBAAsB;IACrC,CAAC,QAAQ,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,EAAE,qBAAqB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/F,CAAC,QAAQ,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,qBAAqB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC9E;AAoCD,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,sBAAsB,CA4BlH"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.js
deleted file mode 100644
index 5364119..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.js
+++ /dev/null
@@ -1,44 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.makeDeployContract = void 0;
-const utils_1 = require("./utils");
-const deploy_impl_1 = require("./utils/deploy-impl");
-const utils_2 = require("./platform/utils");
-const upgrades_core_1 = require("@openzeppelin/upgrades-core");
-const contract_instance_1 = require("./utils/contract-instance");
-async function deployNonUpgradeableContract(hre, Contract, opts) {
-    const deployData = await (0, deploy_impl_1.getDeployData)(hre, Contract, opts);
-    if (!opts.unsafeAllowDeployContract) {
-        assertNonUpgradeable(deployData);
-    }
-    const deployment = await (0, utils_1.deploy)(hre, opts, Contract, ...deployData.fullOpts.constructorArgs);
-    return deployment;
-}
-function assertNonUpgradeable(deployData) {
-    const [fullContractName, runValidation] = (0, upgrades_core_1.getContractNameAndRunValidation)(deployData.validations, deployData.version);
-    const c = runValidation[fullContractName];
-    if ((0, upgrades_core_1.inferInitializable)(c) || (0, upgrades_core_1.inferProxyKind)(deployData.validations, deployData.version) === 'uups') {
-        throw new upgrades_core_1.UpgradesError(`The contract ${fullContractName} looks like an upgradeable contract.`, () => 'Upgradable contracts cannot be deployed using the deployContract function. Use deployProxy, deployBeacon, or deployImplementation.\n' +
-            'If this is not intended to be an upgradeable contract, set the unsafeAllowDeployContract option to true and run the deployContract function again.');
-    }
-}
-function makeDeployContract(hre, platformModule) {
-    return async function deployContract(Contract, args = [], opts = {}) {
-        if (!Array.isArray(args)) {
-            opts = args;
-            args = [];
-        }
-        opts = (0, utils_2.enablePlatform)(hre, platformModule, opts);
-        if (!opts.usePlatformDeploy) {
-            throw new Error(`The ${deployContract.name} function cannot have the \`usePlatformDeploy\` option disabled.`);
-        }
-        if (opts.constructorArgs !== undefined) {
-            throw new Error(`The ${deployContract.name} function does not support the constructorArgs option. Pass in constructor arguments using the format: deployContract(MyContract, [ 'my arg' ]);`);
-        }
-        opts.constructorArgs = args;
-        const deployment = await deployNonUpgradeableContract(hre, Contract, opts);
-        return (0, contract_instance_1.getContractInstance)(hre, Contract, opts, deployment);
-    };
-}
-exports.makeDeployContract = makeDeployContract;
-//# sourceMappingURL=deploy-contract.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.js.map
deleted file mode 100644
index 0d6fcdc..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-contract.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"deploy-contract.js","sourceRoot":"","sources":["../src/deploy-contract.ts"],"names":[],"mappings":";;;AAGA,mCAA2E;AAC3E,qDAAgE;AAChE,4CAAkD;AAClD,+DAOqC;AACrC,iEAAgE;AAOhE,KAAK,UAAU,4BAA4B,CACzC,GAA8B,EAC9B,QAAyB,EACzB,IAA2B;IAE3B,MAAM,UAAU,GAAG,MAAM,IAAA,2BAAa,EAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAE5D,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;QACnC,oBAAoB,CAAC,UAAU,CAAC,CAAC;KAClC;IAED,MAAM,UAAU,GAAkE,MAAM,IAAA,cAAM,EAC5F,GAAG,EACH,IAAI,EACJ,QAAQ,EACR,GAAG,UAAU,CAAC,QAAQ,CAAC,eAAe,CACvC,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,oBAAoB,CAAC,UAAsB;IAClD,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,GAAG,IAAA,+CAA+B,EAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IACtH,MAAM,CAAC,GAAG,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAC1C,IAAI,IAAA,kCAAkB,EAAC,CAAC,CAAC,IAAI,IAAA,8BAAc,EAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,OAAO,CAAC,KAAK,MAAM,EAAE;QAClG,MAAM,IAAI,6BAAa,CACrB,gBAAgB,gBAAgB,sCAAsC,EACtE,GAAG,EAAE,CACH,sIAAsI;YACtI,oJAAoJ,CACvJ,CAAC;KACH;AACH,CAAC;AAED,SAAgB,kBAAkB,CAAC,GAA8B,EAAE,cAAuB;IACxF,OAAO,KAAK,UAAU,cAAc,CAClC,QAAQ,EACR,OAA0C,EAAE,EAC5C,OAA8B,EAAE;QAEhC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,GAAG,EAAE,CAAC;SACX;QAED,IAAI,GAAG,IAAA,sBAAc,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,OAAO,cAAc,CAAC,IAAI,kEAAkE,CAAC,CAAC;SAC/G;QAED,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE;YACtC,MAAM,IAAI,KAAK,CACb,OAAO,cAAc,CAAC,IAAI,kJAAkJ,CAC7K,CAAC;SACH;QACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAE5B,MAAM,UAAU,GAAG,MAAM,4BAA4B,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAE3E,OAAO,IAAA,uCAAmB,EAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IAC9D,CAAC,CAAC;AACJ,CAAC;AA5BD,gDA4BC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts
index 74241f0..b676128 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts
@@ -1,7 +1,7 @@
 import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory, ethers } from 'ethers';
 import { DeployImplementationOptions } from './utils';
-export type DeployImplementationFunction = (ImplFactory: ContractFactory, opts?: DeployImplementationOptions) => Promise<DeployImplementationResponse>;
-export type DeployImplementationResponse = string | ethers.providers.TransactionResponse;
-export declare function makeDeployImplementation(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployImplementationFunction;
+export declare type DeployImplementationFunction = (ImplFactory: ContractFactory, opts?: DeployImplementationOptions) => Promise<DeployImplementationResponse>;
+export declare type DeployImplementationResponse = string | ethers.providers.TransactionResponse;
+export declare function makeDeployImplementation(hre: HardhatRuntimeEnvironment): DeployImplementationFunction;
 //# sourceMappingURL=deploy-implementation.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts.map
index 4470457..ae17d85 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-implementation.d.ts","sourceRoot":"","sources":["../src/deploy-implementation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEtD,OAAO,EAAE,2BAA2B,EAAE,MAAM,SAAS,CAAC;AAItD,MAAM,MAAM,4BAA4B,GAAG,CACzC,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,2BAA2B,KAC/B,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE3C,MAAM,MAAM,4BAA4B,GAAG,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;AAEzF,wBAAgB,wBAAwB,CACtC,GAAG,EAAE,yBAAyB,EAC9B,cAAc,EAAE,OAAO,GACtB,4BAA4B,CAY9B"}
\ No newline at end of file
+{"version":3,"file":"deploy-implementation.d.ts","sourceRoot":"","sources":["../src/deploy-implementation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEtD,OAAO,EAAE,2BAA2B,EAAE,MAAM,SAAS,CAAC;AAGtD,oBAAY,4BAA4B,GAAG,CACzC,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,2BAA2B,KAC/B,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE3C,oBAAY,4BAA4B,GAAG,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;AAEzF,wBAAgB,wBAAwB,CAAC,GAAG,EAAE,yBAAyB,GAAG,4BAA4B,CAUrG"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js
index 7de74e0..3c6684c 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js
@@ -2,11 +2,9 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.makeDeployImplementation = void 0;
 const deploy_impl_1 = require("./utils/deploy-impl");
-const utils_1 = require("./platform/utils");
-function makeDeployImplementation(hre, platformModule) {
+function makeDeployImplementation(hre) {
     return async function deployImplementation(ImplFactory, opts = {}) {
-        opts = (0, utils_1.enablePlatform)(hre, platformModule, opts);
-        const deployedImpl = await (0, deploy_impl_1.deployUpgradeableImpl)(hre, ImplFactory, opts);
+        const deployedImpl = await (0, deploy_impl_1.deployStandaloneImpl)(hre, ImplFactory, opts);
         if (opts.getTxResponse && deployedImpl.txResponse !== undefined) {
             return deployedImpl.txResponse;
         }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js.map
index cd4f63a..9df2c4b 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-implementation.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-implementation.js","sourceRoot":"","sources":["../src/deploy-implementation.ts"],"names":[],"mappings":";;;AAIA,qDAA4D;AAC5D,4CAAkD;AASlD,SAAgB,wBAAwB,CACtC,GAA8B,EAC9B,cAAuB;IAEvB,OAAO,KAAK,UAAU,oBAAoB,CAAC,WAAW,EAAE,OAAoC,EAAE;QAC5F,IAAI,GAAG,IAAA,sBAAc,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,YAAY,GAAG,MAAM,IAAA,mCAAqB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAEzE,IAAI,IAAI,CAAC,aAAa,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/D,OAAO,YAAY,CAAC,UAAU,CAAC;SAChC;aAAM;YACL,OAAO,YAAY,CAAC,IAAI,CAAC;SAC1B;IACH,CAAC,CAAC;AACJ,CAAC;AAfD,4DAeC"}
\ No newline at end of file
+{"version":3,"file":"deploy-implementation.js","sourceRoot":"","sources":["../src/deploy-implementation.ts"],"names":[],"mappings":";;;AAIA,qDAA2D;AAS3D,SAAgB,wBAAwB,CAAC,GAA8B;IACrE,OAAO,KAAK,UAAU,oBAAoB,CAAC,WAAW,EAAE,OAAoC,EAAE;QAC5F,MAAM,YAAY,GAAG,MAAM,IAAA,kCAAoB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAExE,IAAI,IAAI,CAAC,aAAa,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/D,OAAO,YAAY,CAAC,UAAU,CAAC;SAChC;aAAM;YACL,OAAO,YAAY,CAAC,IAAI,CAAC;SAC1B;IACH,CAAC,CAAC;AACJ,CAAC;AAVD,4DAUC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts
index a9fbe55..ef59cba 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts
@@ -4,5 +4,5 @@ import { Signer } from 'ethers';
 export interface DeployAdminFunction {
     (signer?: Signer, opts?: DeployProxyAdminOptions): Promise<string>;
 }
-export declare function makeDeployProxyAdmin(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployAdminFunction;
+export declare function makeDeployProxyAdmin(hre: HardhatRuntimeEnvironment): DeployAdminFunction;
 //# sourceMappingURL=deploy-proxy-admin.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts.map
index 0bc2842..9fbecde 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-proxy-admin.d.ts","sourceRoot":"","sources":["../src/deploy-proxy-admin.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAI/D,OAAO,EAAU,uBAAuB,EAAwB,MAAM,SAAS,CAAC;AAChF,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAGhC,MAAM,WAAW,mBAAmB;IAClC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,uBAAuB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;CACpE;AAED,wBAAgB,oBAAoB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,mBAAmB,CASjH"}
\ No newline at end of file
+{"version":3,"file":"deploy-proxy-admin.d.ts","sourceRoot":"","sources":["../src/deploy-proxy-admin.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAI/D,OAAO,EAAU,uBAAuB,EAAwB,MAAM,SAAS,CAAC;AAChF,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,MAAM,WAAW,mBAAmB;IAClC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,uBAAuB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;CACpE;AAED,wBAAgB,oBAAoB,CAAC,GAAG,EAAE,yBAAyB,GAAG,mBAAmB,CAOxF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js
index 3c6fb3e..cb56212 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js
@@ -3,13 +3,11 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.makeDeployProxyAdmin = void 0;
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
-function makeDeployProxyAdmin(hre, platformModule) {
+function makeDeployProxyAdmin(hre) {
     return async function deployProxyAdmin(signer, opts = {}) {
-        (0, utils_2.disablePlatform)(hre, platformModule, opts, deployProxyAdmin.name);
         const { provider } = hre.network;
         const AdminFactory = await (0, utils_1.getProxyAdminFactory)(hre, signer);
-        return await (0, upgrades_core_1.fetchOrDeployAdmin)(provider, () => (0, utils_1.deploy)(hre, opts, AdminFactory), opts);
+        return await (0, upgrades_core_1.fetchOrDeployAdmin)(provider, () => (0, utils_1.deploy)(AdminFactory), opts);
     };
 }
 exports.makeDeployProxyAdmin = makeDeployProxyAdmin;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js.map
index 2373f7e..3851037 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy-admin.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-proxy-admin.js","sourceRoot":"","sources":["../src/deploy-proxy-admin.ts"],"names":[],"mappings":";;;AAEA,+DAAiE;AAEjE,mCAAgF;AAEhF,4CAAmD;AAMnD,SAAgB,oBAAoB,CAAC,GAA8B,EAAE,cAAuB;IAC1F,OAAO,KAAK,UAAU,gBAAgB,CAAC,MAAe,EAAE,OAAgC,EAAE;QACxF,IAAA,uBAAe,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAElE,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QAEjC,MAAM,YAAY,GAAG,MAAM,IAAA,4BAAoB,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC7D,OAAO,MAAM,IAAA,kCAAkB,EAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAA,cAAM,EAAC,GAAG,EAAE,IAAI,EAAE,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;IACzF,CAAC,CAAC;AACJ,CAAC;AATD,oDASC"}
\ No newline at end of file
+{"version":3,"file":"deploy-proxy-admin.js","sourceRoot":"","sources":["../src/deploy-proxy-admin.ts"],"names":[],"mappings":";;;AAEA,+DAAiE;AAEjE,mCAAgF;AAOhF,SAAgB,oBAAoB,CAAC,GAA8B;IACjE,OAAO,KAAK,UAAU,gBAAgB,CAAC,MAAe,EAAE,OAAgC,EAAE;QACxF,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QAEjC,MAAM,YAAY,GAAG,MAAM,IAAA,4BAAoB,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC7D,OAAO,MAAM,IAAA,kCAAkB,EAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAA,cAAM,EAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC,CAAC;AACJ,CAAC;AAPD,oDAOC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts
index f9f6003..9059983 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts
@@ -5,5 +5,5 @@ export interface DeployFunction {
     (ImplFactory: ContractFactory, args?: unknown[], opts?: DeployProxyOptions): Promise<Contract>;
     (ImplFactory: ContractFactory, opts?: DeployProxyOptions): Promise<Contract>;
 }
-export declare function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployFunction;
+export declare function makeDeployProxy(hre: HardhatRuntimeEnvironment): DeployFunction;
 //# sourceMappingURL=deploy-proxy.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts.map
index e93d181..02481c5 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-proxy.d.ts","sourceRoot":"","sources":["../src/deploy-proxy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAUxD,OAAO,EACL,kBAAkB,EAOnB,MAAM,SAAS,CAAC;AAIjB,MAAM,WAAW,cAAc;IAC7B,CAAC,WAAW,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,EAAE,kBAAkB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/F,CAAC,WAAW,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,kBAAkB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC9E;AAED,wBAAgB,eAAe,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,cAAc,CAyDvG"}
\ No newline at end of file
+{"version":3,"file":"deploy-proxy.d.ts","sourceRoot":"","sources":["../src/deploy-proxy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAIxD,OAAO,EACL,kBAAkB,EAOnB,MAAM,SAAS,CAAC;AAEjB,MAAM,WAAW,cAAc;IAC7B,CAAC,WAAW,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,EAAE,kBAAkB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/F,CAAC,WAAW,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,kBAAkB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC9E;AAED,wBAAgB,eAAe,CAAC,GAAG,EAAE,yBAAyB,GAAG,cAAc,CAyD9E"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js
index 722146b..c47a8ae 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js
@@ -3,15 +3,12 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.makeDeployProxy = void 0;
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
-const contract_instance_1 = require("./utils/contract-instance");
-function makeDeployProxy(hre, platformModule) {
+function makeDeployProxy(hre) {
     return async function deployProxy(ImplFactory, args = [], opts = {}) {
         if (!Array.isArray(args)) {
             opts = args;
             args = [];
         }
-        opts = (0, utils_2.enablePlatform)(hre, platformModule, opts);
         const { provider } = hre.network;
         const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
         const { impl, kind } = await (0, utils_1.deployProxyImpl)(hre, ImplFactory, opts);
@@ -32,18 +29,21 @@ function makeDeployProxy(hre, platformModule) {
             }
             case 'uups': {
                 const ProxyFactory = await (0, utils_1.getProxyFactory)(hre, ImplFactory.signer);
-                proxyDeployment = Object.assign({ kind }, await (0, utils_1.deploy)(hre, opts, ProxyFactory, impl, data));
+                proxyDeployment = Object.assign({ kind }, await (0, utils_1.deploy)(ProxyFactory, impl, data));
                 break;
             }
             case 'transparent': {
                 const adminAddress = await hre.upgrades.deployProxyAdmin(ImplFactory.signer, opts);
                 const TransparentUpgradeableProxyFactory = await (0, utils_1.getTransparentUpgradeableProxyFactory)(hre, ImplFactory.signer);
-                proxyDeployment = Object.assign({ kind }, await (0, utils_1.deploy)(hre, opts, TransparentUpgradeableProxyFactory, impl, adminAddress, data));
+                proxyDeployment = Object.assign({ kind }, await (0, utils_1.deploy)(TransparentUpgradeableProxyFactory, impl, adminAddress, data));
                 break;
             }
         }
         await manifest.addProxy(proxyDeployment);
-        return (0, contract_instance_1.getContractInstance)(hre, ImplFactory, opts, proxyDeployment);
+        const inst = ImplFactory.attach(proxyDeployment.address);
+        // @ts-ignore Won't be readonly because inst was created through attach.
+        inst.deployTransaction = proxyDeployment.deployTransaction;
+        return inst;
     };
 }
 exports.makeDeployProxy = makeDeployProxy;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js.map
index 4c09a20..4f73a8e 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/deploy-proxy.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-proxy.js","sourceRoot":"","sources":["../src/deploy-proxy.ts"],"names":[],"mappings":";;;AAGA,+DAMqC;AAErC,mCAQiB;AACjB,4CAAkD;AAClD,iEAAgE;AAOhE,SAAgB,eAAe,CAAC,GAA8B,EAAE,cAAuB;IACrF,OAAO,KAAK,UAAU,WAAW,CAC/B,WAA4B,EAC5B,OAAuC,EAAE,EACzC,OAA2B,EAAE;QAE7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,GAAG,EAAE,CAAC;SACX;QAED,IAAI,GAAG,IAAA,sBAAc,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAErD,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAErE,MAAM,iBAAiB,GAAG,WAAW,CAAC,SAAS,CAAC;QAChD,MAAM,IAAI,GAAG,IAAA,0BAAkB,EAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE3E,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,IAAI,MAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE;gBAC7B,IAAA,0BAAU,EAAC,uDAAuD,EAAE;oBAClE,oEAAoE;oBACpE,6DAA6D;iBAC9D,CAAC,CAAC;aACJ;SACF;QAED,IAAI,eAAmF,CAAC;QACxF,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ,CAAC,CAAC;gBACb,MAAM,IAAI,2CAA2B,EAAE,CAAC;aACzC;YAED,KAAK,MAAM,CAAC,CAAC;gBACX,MAAM,YAAY,GAAG,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBACpE,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,MAAM,IAAA,cAAM,EAAC,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC7F,MAAM;aACP;YAED,KAAK,aAAa,CAAC,CAAC;gBAClB,MAAM,YAAY,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACnF,MAAM,kCAAkC,GAAG,MAAM,IAAA,6CAAqC,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBAChH,eAAe,GAAG,MAAM,CAAC,MAAM,CAC7B,EAAE,IAAI,EAAE,EACR,MAAM,IAAA,cAAM,EAAC,GAAG,EAAE,IAAI,EAAE,kCAAkC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CACtF,CAAC;gBACF,MAAM;aACP;SACF;QAED,MAAM,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAEzC,OAAO,IAAA,uCAAmB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;IACtE,CAAC,CAAC;AACJ,CAAC;AAzDD,0CAyDC"}
\ No newline at end of file
+{"version":3,"file":"deploy-proxy.js","sourceRoot":"","sources":["../src/deploy-proxy.ts"],"names":[],"mappings":";;;AAGA,+DAAiH;AAEjH,mCAQiB;AAOjB,SAAgB,eAAe,CAAC,GAA8B;IAC5D,OAAO,KAAK,UAAU,WAAW,CAC/B,WAA4B,EAC5B,OAAuC,EAAE,EACzC,OAA2B,EAAE;QAE7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,GAAG,EAAE,CAAC;SACX;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAErD,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACrE,MAAM,iBAAiB,GAAG,WAAW,CAAC,SAAS,CAAC;QAChD,MAAM,IAAI,GAAG,IAAA,0BAAkB,EAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE3E,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,IAAI,MAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE;gBAC7B,IAAA,0BAAU,EAAC,uDAAuD,EAAE;oBAClE,oEAAoE;oBACpE,6DAA6D;iBAC9D,CAAC,CAAC;aACJ;SACF;QAED,IAAI,eAA8D,CAAC;QACnE,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ,CAAC,CAAC;gBACb,MAAM,IAAI,2CAA2B,EAAE,CAAC;aACzC;YAED,KAAK,MAAM,CAAC,CAAC;gBACX,MAAM,YAAY,GAAG,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBACpE,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,MAAM,IAAA,cAAM,EAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;gBAClF,MAAM;aACP;YAED,KAAK,aAAa,CAAC,CAAC;gBAClB,MAAM,YAAY,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACnF,MAAM,kCAAkC,GAAG,MAAM,IAAA,6CAAqC,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBAChH,eAAe,GAAG,MAAM,CAAC,MAAM,CAC7B,EAAE,IAAI,EAAE,EACR,MAAM,IAAA,cAAM,EAAC,kCAAkC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAC3E,CAAC;gBACF,MAAM;aACP;SACF;QAED,MAAM,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAEzC,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACzD,wEAAwE;QACxE,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC,iBAAiB,CAAC;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AAzDD,0CAyDC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts
index f6ae930..4e6b267 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts
@@ -13,9 +13,6 @@ import type { ValidateImplementationFunction } from './validate-implementation';
 import type { ValidateUpgradeFunction } from './validate-upgrade';
 import type { DeployImplementationFunction } from './deploy-implementation';
 import { DeployAdminFunction } from './deploy-proxy-admin';
-import type { DeployContractFunction } from './deploy-contract';
-import type { ProposeUpgradeFunction } from './platform/propose-upgrade';
-import type { GetDefaultApprovalProcessFunction } from './platform/get-default-approval-process';
 export interface HardhatUpgrades {
     deployProxy: DeployFunction;
     upgradeProxy: UpgradeFunction;
@@ -43,10 +40,5 @@ export interface HardhatUpgrades {
         getImplementationAddress: (beaconAddress: string) => Promise<string>;
     };
 }
-export interface PlatformHardhatUpgrades extends HardhatUpgrades {
-    deployContract: DeployContractFunction;
-    proposeUpgrade: ProposeUpgradeFunction;
-    getDefaultApprovalProcess: GetDefaultApprovalProcessFunction;
-}
 export { UpgradeOptions } from './utils/options';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts.map
index 78d5bb3..e46df22 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAEA,OAAO,2BAA2B,CAAC;AACnC,OAAO,mBAAmB,CAAC;AAK3B,OAAO,EAAsC,eAAe,EAAa,MAAM,6BAA6B,CAAC;AAC7G,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AAC5D,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;AACvE,OAAO,KAAK,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AAC9D,OAAO,KAAK,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAC1D,OAAO,KAAK,EAAE,mBAAmB,EAAE,mCAAmC,EAAE,mBAAmB,EAAE,MAAM,SAAS,CAAC;AAC7G,OAAO,KAAK,EAAE,8BAA8B,EAAE,MAAM,2BAA2B,CAAC;AAChF,OAAO,KAAK,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAClE,OAAO,KAAK,EAAE,4BAA4B,EAAE,MAAM,yBAAyB,CAAC;AAC5E,OAAO,EAAE,mBAAmB,EAAwB,MAAM,sBAAsB,CAAC;AACjF,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,4BAA4B,CAAC;AACzE,OAAO,KAAK,EAAE,iCAAiC,EAAE,MAAM,yCAAyC,CAAC;AAEjG,MAAM,WAAW,eAAe;IAC9B,WAAW,EAAE,cAAc,CAAC;IAC5B,YAAY,EAAE,eAAe,CAAC;IAC9B,sBAAsB,EAAE,8BAA8B,CAAC;IACvD,eAAe,EAAE,uBAAuB,CAAC;IACzC,oBAAoB,EAAE,4BAA4B,CAAC;IACnD,cAAc,EAAE,sBAAsB,CAAC;IACvC,YAAY,EAAE,oBAAoB,CAAC;IACnC,iBAAiB,EAAE,yBAAyB,CAAC;IAC7C,aAAa,EAAE,qBAAqB,CAAC;IACrC,gBAAgB,EAAE,mBAAmB,CAAC;IACtC,WAAW,EAAE,mBAAmB,CAAC;IACjC,eAAe,EAAE,OAAO,eAAe,CAAC;IACxC,KAAK,EAAE;QACL,WAAW,EAAE,mBAAmB,CAAC;QACjC,gBAAgB,EAAE,mBAAmB,CAAC;QACtC,2BAA2B,EAAE,mCAAmC,CAAC;KAClE,CAAC;IACF,OAAO,EAAE;QACP,eAAe,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1D,wBAAwB,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QACnE,gBAAgB,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;KAC5D,CAAC;IACF,MAAM,EAAE;QACN,wBAAwB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;KACtE,CAAC;CACH;AAED,MAAM,WAAW,uBAAwB,SAAQ,eAAe;IAC9D,cAAc,EAAE,sBAAsB,CAAC;IACvC,cAAc,EAAE,sBAAsB,CAAC;IACvC,yBAAyB,EAAE,iCAAiC,CAAC;CAC9D;AAkJD,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAEA,OAAO,2BAA2B,CAAC;AACnC,OAAO,mBAAmB,CAAC;AAK3B,OAAO,EAAsC,eAAe,EAAa,MAAM,6BAA6B,CAAC;AAC7G,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,KAAK,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAChE,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,KAAK,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AAC5D,OAAO,KAAK,EAAE,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;AACvE,OAAO,KAAK,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AAC9D,OAAO,KAAK,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAC1D,OAAO,KAAK,EAAE,mBAAmB,EAAE,mCAAmC,EAAE,mBAAmB,EAAE,MAAM,SAAS,CAAC;AAC7G,OAAO,KAAK,EAAE,8BAA8B,EAAE,MAAM,2BAA2B,CAAC;AAChF,OAAO,KAAK,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAClE,OAAO,KAAK,EAAE,4BAA4B,EAAE,MAAM,yBAAyB,CAAC;AAC5E,OAAO,EAAE,mBAAmB,EAAwB,MAAM,sBAAsB,CAAC;AAEjF,MAAM,WAAW,eAAe;IAC9B,WAAW,EAAE,cAAc,CAAC;IAC5B,YAAY,EAAE,eAAe,CAAC;IAC9B,sBAAsB,EAAE,8BAA8B,CAAC;IACvD,eAAe,EAAE,uBAAuB,CAAC;IACzC,oBAAoB,EAAE,4BAA4B,CAAC;IACnD,cAAc,EAAE,sBAAsB,CAAC;IACvC,YAAY,EAAE,oBAAoB,CAAC;IACnC,iBAAiB,EAAE,yBAAyB,CAAC;IAC7C,aAAa,EAAE,qBAAqB,CAAC;IACrC,gBAAgB,EAAE,mBAAmB,CAAC;IACtC,WAAW,EAAE,mBAAmB,CAAC;IACjC,eAAe,EAAE,OAAO,eAAe,CAAC;IACxC,KAAK,EAAE;QACL,WAAW,EAAE,mBAAmB,CAAC;QACjC,gBAAgB,EAAE,mBAAmB,CAAC;QACtC,2BAA2B,EAAE,mCAAmC,CAAC;KAClE,CAAC;IACF,OAAO,EAAE;QACP,eAAe,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1D,wBAAwB,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QACnE,gBAAgB,EAAE,CAAC,WAAW,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;KAC5D,CAAC;IACF,MAAM,EAAE;QACN,wBAAwB,EAAE,CAAC,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;KACtE,CAAC;CACH;AAyHD,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js
index b008b9b..c16d7d3 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js
@@ -61,10 +61,45 @@ const deploy_proxy_admin_1 = require("./deploy-proxy-admin");
 });
 (0, config_1.extendEnvironment)(hre => {
     hre.upgrades = (0, plugins_1.lazyObject)(() => {
-        return makeUpgradesFunctions(hre);
-    });
-    hre.platform = (0, plugins_1.lazyObject)(() => {
-        return makePlatformFunctions(hre);
+        const { silenceWarnings, getAdminAddress, getImplementationAddress, getBeaconAddress, } = require('@openzeppelin/upgrades-core');
+        const { makeDeployProxy } = require('./deploy-proxy');
+        const { makeUpgradeProxy } = require('./upgrade-proxy');
+        const { makeValidateImplementation } = require('./validate-implementation');
+        const { makeValidateUpgrade } = require('./validate-upgrade');
+        const { makeDeployImplementation } = require('./deploy-implementation');
+        const { makePrepareUpgrade } = require('./prepare-upgrade');
+        const { makeDeployBeacon } = require('./deploy-beacon');
+        const { makeDeployBeaconProxy } = require('./deploy-beacon-proxy');
+        const { makeUpgradeBeacon } = require('./upgrade-beacon');
+        const { makeForceImport } = require('./force-import');
+        const { makeChangeProxyAdmin, makeTransferProxyAdminOwnership, makeGetInstanceFunction } = require('./admin');
+        return {
+            silenceWarnings,
+            deployProxy: makeDeployProxy(hre),
+            upgradeProxy: makeUpgradeProxy(hre),
+            validateImplementation: makeValidateImplementation(hre),
+            validateUpgrade: makeValidateUpgrade(hre),
+            deployImplementation: makeDeployImplementation(hre),
+            prepareUpgrade: makePrepareUpgrade(hre),
+            deployBeacon: makeDeployBeacon(hre),
+            deployBeaconProxy: makeDeployBeaconProxy(hre),
+            upgradeBeacon: makeUpgradeBeacon(hre),
+            deployProxyAdmin: (0, deploy_proxy_admin_1.makeDeployProxyAdmin)(hre),
+            forceImport: makeForceImport(hre),
+            admin: {
+                getInstance: makeGetInstanceFunction(hre),
+                changeProxyAdmin: makeChangeProxyAdmin(hre),
+                transferProxyAdminOwnership: makeTransferProxyAdminOwnership(hre),
+            },
+            erc1967: {
+                getAdminAddress: proxyAddress => getAdminAddress(hre.network.provider, proxyAddress),
+                getImplementationAddress: proxyAddress => getImplementationAddress(hre.network.provider, proxyAddress),
+                getBeaconAddress: proxyAddress => getBeaconAddress(hre.network.provider, proxyAddress),
+            },
+            beacon: {
+                getImplementationAddress: beaconAddress => (0, upgrades_core_1.getImplementationAddressFromBeacon)(hre.network.provider, beaconAddress),
+            },
+        };
     });
 });
 (0, config_1.extendConfig)((config) => {
@@ -85,61 +120,6 @@ if (tryRequire('@nomiclabs/hardhat-etherscan')) {
         return await verify(args, hre, runSuper);
     });
 }
-function makeFunctions(hre, platform) {
-    const { silenceWarnings, getAdminAddress, getImplementationAddress, getBeaconAddress, } = require('@openzeppelin/upgrades-core');
-    const { makeDeployProxy } = require('./deploy-proxy');
-    const { makeUpgradeProxy } = require('./upgrade-proxy');
-    const { makeValidateImplementation } = require('./validate-implementation');
-    const { makeValidateUpgrade } = require('./validate-upgrade');
-    const { makeDeployImplementation } = require('./deploy-implementation');
-    const { makePrepareUpgrade } = require('./prepare-upgrade');
-    const { makeDeployBeacon } = require('./deploy-beacon');
-    const { makeDeployBeaconProxy } = require('./deploy-beacon-proxy');
-    const { makeUpgradeBeacon } = require('./upgrade-beacon');
-    const { makeForceImport } = require('./force-import');
-    const { makeChangeProxyAdmin, makeTransferProxyAdminOwnership, makeGetInstanceFunction } = require('./admin');
-    return {
-        silenceWarnings,
-        deployProxy: makeDeployProxy(hre, platform),
-        upgradeProxy: makeUpgradeProxy(hre, platform),
-        validateImplementation: makeValidateImplementation(hre),
-        validateUpgrade: makeValidateUpgrade(hre),
-        deployImplementation: makeDeployImplementation(hre, platform),
-        prepareUpgrade: makePrepareUpgrade(hre, platform),
-        deployBeacon: makeDeployBeacon(hre, platform),
-        deployBeaconProxy: makeDeployBeaconProxy(hre, platform),
-        upgradeBeacon: makeUpgradeBeacon(hre, platform),
-        deployProxyAdmin: (0, deploy_proxy_admin_1.makeDeployProxyAdmin)(hre, platform),
-        forceImport: makeForceImport(hre),
-        admin: {
-            getInstance: makeGetInstanceFunction(hre),
-            changeProxyAdmin: makeChangeProxyAdmin(hre, platform),
-            transferProxyAdminOwnership: makeTransferProxyAdminOwnership(hre, platform), // block on platform
-        },
-        erc1967: {
-            getAdminAddress: (proxyAddress) => getAdminAddress(hre.network.provider, proxyAddress),
-            getImplementationAddress: (proxyAddress) => getImplementationAddress(hre.network.provider, proxyAddress),
-            getBeaconAddress: (proxyAddress) => getBeaconAddress(hre.network.provider, proxyAddress),
-        },
-        beacon: {
-            getImplementationAddress: (beaconAddress) => (0, upgrades_core_1.getImplementationAddressFromBeacon)(hre.network.provider, beaconAddress),
-        },
-    };
-}
-function makeUpgradesFunctions(hre) {
-    return makeFunctions(hre, false);
-}
-function makePlatformFunctions(hre) {
-    const { makeDeployContract } = require('./deploy-contract');
-    const { makeProposeUpgrade } = require('./platform/propose-upgrade');
-    const { makeGetDefaultApprovalProcess } = require('./platform/get-default-approval-process');
-    return {
-        ...makeFunctions(hre, true),
-        deployContract: makeDeployContract(hre, true),
-        proposeUpgrade: makeProposeUpgrade(hre, true),
-        getDefaultApprovalProcess: makeGetDefaultApprovalProcess(hre),
-    };
-}
 function tryRequire(id) {
     try {
         require(id);
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js.map
index 17a8d3c..fa8d601 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.d.ts
deleted file mode 100644
index 726180c..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import type { ContractFactory } from 'ethers';
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { Deployment, RemoteDeploymentId } from '@openzeppelin/upgrades-core';
-import { DeployTransaction, PlatformDeployOptions, UpgradeOptions } from '../utils';
-export declare function platformDeploy(hre: HardhatRuntimeEnvironment, factory: ContractFactory, opts: UpgradeOptions & PlatformDeployOptions, ...args: unknown[]): Promise<Required<Deployment & DeployTransaction> & RemoteDeploymentId>;
-//# sourceMappingURL=deploy.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.d.ts.map
deleted file mode 100644
index 64ec12e..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"deploy.d.ts","sourceRoot":"","sources":["../../src/platform/deploy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAU,eAAe,EAAE,MAAM,QAAQ,CAAC;AACtD,OAAO,EAAyC,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAKjG,OAAO,EACL,UAAU,EACV,kBAAkB,EAGnB,MAAM,6BAA6B,CAAC;AAWrC,OAAO,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAkCpF,wBAAsB,cAAc,CAClC,GAAG,EAAE,yBAAyB,EAC9B,OAAO,EAAE,eAAe,EACxB,IAAI,EAAE,cAAc,GAAG,qBAAqB,EAC5C,GAAG,IAAI,EAAE,OAAO,EAAE,GACjB,OAAO,CAAC,QAAQ,CAAC,UAAU,GAAG,iBAAiB,CAAC,GAAG,kBAAkB,CAAC,CAqDxE"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.js
deleted file mode 100644
index 726f592..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.js
+++ /dev/null
@@ -1,125 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.platformDeploy = void 0;
-const contract_names_1 = require("hardhat/utils/contract-names");
-const upgrades_core_1 = require("@openzeppelin/upgrades-core");
-const build_info_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/build-info.json"));
-const ERC1967Proxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol/ERC1967Proxy.json"));
-const BeaconProxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol/BeaconProxy.json"));
-const UpgradeableBeacon_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol/UpgradeableBeacon.json"));
-const TransparentUpgradeableProxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy.json"));
-const ProxyAdmin_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol/ProxyAdmin.json"));
-const utils_1 = require("./utils");
-const debug_1 = __importDefault(require("../utils/debug"));
-const deploy_impl_1 = require("../utils/deploy-impl");
-const upgrades_core_2 = require("@openzeppelin/upgrades-core");
-const deployableProxyContracts = [
-    ERC1967Proxy_json_1.default,
-    BeaconProxy_json_1.default,
-    UpgradeableBeacon_json_1.default,
-    TransparentUpgradeableProxy_json_1.default,
-    ProxyAdmin_json_1.default,
-];
-async function platformDeploy(hre, factory, opts, ...args) {
-    const client = (0, utils_1.getPlatformClient)(hre);
-    const constructorArgs = [...args];
-    const contractInfo = await getContractInfo(hre, factory, { constructorArgs, ...opts });
-    const network = await (0, utils_1.getNetwork)(hre);
-    (0, debug_1.default)(`Network ${network}`);
-    const verifySourceCode = opts.verifySourceCode ?? true;
-    (0, debug_1.default)(`Verify source code: ${verifySourceCode}`);
-    let license = undefined;
-    if (verifySourceCode) {
-        license = getLicenseFromMetadata(contractInfo);
-        (0, debug_1.default)(`License type: ${license}`);
-    }
-    if (opts.salt !== undefined) {
-        (0, debug_1.default)(`Salt: ${opts.salt}`);
-    }
-    let deploymentResponse;
-    try {
-        deploymentResponse = await client.Deployment.deploy({
-            contractName: contractInfo.contractName,
-            contractPath: contractInfo.sourceName,
-            network: network,
-            artifactPayload: JSON.stringify(contractInfo.buildInfo),
-            licenseType: license,
-            constructorInputs: constructorArgs,
-            verifySourceCode: verifySourceCode,
-            relayerId: opts.relayerId,
-            salt: opts.salt,
-        });
-    }
-    catch (e) {
-        if (e.response?.data?.message?.includes('licenseType should be equal to one of the allowed values')) {
-            throw new upgrades_core_1.UpgradesError(`License type ${license} is not a valid SPDX license identifier for block explorer verification.`, () => 'Specify a valid SPDX-License-Identifier in your contract.');
-        }
-        else {
-            throw e;
-        }
-    }
-    const txResponse = await hre.ethers.provider.getTransaction(deploymentResponse.txHash);
-    const checksumAddress = hre.ethers.utils.getAddress(deploymentResponse.address);
-    return {
-        address: checksumAddress,
-        txHash: deploymentResponse.txHash,
-        deployTransaction: txResponse,
-        remoteDeploymentId: deploymentResponse.deploymentId,
-    };
-}
-exports.platformDeploy = platformDeploy;
-async function getContractInfo(hre, factory, opts) {
-    let fullContractName;
-    try {
-        // Get fully qualified contract name from validations
-        const deployData = await (0, deploy_impl_1.getDeployData)(hre, factory, opts);
-        [fullContractName] = (0, upgrades_core_1.getContractNameAndRunValidation)(deployData.validations, deployData.version);
-        (0, debug_1.default)(`Contract ${fullContractName}`);
-    }
-    catch (e) {
-        if (e instanceof upgrades_core_2.ContractSourceNotFoundError) {
-            // Proxy contracts would not be found in the validations, so try to get these from the plugin's precompiled artifacts.
-            for (const artifact of deployableProxyContracts) {
-                if (artifact.bytecode === factory.bytecode) {
-                    const sourceName = artifact.sourceName;
-                    const contractName = artifact.contractName;
-                    const buildInfo = build_info_json_1.default;
-                    (0, debug_1.default)(`Proxy contract ${sourceName}:${contractName}`);
-                    return { sourceName, contractName, buildInfo };
-                }
-            }
-        }
-        // If nothing else worked, re-throw error about the contract not being found.
-        throw e;
-    }
-    const { sourceName, contractName } = (0, contract_names_1.parseFullyQualifiedName)(fullContractName);
-    // Get the build-info file corresponding to the fully qualified contract name
-    const buildInfo = await hre.artifacts.getBuildInfo(fullContractName);
-    if (buildInfo === undefined) {
-        throw new upgrades_core_1.UpgradesError(`Could not get Hardhat compilation artifact for contract ${fullContractName}`, () => `Run \`npx hardhat compile\``);
-    }
-    return { sourceName, contractName, buildInfo };
-}
-/**
- * Get the license type from the contract metadata without validating its validity, except converts undefined or UNLICENSED to None.
- */
-function getLicenseFromMetadata(contractInfo) {
-    const compilerOutput = contractInfo.buildInfo.output.contracts[contractInfo.sourceName][contractInfo.contractName];
-    const metadataString = compilerOutput.metadata;
-    if (metadataString === undefined) {
-        throw new upgrades_core_1.UpgradesError('License type could not be determined from contract metadata', () => 'Enable metadata output in your compiler settings.');
-    }
-    const metadata = JSON.parse(metadataString);
-    const license = metadata.sources[contractInfo.sourceName].license;
-    if (license === undefined || license === 'UNLICENSED') {
-        // UNLICENSED means no license according to solidity docs
-        return 'None';
-    }
-    else {
-        return license;
-    }
-}
-//# sourceMappingURL=deploy.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.js.map
deleted file mode 100644
index 3f9c279..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/deploy.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../src/platform/deploy.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.d.ts
deleted file mode 100644
index e6cee2a..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-export interface ApprovalProcess {
-    approvalProcessId: string;
-    address?: string;
-}
-export type GetDefaultApprovalProcessFunction = () => Promise<ApprovalProcess>;
-export declare function makeGetDefaultApprovalProcess(hre: HardhatRuntimeEnvironment): GetDefaultApprovalProcessFunction;
-//# sourceMappingURL=get-default-approval-process.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.d.ts.map
deleted file mode 100644
index 4eef98c..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"get-default-approval-process.d.ts","sourceRoot":"","sources":["../../src/platform/get-default-approval-process.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAI1D,MAAM,WAAW,eAAe;IAC9B,iBAAiB,EAAE,MAAM,CAAC;IAC1B,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,MAAM,iCAAiC,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,CAAC;AAE/E,wBAAgB,6BAA6B,CAAC,GAAG,EAAE,yBAAyB,GAAG,iCAAiC,CAmB/G"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.js
deleted file mode 100644
index 1f041e2..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.js
+++ /dev/null
@@ -1,21 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.makeGetDefaultApprovalProcess = void 0;
-const utils_1 = require("./utils");
-function makeGetDefaultApprovalProcess(hre) {
-    return async function getDefaultApprovalProcess() {
-        const client = (0, utils_1.getPlatformClient)(hre);
-        const network = await (0, utils_1.getNetwork)(hre);
-        const response = await client.Upgrade.getApprovalProcess(network);
-        if (response.network !== network) {
-            // This should not happen
-            throw new Error(`Returned an approval process for network ${response.network} which does not match current network ${network}`);
-        }
-        return {
-            approvalProcessId: response.approvalProcessId,
-            address: response.via,
-        };
-    };
-}
-exports.makeGetDefaultApprovalProcess = makeGetDefaultApprovalProcess;
-//# sourceMappingURL=get-default-approval-process.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.js.map
deleted file mode 100644
index b52a8c5..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/get-default-approval-process.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"get-default-approval-process.js","sourceRoot":"","sources":["../../src/platform/get-default-approval-process.ts"],"names":[],"mappings":";;;AAEA,mCAAwD;AASxD,SAAgB,6BAA6B,CAAC,GAA8B;IAC1E,OAAO,KAAK,UAAU,yBAAyB;QAC7C,MAAM,MAAM,GAAG,IAAA,yBAAiB,EAAC,GAAG,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAU,EAAC,GAAG,CAAC,CAAC;QAEtC,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAElE,IAAI,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE;YAChC,yBAAyB;YACzB,MAAM,IAAI,KAAK,CACb,4CAA4C,QAAQ,CAAC,OAAO,yCAAyC,OAAO,EAAE,CAC/G,CAAC;SACH;QAED,OAAO;YACL,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB;YAC7C,OAAO,EAAE,QAAQ,CAAC,GAAG;SACtB,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAnBD,sEAmBC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.d.ts
deleted file mode 100644
index 6feb8c7..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import '@openzeppelin/hardhat-upgrades/dist/type-extensions';
-import { ContractFactory, ethers } from 'ethers';
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { PlatformDeployOptions, UpgradeOptions } from '../utils';
-export interface UpgradeProposalResponse {
-    proposalId: string;
-    url?: string;
-    txResponse?: ethers.providers.TransactionResponse;
-}
-export type ProposeUpgradeFunction = (proxyAddress: string, contractNameOrImplFactory: string | ContractFactory, opts?: ProposalOptions) => Promise<UpgradeProposalResponse>;
-export interface ProposalOptions extends UpgradeOptions, PlatformDeployOptions {
-    approvalProcessId?: string;
-}
-export declare function makeProposeUpgrade(hre: HardhatRuntimeEnvironment, platformModule: boolean): ProposeUpgradeFunction;
-//# sourceMappingURL=propose-upgrade.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.d.ts.map
deleted file mode 100644
index 673f81b..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"propose-upgrade.d.ts","sourceRoot":"","sources":["../../src/platform/propose-upgrade.ts"],"names":[],"mappings":"AAAA,OAAO,qDAAqD,CAAC;AAO7D,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEjD,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAIjE,MAAM,WAAW,uBAAuB;IACtC,UAAU,EAAE,MAAM,CAAC;IACnB,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,UAAU,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;CACnD;AAED,MAAM,MAAM,sBAAsB,GAAG,CACnC,YAAY,EAAE,MAAM,EACpB,yBAAyB,EAAE,MAAM,GAAG,eAAe,EACnD,IAAI,CAAC,EAAE,eAAe,KACnB,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAEtC,MAAM,WAAW,eAAgB,SAAQ,cAAc,EAAE,qBAAqB;IAC5E,iBAAiB,CAAC,EAAE,MAAM,CAAC;CAC5B;AAED,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,sBAAsB,CAiDlH"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.js
deleted file mode 100644
index 4b2734b..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.js
+++ /dev/null
@@ -1,52 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.makeProposeUpgrade = void 0;
-require("@openzeppelin/hardhat-upgrades/dist/type-extensions");
-const upgrades_core_1 = require("@openzeppelin/upgrades-core");
-const utils_1 = require("ethers/lib/utils");
-const utils_2 = require("./utils");
-const prepare_upgrade_1 = require("../prepare-upgrade");
-function makeProposeUpgrade(hre, platformModule) {
-    return async function proposeUpgrade(proxyAddress, contractNameOrImplFactory, opts = {}) {
-        opts = (0, utils_2.enablePlatform)(hre, platformModule, opts);
-        const client = (0, utils_2.getPlatformClient)(hre);
-        const network = await (0, utils_2.getNetwork)(hre);
-        if (await (0, upgrades_core_1.isBeaconProxy)(hre.network.provider, proxyAddress)) {
-            throw new Error(`Beacon proxy is not currently supported with platform.proposeUpgrade()`);
-        }
-        else {
-            // try getting the implementation address so that it will give an error if it's not a transparent/uups proxy
-            await (0, upgrades_core_1.getImplementationAddress)(hre.network.provider, proxyAddress);
-        }
-        let proxyAdmin = undefined;
-        if (await (0, upgrades_core_1.isTransparentProxy)(hre.network.provider, proxyAddress)) {
-            // use the erc1967 admin address as the proxy admin
-            proxyAdmin = await (0, upgrades_core_1.getAdminAddress)(hre.network.provider, proxyAddress);
-        }
-        const implFactory = typeof contractNameOrImplFactory === 'string'
-            ? await hre.ethers.getContractFactory(contractNameOrImplFactory)
-            : contractNameOrImplFactory;
-        const abi = implFactory.interface.format(utils_1.FormatTypes.json);
-        const deployedImpl = await (0, prepare_upgrade_1.deployImplForUpgrade)(hre, proxyAddress, implFactory, {
-            getTxResponse: true,
-            ...opts,
-        });
-        const txResponse = deployedImpl.txResponse;
-        const newImplementation = deployedImpl.impl;
-        const upgradeProposalResponse = await client.Upgrade.upgrade({
-            proxyAddress: proxyAddress,
-            proxyAdminAddress: proxyAdmin,
-            newImplementationABI: abi,
-            newImplementationAddress: newImplementation,
-            network: network,
-            approvalProcessId: opts.approvalProcessId,
-        });
-        return {
-            proposalId: upgradeProposalResponse.proposalId,
-            url: upgradeProposalResponse.externalUrl,
-            txResponse,
-        };
-    };
-}
-exports.makeProposeUpgrade = makeProposeUpgrade;
-//# sourceMappingURL=propose-upgrade.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.js.map
deleted file mode 100644
index ad7fc58..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/propose-upgrade.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"propose-upgrade.js","sourceRoot":"","sources":["../../src/platform/propose-upgrade.ts"],"names":[],"mappings":";;;AAAA,+DAA6D;AAC7D,+DAKqC;AAErC,4CAA+C;AAG/C,mCAAwE;AACxE,wDAA0D;AAkB1D,SAAgB,kBAAkB,CAAC,GAA8B,EAAE,cAAuB;IACxF,OAAO,KAAK,UAAU,cAAc,CAAC,YAAY,EAAE,yBAAyB,EAAE,IAAI,GAAG,EAAE;QACrF,IAAI,GAAG,IAAA,sBAAc,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,MAAM,GAAG,IAAA,yBAAiB,EAAC,GAAG,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAU,EAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,MAAM,IAAA,6BAAa,EAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE;YAC3D,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;SAC3F;aAAM;YACL,4GAA4G;YAC5G,MAAM,IAAA,wCAAwB,EAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SACpE;QAED,IAAI,UAAU,GAAG,SAAS,CAAC;QAC3B,IAAI,MAAM,IAAA,kCAAkB,EAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE;YAChE,mDAAmD;YACnD,UAAU,GAAG,MAAM,IAAA,+BAAe,EAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SACxE;QAED,MAAM,WAAW,GACf,OAAO,yBAAyB,KAAK,QAAQ;YAC3C,CAAC,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,yBAAyB,CAAC;YAChE,CAAC,CAAC,yBAAyB,CAAC;QAChC,MAAM,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAW,CAAC,IAAI,CAAW,CAAC;QAErE,MAAM,YAAY,GAAG,MAAM,IAAA,sCAAoB,EAAC,GAAG,EAAE,YAAY,EAAE,WAAW,EAAE;YAC9E,aAAa,EAAE,IAAI;YACnB,GAAG,IAAI;SACR,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC;QAC3C,MAAM,iBAAiB,GAAG,YAAY,CAAC,IAAI,CAAC;QAE5C,MAAM,uBAAuB,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;YAC3D,YAAY,EAAE,YAAY;YAC1B,iBAAiB,EAAE,UAAU;YAC7B,oBAAoB,EAAE,GAAG;YACzB,wBAAwB,EAAE,iBAAiB;YAC3C,OAAO,EAAE,OAAO;YAChB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;SAC1C,CAAC,CAAC;QAEH,OAAO;YACL,UAAU,EAAE,uBAAuB,CAAC,UAAU;YAC9C,GAAG,EAAE,uBAAuB,CAAC,WAAW;YACxC,UAAU;SACX,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAjDD,gDAiDC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.d.ts
deleted file mode 100644
index 153f68c..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.d.ts
+++ /dev/null
@@ -1,43 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { RemoteDeployment, DeployOpts } from '@openzeppelin/upgrades-core';
-import { Network } from '@openzeppelin/defender-base-client';
-import { BlockExplorerApiKeyClient, DeploymentClient, DeploymentConfigClient, PlatformClient, UpgradeClient } from '@openzeppelin/platform-deploy-client';
-import { HardhatPlatformConfig } from '../type-extensions';
-import { Platform } from '../utils';
-export declare function getPlatformApiKey(hre: HardhatRuntimeEnvironment): HardhatPlatformConfig;
-export declare function getNetwork(hre: HardhatRuntimeEnvironment): Promise<Network>;
-export declare function enablePlatform<T extends Platform>(hre: HardhatRuntimeEnvironment, platformModule: boolean, opts: T): T;
-/**
- * Disables Platform for a function that does not support it.
- * If opts.usePlatformDeploy or platformModule is true, throws an error.
- * If hre.config.platform.usePlatformDeploy is true, logs a debug message and passes (to allow fallback to Hardhat signer).
- *
- * @param hre The Hardhat runtime environment
- * @param platformModule Whether the function was called from the platform module
- * @param opts The options passed to the function
- * @param unsupportedFunction The name of the function that does not support Platform
- */
-export declare function disablePlatform(hre: HardhatRuntimeEnvironment, platformModule: boolean, opts: Platform, unsupportedFunction: string): void;
-interface PlatformClient {
-    Deployment: DeploymentClient;
-    DeploymentConfig: DeploymentConfigClient;
-    BlockExplorerApiKey: BlockExplorerApiKeyClient;
-    Upgrade: UpgradeClient;
-}
-export declare function getPlatformClient(hre: HardhatRuntimeEnvironment): PlatformClient;
-/**
- * Gets the remote deployment response for the given id.
- *
- * @param hre The Hardhat runtime environment
- * @param remoteDeploymentId The deployment id.
- * @returns The remote deployment response, or undefined if the deployment is not found.
- * @throws Error if the deployment response could not be retrieved.
- */
-export declare function getRemoteDeployment(hre: HardhatRuntimeEnvironment, remoteDeploymentId: string): Promise<RemoteDeployment | undefined>;
-/**
- * Waits indefinitely for the deployment until it is completed or failed.
- * Returns the last known transaction hash seen from the remote deployment, or undefined if the remote deployment was not retrieved.
- */
-export declare function waitForDeployment(hre: HardhatRuntimeEnvironment, opts: DeployOpts, address: string, remoteDeploymentId: string): Promise<string | undefined>;
-export {};
-//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.d.ts.map
deleted file mode 100644
index a8830dd..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../src/platform/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAGL,gBAAgB,EAChB,UAAU,EAGX,MAAM,6BAA6B,CAAC;AAErC,OAAO,EAAE,OAAO,EAAe,MAAM,oCAAoC,CAAC;AAC1E,OAAO,EACL,yBAAyB,EACzB,gBAAgB,EAChB,sBAAsB,EACtB,cAAc,EACd,aAAa,EACd,MAAM,sCAAsC,CAAC;AAE9C,OAAO,EAAE,qBAAqB,EAAE,MAAM,oBAAoB,CAAC;AAC3D,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAMpC,wBAAgB,iBAAiB,CAAC,GAAG,EAAE,yBAAyB,GAAG,qBAAqB,CASvF;AAED,wBAAsB,UAAU,CAAC,GAAG,EAAE,yBAAyB,GAAG,OAAO,CAAC,OAAO,CAAC,CAQjF;AAED,wBAAgB,cAAc,CAAC,CAAC,SAAS,QAAQ,EAC/C,GAAG,EAAE,yBAAyB,EAC9B,cAAc,EAAE,OAAO,EACvB,IAAI,EAAE,CAAC,GACN,CAAC,CASH;AAED;;;;;;;;;GASG;AACH,wBAAgB,eAAe,CAC7B,GAAG,EAAE,yBAAyB,EAC9B,cAAc,EAAE,OAAO,EACvB,IAAI,EAAE,QAAQ,EACd,mBAAmB,EAAE,MAAM,GAC1B,IAAI,CAeN;AAED,UAAU,cAAc;IACtB,UAAU,EAAE,gBAAgB,CAAC;IAC7B,gBAAgB,EAAE,sBAAsB,CAAC;IACzC,mBAAmB,EAAE,yBAAyB,CAAC;IAC/C,OAAO,EAAE,aAAa,CAAC;CACxB;AAED,wBAAgB,iBAAiB,CAAC,GAAG,EAAE,yBAAyB,GAAG,cAAc,CAEhF;AAED;;;;;;;GAOG;AACH,wBAAsB,mBAAmB,CACvC,GAAG,EAAE,yBAAyB,EAC9B,kBAAkB,EAAE,MAAM,GACzB,OAAO,CAAC,gBAAgB,GAAG,SAAS,CAAC,CAWvC;AAED;;;GAGG;AACH,wBAAsB,iBAAiB,CACrC,GAAG,EAAE,yBAAyB,EAC9B,IAAI,EAAE,UAAU,EAChB,OAAO,EAAE,MAAM,EACf,kBAAkB,EAAE,MAAM,GACzB,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,CAqB7B"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.js
deleted file mode 100644
index d04fc63..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.js
+++ /dev/null
@@ -1,118 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.waitForDeployment = exports.getRemoteDeployment = exports.getPlatformClient = exports.disablePlatform = exports.enablePlatform = exports.getNetwork = exports.getPlatformApiKey = void 0;
-const upgrades_core_1 = require("@openzeppelin/upgrades-core");
-const defender_base_client_1 = require("@openzeppelin/defender-base-client");
-const platform_deploy_client_1 = require("@openzeppelin/platform-deploy-client");
-const debug_1 = __importDefault(require("../utils/debug"));
-const util_1 = require("util");
-const sleep = (0, util_1.promisify)(setTimeout);
-function getPlatformApiKey(hre) {
-    const cfg = hre.config.platform;
-    if (!cfg || !cfg.apiKey || !cfg.apiSecret) {
-        const sampleConfig = JSON.stringify({ apiKey: 'YOUR_API_KEY', apiSecret: 'YOUR_API_SECRET' }, null, 2);
-        throw new Error(`Missing OpenZeppelin Platform API key and secret in hardhat config. Add the following to your hardhat.config.js configuration:\nplatform: ${sampleConfig}\n`);
-    }
-    return cfg;
-}
-exports.getPlatformApiKey = getPlatformApiKey;
-async function getNetwork(hre) {
-    const { provider } = hre.network;
-    const chainId = hre.network.config.chainId ?? (await (0, upgrades_core_1.getChainId)(provider));
-    const network = (0, defender_base_client_1.fromChainId)(chainId);
-    if (network === undefined) {
-        throw new Error(`Network ${chainId} is not supported by the OpenZeppelin Platform`);
-    }
-    return network;
-}
-exports.getNetwork = getNetwork;
-function enablePlatform(hre, platformModule, opts) {
-    if ((hre.config.platform?.usePlatformDeploy || platformModule) && opts.usePlatformDeploy === undefined) {
-        return {
-            ...opts,
-            usePlatformDeploy: true,
-        };
-    }
-    else {
-        return opts;
-    }
-}
-exports.enablePlatform = enablePlatform;
-/**
- * Disables Platform for a function that does not support it.
- * If opts.usePlatformDeploy or platformModule is true, throws an error.
- * If hre.config.platform.usePlatformDeploy is true, logs a debug message and passes (to allow fallback to Hardhat signer).
- *
- * @param hre The Hardhat runtime environment
- * @param platformModule Whether the function was called from the platform module
- * @param opts The options passed to the function
- * @param unsupportedFunction The name of the function that does not support Platform
- */
-function disablePlatform(hre, platformModule, opts, unsupportedFunction) {
-    if (opts.usePlatformDeploy) {
-        throw new upgrades_core_1.UpgradesError(`The function ${unsupportedFunction} is not supported with the \`usePlatformDeploy\` option.`);
-    }
-    else if (platformModule) {
-        throw new upgrades_core_1.UpgradesError(`The function ${unsupportedFunction} is not supported with the \`platform\` module.`, () => `Call the function as upgrades.${unsupportedFunction} to use the Hardhat signer.`);
-    }
-    else if (hre.config.platform?.usePlatformDeploy) {
-        (0, debug_1.default)(`The function ${unsupportedFunction} is not supported with the \`platform.usePlatformDeploy\` configuration option. Using the Hardhat signer instead.`);
-    }
-}
-exports.disablePlatform = disablePlatform;
-function getPlatformClient(hre) {
-    return (0, platform_deploy_client_1.PlatformClient)(getPlatformApiKey(hre));
-}
-exports.getPlatformClient = getPlatformClient;
-/**
- * Gets the remote deployment response for the given id.
- *
- * @param hre The Hardhat runtime environment
- * @param remoteDeploymentId The deployment id.
- * @returns The remote deployment response, or undefined if the deployment is not found.
- * @throws Error if the deployment response could not be retrieved.
- */
-async function getRemoteDeployment(hre, remoteDeploymentId) {
-    const client = getPlatformClient(hre);
-    try {
-        return (await client.Deployment.get(remoteDeploymentId));
-    }
-    catch (e) {
-        const message = e.response?.data?.message;
-        if (message?.match(/deployment with id .* not found\./)) {
-            return undefined;
-        }
-        throw e;
-    }
-}
-exports.getRemoteDeployment = getRemoteDeployment;
-/**
- * Waits indefinitely for the deployment until it is completed or failed.
- * Returns the last known transaction hash seen from the remote deployment, or undefined if the remote deployment was not retrieved.
- */
-async function waitForDeployment(hre, opts, address, remoteDeploymentId) {
-    const pollInterval = opts.pollingInterval ?? 5e3;
-    let lastKnownTxHash;
-    // eslint-disable-next-line no-constant-condition
-    while (true) {
-        if (await (0, upgrades_core_1.hasCode)(hre.ethers.provider, address)) {
-            (0, debug_1.default)('code in target address found', address);
-            break;
-        }
-        const response = await getRemoteDeployment(hre, remoteDeploymentId);
-        lastKnownTxHash = response?.txHash;
-        const completed = await (0, upgrades_core_1.isDeploymentCompleted)(address, remoteDeploymentId, response);
-        if (completed) {
-            break;
-        }
-        else {
-            await sleep(pollInterval);
-        }
-    }
-    return lastKnownTxHash;
-}
-exports.waitForDeployment = waitForDeployment;
-//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.js.map
deleted file mode 100644
index bee89b4..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/platform/utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/platform/utils.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts
index aeb435b..222cfc9 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts
@@ -2,8 +2,6 @@ import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory } from 'ethers';
 import { ContractAddressOrInstance, PrepareUpgradeOptions } from './utils';
 import { DeployImplementationResponse } from './deploy-implementation';
-import { DeployedImpl } from './utils/deploy-impl';
-export type PrepareUpgradeFunction = (referenceAddressOrContract: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: PrepareUpgradeOptions) => Promise<DeployImplementationResponse>;
-export declare function makePrepareUpgrade(hre: HardhatRuntimeEnvironment, platformModule: boolean): PrepareUpgradeFunction;
-export declare function deployImplForUpgrade(hre: HardhatRuntimeEnvironment, referenceAddressOrContract: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: PrepareUpgradeOptions): Promise<DeployedImpl>;
+export declare type PrepareUpgradeFunction = (proxyOrBeaconAddress: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: PrepareUpgradeOptions) => Promise<DeployImplementationResponse>;
+export declare function makePrepareUpgrade(hre: HardhatRuntimeEnvironment): PrepareUpgradeFunction;
 //# sourceMappingURL=prepare-upgrade.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts.map
index d6ac8d9..4a01398 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"prepare-upgrade.d.ts","sourceRoot":"","sources":["../src/prepare-upgrade.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAE9C,OAAO,EACL,yBAAyB,EAIzB,qBAAqB,EACtB,MAAM,SAAS,CAAC;AAQjB,OAAO,EAAE,4BAA4B,EAAE,MAAM,yBAAyB,CAAC;AAEvE,OAAO,EAAyB,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAE1E,MAAM,MAAM,sBAAsB,GAAG,CACnC,0BAA0B,EAAE,yBAAyB,EACrD,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,qBAAqB,KACzB,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE3C,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,sBAAsB,CAYlH;AAED,wBAAsB,oBAAoB,CACxC,GAAG,EAAE,yBAAyB,EAC9B,0BAA0B,EAAE,yBAAyB,EACrD,WAAW,EAAE,eAAe,EAC5B,IAAI,GAAE,qBAA0B,GAC/B,OAAO,CAAC,YAAY,CAAC,CAkBvB"}
\ No newline at end of file
+{"version":3,"file":"prepare-upgrade.d.ts","sourceRoot":"","sources":["../src/prepare-upgrade.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAE9C,OAAO,EACL,yBAAyB,EAIzB,qBAAqB,EACtB,MAAM,SAAS,CAAC;AAQjB,OAAO,EAAE,4BAA4B,EAAE,MAAM,yBAAyB,CAAC;AAEvE,oBAAY,sBAAsB,GAAG,CACnC,oBAAoB,EAAE,yBAAyB,EAC/C,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,qBAAqB,KACzB,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE3C,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,yBAAyB,GAAG,sBAAsB,CAsBzF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js
index 1a5b5f7..224ecc6 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js
@@ -1,14 +1,26 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.deployImplForUpgrade = exports.makePrepareUpgrade = void 0;
+exports.makePrepareUpgrade = void 0;
 const utils_1 = require("./utils");
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
-const utils_2 = require("./platform/utils");
-const deploy_impl_1 = require("./utils/deploy-impl");
-function makePrepareUpgrade(hre, platformModule) {
-    return async function prepareUpgrade(referenceAddressOrContract, ImplFactory, opts = {}) {
-        opts = (0, utils_2.enablePlatform)(hre, platformModule, opts);
-        const deployedImpl = await deployImplForUpgrade(hre, referenceAddressOrContract, ImplFactory, opts);
+function makePrepareUpgrade(hre) {
+    return async function prepareUpgrade(proxyOrBeacon, ImplFactory, opts = {}) {
+        const proxyOrBeaconAddress = (0, utils_1.getContractAddress)(proxyOrBeacon);
+        const { provider } = hre.network;
+        let deployedImpl;
+        if (await (0, upgrades_core_1.isTransparentOrUUPSProxy)(provider, proxyOrBeaconAddress)) {
+            deployedImpl = await (0, utils_1.deployProxyImpl)(hre, ImplFactory, opts, proxyOrBeaconAddress);
+        }
+        else if (await (0, upgrades_core_1.isBeaconProxy)(provider, proxyOrBeaconAddress)) {
+            const beaconAddress = await (0, upgrades_core_1.getBeaconAddress)(provider, proxyOrBeaconAddress);
+            deployedImpl = await (0, utils_1.deployBeaconImpl)(hre, ImplFactory, opts, beaconAddress);
+        }
+        else if (await (0, upgrades_core_1.isBeacon)(provider, proxyOrBeaconAddress)) {
+            deployedImpl = await (0, utils_1.deployBeaconImpl)(hre, ImplFactory, opts, proxyOrBeaconAddress);
+        }
+        else {
+            throw new upgrades_core_1.PrepareUpgradeUnsupportedError(proxyOrBeaconAddress);
+        }
         if (opts.getTxResponse && deployedImpl.txResponse !== undefined) {
             return deployedImpl.txResponse;
         }
@@ -18,27 +30,4 @@ function makePrepareUpgrade(hre, platformModule) {
     };
 }
 exports.makePrepareUpgrade = makePrepareUpgrade;
-async function deployImplForUpgrade(hre, referenceAddressOrContract, ImplFactory, opts = {}) {
-    const referenceAddress = (0, utils_1.getContractAddress)(referenceAddressOrContract);
-    const { provider } = hre.network;
-    let deployedImpl;
-    if (await (0, upgrades_core_1.isTransparentOrUUPSProxy)(provider, referenceAddress)) {
-        deployedImpl = await (0, utils_1.deployProxyImpl)(hre, ImplFactory, opts, referenceAddress);
-    }
-    else if (await (0, upgrades_core_1.isBeaconProxy)(provider, referenceAddress)) {
-        const beaconAddress = await (0, upgrades_core_1.getBeaconAddress)(provider, referenceAddress);
-        deployedImpl = await (0, utils_1.deployBeaconImpl)(hre, ImplFactory, opts, beaconAddress);
-    }
-    else if (await (0, upgrades_core_1.isBeacon)(provider, referenceAddress)) {
-        deployedImpl = await (0, utils_1.deployBeaconImpl)(hre, ImplFactory, opts, referenceAddress);
-    }
-    else {
-        if (opts.kind === undefined) {
-            throw new upgrades_core_1.PrepareUpgradeRequiresKindError();
-        }
-        deployedImpl = await (0, deploy_impl_1.deployUpgradeableImpl)(hre, ImplFactory, opts, referenceAddress);
-    }
-    return deployedImpl;
-}
-exports.deployImplForUpgrade = deployImplForUpgrade;
 //# sourceMappingURL=prepare-upgrade.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js.map
index dbe31f3..12d0e70 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/prepare-upgrade.js.map
@@ -1 +1 @@
-{"version":3,"file":"prepare-upgrade.js","sourceRoot":"","sources":["../src/prepare-upgrade.ts"],"names":[],"mappings":";;;AAGA,mCAMiB;AACjB,+DAMqC;AAErC,4CAAkD;AAClD,qDAA0E;AAQ1E,SAAgB,kBAAkB,CAAC,GAA8B,EAAE,cAAuB;IACxF,OAAO,KAAK,UAAU,cAAc,CAAC,0BAA0B,EAAE,WAAW,EAAE,OAA8B,EAAE;QAC5G,IAAI,GAAG,IAAA,sBAAc,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,YAAY,GAAG,MAAM,oBAAoB,CAAC,GAAG,EAAE,0BAA0B,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAEpG,IAAI,IAAI,CAAC,aAAa,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/D,OAAO,YAAY,CAAC,UAAU,CAAC;SAChC;aAAM;YACL,OAAO,YAAY,CAAC,IAAI,CAAC;SAC1B;IACH,CAAC,CAAC;AACJ,CAAC;AAZD,gDAYC;AAEM,KAAK,UAAU,oBAAoB,CACxC,GAA8B,EAC9B,0BAAqD,EACrD,WAA4B,EAC5B,OAA8B,EAAE;IAEhC,MAAM,gBAAgB,GAAG,IAAA,0BAAkB,EAAC,0BAA0B,CAAC,CAAC;IACxE,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;IACjC,IAAI,YAAY,CAAC;IACjB,IAAI,MAAM,IAAA,wCAAwB,EAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAE;QAC9D,YAAY,GAAG,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;KAChF;SAAM,IAAI,MAAM,IAAA,6BAAa,EAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAE;QAC1D,MAAM,aAAa,GAAG,MAAM,IAAA,gCAAgB,EAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QACzE,YAAY,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;KAC9E;SAAM,IAAI,MAAM,IAAA,wBAAQ,EAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAE;QACrD,YAAY,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;KACjF;SAAM;QACL,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,+CAA+B,EAAE,CAAC;SAC7C;QACD,YAAY,GAAG,MAAM,IAAA,mCAAqB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;KACtF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAvBD,oDAuBC"}
\ No newline at end of file
+{"version":3,"file":"prepare-upgrade.js","sourceRoot":"","sources":["../src/prepare-upgrade.ts"],"names":[],"mappings":";;;AAGA,mCAMiB;AACjB,+DAMqC;AASrC,SAAgB,kBAAkB,CAAC,GAA8B;IAC/D,OAAO,KAAK,UAAU,cAAc,CAAC,aAAa,EAAE,WAAW,EAAE,OAA8B,EAAE;QAC/F,MAAM,oBAAoB,GAAG,IAAA,0BAAkB,EAAC,aAAa,CAAC,CAAC;QAC/D,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,IAAI,YAAY,CAAC;QACjB,IAAI,MAAM,IAAA,wCAAwB,EAAC,QAAQ,EAAE,oBAAoB,CAAC,EAAE;YAClE,YAAY,GAAG,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;SACpF;aAAM,IAAI,MAAM,IAAA,6BAAa,EAAC,QAAQ,EAAE,oBAAoB,CAAC,EAAE;YAC9D,MAAM,aAAa,GAAG,MAAM,IAAA,gCAAgB,EAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;YAC7E,YAAY,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;SAC9E;aAAM,IAAI,MAAM,IAAA,wBAAQ,EAAC,QAAQ,EAAE,oBAAoB,CAAC,EAAE;YACzD,YAAY,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;SACrF;aAAM;YACL,MAAM,IAAI,8CAA8B,CAAC,oBAAoB,CAAC,CAAC;SAChE;QAED,IAAI,IAAI,CAAC,aAAa,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/D,OAAO,YAAY,CAAC,UAAU,CAAC;SAChC;aAAM;YACL,OAAO,YAAY,CAAC,IAAI,CAAC;SAC1B;IACH,CAAC,CAAC;AACJ,CAAC;AAtBD,gDAsBC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts
index 2e4f24f..873c1c4 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts
@@ -1,22 +1,8 @@
 import 'hardhat/types/runtime';
-import type { HardhatUpgrades, PlatformHardhatUpgrades } from '.';
+import type { HardhatUpgrades } from '.';
 declare module 'hardhat/types/runtime' {
     interface HardhatRuntimeEnvironment {
         upgrades: HardhatUpgrades;
-        platform: PlatformHardhatUpgrades;
-    }
-}
-export interface HardhatPlatformConfig {
-    apiKey: string;
-    apiSecret: string;
-    usePlatformDeploy?: boolean;
-}
-declare module 'hardhat/types/config' {
-    interface HardhatUserConfig {
-        platform?: HardhatPlatformConfig;
-    }
-    interface HardhatConfig {
-        platform?: HardhatPlatformConfig;
     }
 }
 //# sourceMappingURL=type-extensions.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts.map
index bbcf6ef..1b9a499 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/type-extensions.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"type-extensions.d.ts","sourceRoot":"","sources":["../src/type-extensions.ts"],"names":[],"mappings":"AAAA,OAAO,uBAAuB,CAAC;AAE/B,OAAO,KAAK,EAAE,eAAe,EAAE,uBAAuB,EAAE,MAAM,GAAG,CAAC;AAElE,OAAO,QAAQ,uBAAuB,CAAC;IACrC,UAAiB,yBAAyB;QACxC,QAAQ,EAAE,eAAe,CAAC;QAC1B,QAAQ,EAAE,uBAAuB,CAAC;KACnC;CACF;AAED,MAAM,WAAW,qBAAqB;IACpC,MAAM,EAAE,MAAM,CAAC;IACf,SAAS,EAAE,MAAM,CAAC;IAClB,iBAAiB,CAAC,EAAE,OAAO,CAAC;CAC7B;AAED,OAAO,QAAQ,sBAAsB,CAAC;IACpC,UAAiB,iBAAiB;QAChC,QAAQ,CAAC,EAAE,qBAAqB,CAAC;KAClC;IAED,UAAiB,aAAa;QAC5B,QAAQ,CAAC,EAAE,qBAAqB,CAAC;KAClC;CACF"}
\ No newline at end of file
+{"version":3,"file":"type-extensions.d.ts","sourceRoot":"","sources":["../src/type-extensions.ts"],"names":[],"mappings":"AAAA,OAAO,uBAAuB,CAAC;AAE/B,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,GAAG,CAAC;AAEzC,OAAO,QAAQ,uBAAuB,CAAC;IACrC,UAAiB,yBAAyB;QACxC,QAAQ,EAAE,eAAe,CAAC;KAC3B;CACF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts
index 03aecb3..a767dc4 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts
@@ -1,6 +1,6 @@
 import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory, Contract } from 'ethers';
 import { ContractAddressOrInstance, UpgradeBeaconOptions } from './utils';
-export type UpgradeBeaconFunction = (beacon: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: UpgradeBeaconOptions) => Promise<Contract>;
-export declare function makeUpgradeBeacon(hre: HardhatRuntimeEnvironment, platformModule: boolean): UpgradeBeaconFunction;
+export declare type UpgradeBeaconFunction = (beacon: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: UpgradeBeaconOptions) => Promise<Contract>;
+export declare function makeUpgradeBeacon(hre: HardhatRuntimeEnvironment): UpgradeBeaconFunction;
 //# sourceMappingURL=upgrade-beacon.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts.map
index 4aef769..d4277aa 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"upgrade-beacon.d.ts","sourceRoot":"","sources":["../src/upgrade-beacon.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAExD,OAAO,EAEL,yBAAyB,EAGzB,oBAAoB,EACrB,MAAM,SAAS,CAAC;AAGjB,MAAM,MAAM,qBAAqB,GAAG,CAClC,MAAM,EAAE,yBAAyB,EACjC,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,oBAAoB,KACxB,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvB,wBAAgB,iBAAiB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,qBAAqB,CAehH"}
\ No newline at end of file
+{"version":3,"file":"upgrade-beacon.d.ts","sourceRoot":"","sources":["../src/upgrade-beacon.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAExD,OAAO,EAEL,yBAAyB,EAGzB,oBAAoB,EACrB,MAAM,SAAS,CAAC;AAEjB,oBAAY,qBAAqB,GAAG,CAClC,MAAM,EAAE,yBAAyB,EACjC,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,oBAAoB,KACxB,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvB,wBAAgB,iBAAiB,CAAC,GAAG,EAAE,yBAAyB,GAAG,qBAAqB,CAavF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js
index e5519be..3858967 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js
@@ -2,10 +2,8 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.makeUpgradeBeacon = void 0;
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
-function makeUpgradeBeacon(hre, platformModule) {
+function makeUpgradeBeacon(hre) {
     return async function upgradeBeacon(beacon, ImplFactory, opts = {}) {
-        (0, utils_2.disablePlatform)(hre, platformModule, opts, upgradeBeacon.name);
         const beaconAddress = (0, utils_1.getContractAddress)(beacon);
         const { impl: nextImpl } = await (0, utils_1.deployBeaconImpl)(hre, ImplFactory, opts, beaconAddress);
         const UpgradeableBeaconFactory = await (0, utils_1.getUpgradeableBeaconFactory)(hre, ImplFactory.signer);
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js.map
index 2f3bf91..987a4f1 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-beacon.js.map
@@ -1 +1 @@
-{"version":3,"file":"upgrade-beacon.js","sourceRoot":"","sources":["../src/upgrade-beacon.ts"],"names":[],"mappings":";;;AAGA,mCAMiB;AACjB,4CAAmD;AAQnD,SAAgB,iBAAiB,CAAC,GAA8B,EAAE,cAAuB;IACvF,OAAO,KAAK,UAAU,aAAa,CAAC,MAAM,EAAE,WAAW,EAAE,OAA6B,EAAE;QACtF,IAAA,uBAAe,EAAC,GAAG,EAAE,cAAc,EAAE,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;QAE/D,MAAM,aAAa,GAAG,IAAA,0BAAkB,EAAC,MAAM,CAAC,CAAC;QACjD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAEzF,MAAM,wBAAwB,GAAG,MAAM,IAAA,mCAA2B,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAC5F,MAAM,cAAc,GAAG,wBAAwB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACtE,MAAM,SAAS,GAAG,MAAM,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE3D,kFAAkF;QAClF,cAAc,CAAC,iBAAiB,GAAG,SAAS,CAAC;QAC7C,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;AACJ,CAAC;AAfD,8CAeC"}
\ No newline at end of file
+{"version":3,"file":"upgrade-beacon.js","sourceRoot":"","sources":["../src/upgrade-beacon.ts"],"names":[],"mappings":";;;AAGA,mCAMiB;AAQjB,SAAgB,iBAAiB,CAAC,GAA8B;IAC9D,OAAO,KAAK,UAAU,aAAa,CAAC,MAAM,EAAE,WAAW,EAAE,OAA6B,EAAE;QACtF,MAAM,aAAa,GAAG,IAAA,0BAAkB,EAAC,MAAM,CAAC,CAAC;QACjD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAEzF,MAAM,wBAAwB,GAAG,MAAM,IAAA,mCAA2B,EAAC,GAAG,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAC5F,MAAM,cAAc,GAAG,wBAAwB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACtE,MAAM,SAAS,GAAG,MAAM,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE3D,kFAAkF;QAClF,cAAc,CAAC,iBAAiB,GAAG,SAAS,CAAC;QAC7C,OAAO,cAAc,CAAC;IACxB,CAAC,CAAC;AACJ,CAAC;AAbD,8CAaC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts
index 7ee34d1..e302aaa 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts
@@ -1,6 +1,6 @@
 import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory, Contract } from 'ethers';
 import { UpgradeProxyOptions, ContractAddressOrInstance } from './utils';
-export type UpgradeFunction = (proxy: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: UpgradeProxyOptions) => Promise<Contract>;
-export declare function makeUpgradeProxy(hre: HardhatRuntimeEnvironment, platformModule: boolean): UpgradeFunction;
+export declare type UpgradeFunction = (proxy: ContractAddressOrInstance, ImplFactory: ContractFactory, opts?: UpgradeProxyOptions) => Promise<Contract>;
+export declare function makeUpgradeProxy(hre: HardhatRuntimeEnvironment): UpgradeFunction;
 //# sourceMappingURL=upgrade-proxy.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts.map
index 0c8a491..444ad40 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"upgrade-proxy.d.ts","sourceRoot":"","sources":["../src/upgrade-proxy.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAU,eAAe,EAAE,QAAQ,EAAU,MAAM,QAAQ,CAAC;AAIxE,OAAO,EACL,mBAAmB,EAKnB,yBAAyB,EAC1B,MAAM,SAAS,CAAC;AAGjB,MAAM,MAAM,eAAe,GAAG,CAC5B,KAAK,EAAE,yBAAyB,EAChC,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,mBAAmB,KACvB,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvB,wBAAgB,gBAAgB,CAAC,GAAG,EAAE,yBAAyB,EAAE,cAAc,EAAE,OAAO,GAAG,eAAe,CA+CzG"}
\ No newline at end of file
+{"version":3,"file":"upgrade-proxy.d.ts","sourceRoot":"","sources":["../src/upgrade-proxy.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAU,eAAe,EAAE,QAAQ,EAAU,MAAM,QAAQ,CAAC;AAIxE,OAAO,EACL,mBAAmB,EAKnB,yBAAyB,EAC1B,MAAM,SAAS,CAAC;AAEjB,oBAAY,eAAe,GAAG,CAC5B,KAAK,EAAE,yBAAyB,EAChC,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,mBAAmB,KACvB,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvB,wBAAgB,gBAAgB,CAAC,GAAG,EAAE,yBAAyB,GAAG,eAAe,CA6ChF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js
index b5984ec..a580738 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js
@@ -3,10 +3,8 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.makeUpgradeProxy = void 0;
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
 const utils_1 = require("./utils");
-const utils_2 = require("./platform/utils");
-function makeUpgradeProxy(hre, platformModule) {
+function makeUpgradeProxy(hre) {
     return async function upgradeProxy(proxy, ImplFactory, opts = {}) {
-        (0, utils_2.disablePlatform)(hre, platformModule, opts, upgradeProxy.name);
         const proxyAddress = (0, utils_1.getContractAddress)(proxy);
         const { impl: nextImpl } = await (0, utils_1.deployProxyImpl)(hre, ImplFactory, opts, proxyAddress);
         // upgrade kind is inferred above
@@ -23,9 +21,9 @@ function makeUpgradeProxy(hre, platformModule) {
         const adminAddress = await (0, upgrades_core_1.getAdminAddress)(provider, proxyAddress);
         const adminBytecode = await (0, upgrades_core_1.getCode)(provider, adminAddress);
         if ((0, upgrades_core_1.isEmptySlot)(adminAddress) || adminBytecode === '0x') {
-            // No admin contract: use ITransparentUpgradeableProxyFactory to get proxiable interface
-            const ITransparentUpgradeableProxyFactory = await (0, utils_1.getITransparentUpgradeableProxyFactory)(hre, signer);
-            const proxy = ITransparentUpgradeableProxyFactory.attach(proxyAddress);
+            // No admin contract: use TransparentUpgradeableProxyFactory to get proxiable interface
+            const TransparentUpgradeableProxyFactory = await (0, utils_1.getTransparentUpgradeableProxyFactory)(hre, signer);
+            const proxy = TransparentUpgradeableProxyFactory.attach(proxyAddress);
             return (nextImpl, call) => (call ? proxy.upgradeToAndCall(nextImpl, call) : proxy.upgradeTo(nextImpl));
         }
         else {
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js.map
index d6bf9d4..e265f97 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/upgrade-proxy.js.map
@@ -1 +1 @@
-{"version":3,"file":"upgrade-proxy.js","sourceRoot":"","sources":["../src/upgrade-proxy.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"upgrade-proxy.js","sourceRoot":"","sources":["../src/upgrade-proxy.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.d.ts
deleted file mode 100644
index ec8c554..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import type { ContractFactory } from 'ethers';
-import { DeployTransaction, Platform } from '.';
-import { Deployment, RemoteDeploymentId, DeployOpts } from '@openzeppelin/upgrades-core';
-/**
- * Gets a contract instance from a deployment, where the deployment may be remote.
- * If the deployment is remote, the instance have an overriden `deployed` method to wait for the remote deployment
- * and update its `deployTransaction` with the new transaction hash if it was detected to have changed.
- *
- * @param hre The Hardhat Runtime Environment
- * @param contract The contract factory
- * @param opts The deploy and platform options
- * @param deployment The deployment
- * @param deployTransaction The transaction that deployed the contract, if available
- * @returns The contract instance
- */
-export declare function getContractInstance(hre: HardhatRuntimeEnvironment, contract: ContractFactory, opts: DeployOpts & Platform, deployment: Deployment & DeployTransaction & RemoteDeploymentId): import("ethers").Contract;
-//# sourceMappingURL=contract-instance.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.d.ts.map
deleted file mode 100644
index 754cbb9..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"contract-instance.d.ts","sourceRoot":"","sources":["../../src/utils/contract-instance.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAG9C,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,GAAG,CAAC;AAEhD,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAEzF;;;;;;;;;;;GAWG;AACH,wBAAgB,mBAAmB,CACjC,GAAG,EAAE,yBAAyB,EAC9B,QAAQ,EAAE,eAAe,EACzB,IAAI,EAAE,UAAU,GAAG,QAAQ,EAC3B,UAAU,EAAE,UAAU,GAAG,iBAAiB,GAAG,kBAAkB,6BAsBhE"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.js
deleted file mode 100644
index 51cebf9..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.js
+++ /dev/null
@@ -1,40 +0,0 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getContractInstance = void 0;
-const assert_1 = __importDefault(require("assert"));
-const utils_1 = require("../platform/utils");
-/**
- * Gets a contract instance from a deployment, where the deployment may be remote.
- * If the deployment is remote, the instance have an overriden `deployed` method to wait for the remote deployment
- * and update its `deployTransaction` with the new transaction hash if it was detected to have changed.
- *
- * @param hre The Hardhat Runtime Environment
- * @param contract The contract factory
- * @param opts The deploy and platform options
- * @param deployment The deployment
- * @param deployTransaction The transaction that deployed the contract, if available
- * @returns The contract instance
- */
-function getContractInstance(hre, contract, opts, deployment) {
-    const instance = contract.attach(deployment.address);
-    // @ts-ignore Won't be readonly because instance was created through attach.
-    instance.deployTransaction = deployment.deployTransaction;
-    if (opts.usePlatformDeploy && deployment.remoteDeploymentId !== undefined) {
-        const origDeployed = instance.deployed.bind(instance);
-        instance.deployed = async () => {
-            (0, assert_1.default)(deployment.remoteDeploymentId !== undefined);
-            const updatedTxHash = await (0, utils_1.waitForDeployment)(hre, opts, instance.address, deployment.remoteDeploymentId);
-            if (updatedTxHash !== undefined && updatedTxHash !== deployment.txHash) {
-                // @ts-ignore Won't be readonly because instance was created through attach.
-                instance.deployTransaction = await hre.ethers.provider.getTransaction(updatedTxHash);
-            }
-            return await origDeployed();
-        };
-    }
-    return instance;
-}
-exports.getContractInstance = getContractInstance;
-//# sourceMappingURL=contract-instance.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.js.map
deleted file mode 100644
index 8f3fde1..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-instance.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"contract-instance.js","sourceRoot":"","sources":["../../src/utils/contract-instance.ts"],"names":[],"mappings":";;;;;;AAEA,oDAA4B;AAG5B,6CAAsD;AAGtD;;;;;;;;;;;GAWG;AACH,SAAgB,mBAAmB,CACjC,GAA8B,EAC9B,QAAyB,EACzB,IAA2B,EAC3B,UAA+D;IAE/D,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAErD,4EAA4E;IAC5E,QAAQ,CAAC,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;IAE1D,IAAI,IAAI,CAAC,iBAAiB,IAAI,UAAU,CAAC,kBAAkB,KAAK,SAAS,EAAE;QACzE,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,QAAQ,CAAC,QAAQ,GAAG,KAAK,IAAI,EAAE;YAC7B,IAAA,gBAAM,EAAC,UAAU,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC;YACpD,MAAM,aAAa,GAAG,MAAM,IAAA,yBAAiB,EAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,UAAU,CAAC,kBAAkB,CAAC,CAAC;YAE1G,IAAI,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,UAAU,CAAC,MAAM,EAAE;gBACtE,4EAA4E;gBAC5E,QAAQ,CAAC,iBAAiB,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;aACtF;YAED,OAAO,MAAM,YAAY,EAAE,CAAC;QAC9B,CAAC,CAAC;KACH;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AA1BD,kDA0BC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts
index 3ebe136..58be371 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts
@@ -1,4 +1,4 @@
-export type ContractAddressOrInstance = string | {
+export declare type ContractAddressOrInstance = string | {
     address: string;
 };
 export declare function getContractAddress(addressOrInstance: ContractAddressOrInstance): string;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts.map
index 940414f..2ae21fe 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/contract-types.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"contract-types.d.ts","sourceRoot":"","sources":["../../src/utils/contract-types.ts"],"names":[],"mappings":"AAAA,MAAM,MAAM,yBAAyB,GAAG,MAAM,GAAG;IAAE,OAAO,EAAE,MAAM,CAAA;CAAE,CAAC;AAErE,wBAAgB,kBAAkB,CAAC,iBAAiB,EAAE,yBAAyB,GAAG,MAAM,CAMvF"}
\ No newline at end of file
+{"version":3,"file":"contract-types.d.ts","sourceRoot":"","sources":["../../src/utils/contract-types.ts"],"names":[],"mappings":"AAAA,oBAAY,yBAAyB,GAAG,MAAM,GAAG;IAAE,OAAO,EAAE,MAAM,CAAA;CAAE,CAAC;AAErE,wBAAgB,kBAAkB,CAAC,iBAAiB,EAAE,yBAAyB,GAAG,MAAM,CAMvF"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts
index cfd2529..13da8e8 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts
@@ -2,12 +2,14 @@ import { StorageLayout, ValidationDataCurrent, ValidationOptions, Version } from
 import type { ContractFactory, ethers } from 'ethers';
 import type { EthereumProvider, HardhatRuntimeEnvironment } from 'hardhat/types';
 import { StandaloneOptions, UpgradeOptions } from './options';
-export interface DeployedImpl {
+interface DeployedProxyImpl {
     impl: string;
+    kind: NonNullable<ValidationOptions['kind']>;
     txResponse?: ethers.providers.TransactionResponse;
 }
-export interface DeployedProxyImpl extends DeployedImpl {
-    kind: NonNullable<ValidationOptions['kind']>;
+interface DeployedBeaconImpl {
+    impl: string;
+    txResponse?: ethers.providers.TransactionResponse;
 }
 export interface DeployData {
     provider: EthereumProvider;
@@ -19,7 +21,8 @@ export interface DeployData {
     fullOpts: Required<UpgradeOptions>;
 }
 export declare function getDeployData(hre: HardhatRuntimeEnvironment, ImplFactory: ContractFactory, opts: UpgradeOptions): Promise<DeployData>;
-export declare function deployUpgradeableImpl(hre: HardhatRuntimeEnvironment, ImplFactory: ContractFactory, opts: StandaloneOptions, currentImplAddress?: string): Promise<DeployedImpl>;
+export declare function deployStandaloneImpl(hre: HardhatRuntimeEnvironment, ImplFactory: ContractFactory, opts: StandaloneOptions): Promise<DeployedProxyImpl>;
 export declare function deployProxyImpl(hre: HardhatRuntimeEnvironment, ImplFactory: ContractFactory, opts: UpgradeOptions, proxyAddress?: string): Promise<DeployedProxyImpl>;
-export declare function deployBeaconImpl(hre: HardhatRuntimeEnvironment, ImplFactory: ContractFactory, opts: UpgradeOptions, beaconAddress?: string): Promise<DeployedImpl>;
+export declare function deployBeaconImpl(hre: HardhatRuntimeEnvironment, ImplFactory: ContractFactory, opts: UpgradeOptions, beaconAddress?: string): Promise<DeployedBeaconImpl>;
+export {};
 //# sourceMappingURL=deploy-impl.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts.map
index af0ae9e..e8f17ad 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-impl.d.ts","sourceRoot":"","sources":["../../src/utils/deploy-impl.ts"],"names":[],"mappings":"AAAA,OAAO,EAKL,aAAa,EAEb,qBAAqB,EACrB,iBAAiB,EACjB,OAAO,EACR,MAAM,6BAA6B,CAAC;AACrC,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEtD,OAAO,KAAK,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAEjF,OAAO,EAAwC,iBAAiB,EAAE,cAAc,EAAgB,MAAM,WAAW,CAAC;AAKlH,MAAM,WAAW,YAAY;IAC3B,IAAI,EAAE,MAAM,CAAC;IACb,UAAU,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;CACnD;AAED,MAAM,WAAW,iBAAkB,SAAQ,YAAY;IACrD,IAAI,EAAE,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;CAC9C;AAED,MAAM,WAAW,UAAU;IACzB,QAAQ,EAAE,gBAAgB,CAAC;IAC3B,WAAW,EAAE,qBAAqB,CAAC;IACnC,gBAAgB,EAAE,MAAM,CAAC;IACzB,WAAW,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,OAAO,CAAC;IACjB,MAAM,EAAE,aAAa,CAAC;IACtB,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC;CACpC;AAED,wBAAsB,aAAa,CACjC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,cAAc,GACnB,OAAO,CAAC,UAAU,CAAC,CASrB;AAED,wBAAsB,qBAAqB,CACzC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,iBAAiB,EACvB,kBAAkB,CAAC,EAAE,MAAM,GAC1B,OAAO,CAAC,YAAY,CAAC,CAIvB;AAED,wBAAsB,eAAe,CACnC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,cAAc,EACpB,YAAY,CAAC,EAAE,MAAM,GACpB,OAAO,CAAC,iBAAiB,CAAC,CAU5B;AAED,wBAAsB,gBAAgB,CACpC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,cAAc,EACpB,aAAa,CAAC,EAAE,MAAM,GACrB,OAAO,CAAC,YAAY,CAAC,CAIvB"}
\ No newline at end of file
+{"version":3,"file":"deploy-impl.d.ts","sourceRoot":"","sources":["../../src/utils/deploy-impl.ts"],"names":[],"mappings":"AAAA,OAAO,EAKL,aAAa,EAEb,qBAAqB,EACrB,iBAAiB,EACjB,OAAO,EACR,MAAM,6BAA6B,CAAC;AACrC,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEtD,OAAO,KAAK,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAEjF,OAAO,EAAiB,iBAAiB,EAAE,cAAc,EAAgB,MAAM,WAAW,CAAC;AAI3F,UAAU,iBAAiB;IACzB,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7C,UAAU,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;CACnD;AAED,UAAU,kBAAkB;IAC1B,IAAI,EAAE,MAAM,CAAC;IACb,UAAU,CAAC,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;CACnD;AAED,MAAM,WAAW,UAAU;IACzB,QAAQ,EAAE,gBAAgB,CAAC;IAC3B,WAAW,EAAE,qBAAqB,CAAC;IACnC,gBAAgB,EAAE,MAAM,CAAC;IACzB,WAAW,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,OAAO,CAAC;IACjB,MAAM,EAAE,aAAa,CAAC;IACtB,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC;CACpC;AAED,wBAAsB,aAAa,CACjC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,cAAc,GACnB,OAAO,CAAC,UAAU,CAAC,CASrB;AAED,wBAAsB,oBAAoB,CACxC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,iBAAiB,GACtB,OAAO,CAAC,iBAAiB,CAAC,CAI5B;AAED,wBAAsB,eAAe,CACnC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,cAAc,EACpB,YAAY,CAAC,EAAE,MAAM,GACpB,OAAO,CAAC,iBAAiB,CAAC,CAI5B;AAED,wBAAsB,gBAAgB,CACpC,GAAG,EAAE,yBAAyB,EAC9B,WAAW,EAAE,eAAe,EAC5B,IAAI,EAAE,cAAc,EACpB,aAAa,CAAC,EAAE,MAAM,GACrB,OAAO,CAAC,kBAAkB,CAAC,CAI7B"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js
index e1cd7bd..910f768 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js
@@ -1,11 +1,10 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.deployBeaconImpl = exports.deployProxyImpl = exports.deployUpgradeableImpl = exports.getDeployData = void 0;
+exports.deployBeaconImpl = exports.deployProxyImpl = exports.deployStandaloneImpl = exports.getDeployData = void 0;
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
 const utils_1 = require("ethers/lib/utils");
 const deploy_1 = require("./deploy");
 const options_1 = require("./options");
-const utils_2 = require("../platform/utils");
 const validate_impl_1 = require("./validate-impl");
 const validations_1 = require("./validations");
 async function getDeployData(hre, ImplFactory, opts) {
@@ -19,22 +18,16 @@ async function getDeployData(hre, ImplFactory, opts) {
     return { provider, validations, unlinkedBytecode, encodedArgs, version, layout, fullOpts };
 }
 exports.getDeployData = getDeployData;
-async function deployUpgradeableImpl(hre, ImplFactory, opts, currentImplAddress) {
+async function deployStandaloneImpl(hre, ImplFactory, opts) {
     const deployData = await getDeployData(hre, ImplFactory, opts);
-    await (0, validate_impl_1.validateImpl)(deployData, opts, currentImplAddress);
+    await (0, validate_impl_1.validateImpl)(deployData, opts);
     return await deployImpl(hre, deployData, ImplFactory, opts);
 }
-exports.deployUpgradeableImpl = deployUpgradeableImpl;
+exports.deployStandaloneImpl = deployStandaloneImpl;
 async function deployProxyImpl(hre, ImplFactory, opts, proxyAddress) {
     const deployData = await getDeployData(hre, ImplFactory, opts);
     await (0, validate_impl_1.validateProxyImpl)(deployData, opts, proxyAddress);
-    if (opts.kind === undefined) {
-        throw new Error('Broken invariant: Proxy kind is undefined');
-    }
-    return {
-        ...(await deployImpl(hre, deployData, ImplFactory, opts)),
-        kind: opts.kind,
-    };
+    return await deployImpl(hre, deployData, ImplFactory, opts);
 }
 exports.deployProxyImpl = deployProxyImpl;
 async function deployBeaconImpl(hre, ImplFactory, opts, beaconAddress) {
@@ -45,39 +38,28 @@ async function deployBeaconImpl(hre, ImplFactory, opts, beaconAddress) {
 exports.deployBeaconImpl = deployBeaconImpl;
 async function deployImpl(hre, deployData, ImplFactory, opts) {
     const layout = deployData.layout;
-    if (opts.useDeployedImplementation && opts.redeployImplementation !== undefined) {
-        throw new upgrades_core_1.UpgradesError('The useDeployedImplementation and redeployImplementation options cannot both be set at the same time');
-    }
-    const merge = deployData.fullOpts.redeployImplementation === 'always';
     const deployment = await (0, upgrades_core_1.fetchOrDeployGetDeployment)(deployData.version, deployData.provider, async () => {
         const abi = ImplFactory.interface.format(utils_1.FormatTypes.minimal);
         const attemptDeploy = () => {
-            if (deployData.fullOpts.useDeployedImplementation || deployData.fullOpts.redeployImplementation === 'never') {
-                throw new upgrades_core_1.UpgradesError('The implementation contract was not previously deployed.', () => {
-                    if (deployData.fullOpts.useDeployedImplementation) {
-                        return 'The useDeployedImplementation option was set to true but the implementation contract was not previously deployed on this network.';
-                    }
-                    else {
-                        return "The redeployImplementation option was set to 'never' but the implementation contract was not previously deployed on this network.";
-                    }
-                });
+            if (opts.useDeployedImplementation) {
+                throw new upgrades_core_1.UpgradesError('The implementation contract was not previously deployed.', () => 'The useDeployedImplementation option was set to true but the implementation contract was not previously deployed on this network.');
             }
             else {
-                return (0, deploy_1.deploy)(hre, opts, ImplFactory, ...deployData.fullOpts.constructorArgs);
+                return (0, deploy_1.deploy)(ImplFactory, ...deployData.fullOpts.constructorArgs);
             }
         };
         const deployment = Object.assign({ abi }, await attemptDeploy());
         return { ...deployment, layout };
-    }, opts, merge, remoteDeploymentId => (0, utils_2.getRemoteDeployment)(hre, remoteDeploymentId));
+    }, opts);
     let txResponse;
     if (opts.getTxResponse) {
         if ('deployTransaction' in deployment) {
             txResponse = deployment.deployTransaction;
         }
         else if (deployment.txHash !== undefined) {
-            txResponse = await hre.ethers.provider.getTransaction(deployment.txHash);
+            txResponse = hre.ethers.provider.getTransaction(deployment.txHash);
         }
     }
-    return { impl: deployment.address, txResponse };
+    return { impl: deployment.address, kind: opts.kind, txResponse };
 }
 //# sourceMappingURL=deploy-impl.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js.map
index 073f016..e01457d 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy-impl.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy-impl.js","sourceRoot":"","sources":["../../src/utils/deploy-impl.ts"],"names":[],"mappings":";;;AAAA,+DAUqC;AAErC,4CAA+C;AAE/C,qCAAkC;AAClC,uCAAkH;AAClH,6CAAwD;AACxD,mDAAsF;AACtF,+CAAgD;AAqBzC,KAAK,UAAU,aAAa,CACjC,GAA8B,EAC9B,WAA4B,EAC5B,IAAoB;IAEpB,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;IACjC,MAAM,WAAW,GAAG,MAAM,IAAA,6BAAe,EAAC,GAAG,CAAC,CAAC;IAC/C,MAAM,gBAAgB,GAAG,IAAA,mCAAmB,EAAC,WAAW,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;IAChF,MAAM,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC7E,MAAM,OAAO,GAAG,IAAA,0BAAU,EAAC,gBAAgB,EAAE,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAChF,MAAM,MAAM,GAAG,IAAA,gCAAgB,EAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;IACpC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;AAC7F,CAAC;AAbD,sCAaC;AAEM,KAAK,UAAU,qBAAqB,CACzC,GAA8B,EAC9B,WAA4B,EAC5B,IAAuB,EACvB,kBAA2B;IAE3B,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/D,MAAM,IAAA,4BAAY,EAAC,UAAU,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;IACzD,OAAO,MAAM,UAAU,CAAC,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AAC9D,CAAC;AATD,sDASC;AAEM,KAAK,UAAU,eAAe,CACnC,GAA8B,EAC9B,WAA4B,EAC5B,IAAoB,EACpB,YAAqB;IAErB,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/D,MAAM,IAAA,iCAAiB,EAAC,UAAU,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;IACxD,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;IACD,OAAO;QACL,GAAG,CAAC,MAAM,UAAU,CAAC,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,EAAE,IAAI,CAAC,IAAI;KAChB,CAAC;AACJ,CAAC;AAfD,0CAeC;AAEM,KAAK,UAAU,gBAAgB,CACpC,GAA8B,EAC9B,WAA4B,EAC5B,IAAoB,EACpB,aAAsB;IAEtB,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/D,MAAM,IAAA,kCAAkB,EAAC,UAAU,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;IAC1D,OAAO,MAAM,UAAU,CAAC,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AAC9D,CAAC;AATD,4CASC;AAED,KAAK,UAAU,UAAU,CACvB,GAA8B,EAC9B,UAAsB,EACtB,WAA4B,EAC5B,IAA4D;IAE5D,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAEjC,IAAI,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,sBAAsB,KAAK,SAAS,EAAE;QAC/E,MAAM,IAAI,6BAAa,CACrB,sGAAsG,CACvG,CAAC;KACH;IAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,sBAAsB,KAAK,QAAQ,CAAC;IAEtE,MAAM,UAAU,GAAG,MAAM,IAAA,0CAA0B,EACjD,UAAU,CAAC,OAAO,EAClB,UAAU,CAAC,QAAQ,EACnB,KAAK,IAAI,EAAE;QACT,MAAM,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAW,CAAC,OAAO,CAAa,CAAC;QAC1E,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,IAAI,UAAU,CAAC,QAAQ,CAAC,yBAAyB,IAAI,UAAU,CAAC,QAAQ,CAAC,sBAAsB,KAAK,OAAO,EAAE;gBAC3G,MAAM,IAAI,6BAAa,CAAC,0DAA0D,EAAE,GAAG,EAAE;oBACvF,IAAI,UAAU,CAAC,QAAQ,CAAC,yBAAyB,EAAE;wBACjD,OAAO,mIAAmI,CAAC;qBAC5I;yBAAM;wBACL,OAAO,mIAAmI,CAAC;qBAC5I;gBACH,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,IAAA,eAAM,EAAC,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;aAC/E;QACH,CAAC,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,aAAa,EAAE,CAAC,CAAC;QACjE,OAAO,EAAE,GAAG,UAAU,EAAE,MAAM,EAAE,CAAC;IACnC,CAAC,EACD,IAAI,EACJ,KAAK,EACL,kBAAkB,CAAC,EAAE,CAAC,IAAA,2BAAmB,EAAC,GAAG,EAAE,kBAAkB,CAAC,CACnE,CAAC;IAEF,IAAI,UAAU,CAAC;IACf,IAAI,IAAI,CAAC,aAAa,EAAE;QACtB,IAAI,mBAAmB,IAAI,UAAU,EAAE;YACrC,UAAU,GAAG,UAAU,CAAC,iBAAiB,CAAC;SAC3C;aAAM,IAAI,UAAU,CAAC,MAAM,KAAK,SAAS,EAAE;YAC1C,UAAU,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SAC1E;KACF;IAED,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;AAClD,CAAC"}
\ No newline at end of file
+{"version":3,"file":"deploy-impl.js","sourceRoot":"","sources":["../../src/utils/deploy-impl.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts
index 3019ff2..989248a 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts
@@ -1,9 +1,7 @@
-import type { Deployment, RemoteDeploymentId } from '@openzeppelin/upgrades-core';
+import type { Deployment } from '@openzeppelin/upgrades-core';
 import type { ethers, ContractFactory } from 'ethers';
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { PlatformDeployOptions, UpgradeOptions } from './options';
 export interface DeployTransaction {
     deployTransaction: ethers.providers.TransactionResponse;
 }
-export declare function deploy(hre: HardhatRuntimeEnvironment, opts: UpgradeOptions & PlatformDeployOptions, factory: ContractFactory, ...args: unknown[]): Promise<Required<Deployment & DeployTransaction> & RemoteDeploymentId>;
+export declare function deploy(factory: ContractFactory, ...args: unknown[]): Promise<Required<Deployment & DeployTransaction>>;
 //# sourceMappingURL=deploy.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts.map
index b5702c3..6281d16 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deploy.d.ts","sourceRoot":"","sources":["../../src/utils/deploy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAElF,OAAO,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAEtD,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAE1D,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;AAElE,MAAM,WAAW,iBAAiB;IAChC,iBAAiB,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;CACzD;AAED,wBAAsB,MAAM,CAC1B,GAAG,EAAE,yBAAyB,EAC9B,IAAI,EAAE,cAAc,GAAG,qBAAqB,EAC5C,OAAO,EAAE,eAAe,EACxB,GAAG,IAAI,EAAE,OAAO,EAAE,GACjB,OAAO,CAAC,QAAQ,CAAC,UAAU,GAAG,iBAAiB,CAAC,GAAG,kBAAkB,CAAC,CAMxE"}
\ No newline at end of file
+{"version":3,"file":"deploy.d.ts","sourceRoot":"","sources":["../../src/utils/deploy.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAE9D,OAAO,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAGtD,MAAM,WAAW,iBAAiB;IAChC,iBAAiB,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;CACzD;AAED,wBAAsB,MAAM,CAC1B,OAAO,EAAE,eAAe,EACxB,GAAG,IAAI,EAAE,OAAO,EAAE,GACjB,OAAO,CAAC,QAAQ,CAAC,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAgBnD"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js
index 2489b97..e31734f 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js
@@ -6,17 +6,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.deploy = void 0;
 const debug_1 = __importDefault(require("./debug"));
 const utils_1 = require("ethers/lib/utils");
-const deploy_1 = require("../platform/deploy");
-async function deploy(hre, opts, factory, ...args) {
-    if (opts?.usePlatformDeploy) {
-        return await (0, deploy_1.platformDeploy)(hre, factory, opts, ...args);
-    }
-    else {
-        return await ethersDeploy(factory, ...args);
-    }
-}
-exports.deploy = deploy;
-async function ethersDeploy(factory, ...args) {
+async function deploy(factory, ...args) {
     const contractInstance = await factory.deploy(...args);
     const { deployTransaction } = contractInstance;
     const address = (0, utils_1.getContractAddress)({
@@ -29,4 +19,5 @@ async function ethersDeploy(factory, ...args) {
     const txHash = deployTransaction.hash;
     return { address, txHash, deployTransaction };
 }
+exports.deploy = deploy;
 //# sourceMappingURL=deploy.js.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js.map
index d8e25f9..6fb8d6a 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/deploy.js.map
@@ -1 +1 @@
-{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../src/utils/deploy.ts"],"names":[],"mappings":";;;;;;AACA,oDAA4B;AAE5B,4CAAsD;AAEtD,+CAAoD;AAO7C,KAAK,UAAU,MAAM,CAC1B,GAA8B,EAC9B,IAA4C,EAC5C,OAAwB,EACxB,GAAG,IAAe;IAElB,IAAI,IAAI,EAAE,iBAAiB,EAAE;QAC3B,OAAO,MAAM,IAAA,uBAAc,EAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;KAC1D;SAAM;QACL,OAAO,MAAM,YAAY,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;KAC7C;AACH,CAAC;AAXD,wBAWC;AAED,KAAK,UAAU,YAAY,CAAC,OAAwB,EAAE,GAAG,IAAe;IACtE,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;IACvD,MAAM,EAAE,iBAAiB,EAAE,GAAG,gBAAgB,CAAC;IAE/C,MAAM,OAAO,GAAW,IAAA,0BAAkB,EAAC;QACzC,IAAI,EAAE,MAAM,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE;QACvC,KAAK,EAAE,iBAAiB,CAAC,KAAK;KAC/B,CAAC,CAAC;IACH,IAAI,OAAO,KAAK,gBAAgB,CAAC,OAAO,EAAE;QACxC,IAAA,eAAK,EACH,oCAAoC,gBAAgB,CAAC,OAAO,OAAO,OAAO,cAAc,iBAAiB,CAAC,KAAK,EAAE,CAClH,CAAC;KACH;IAED,MAAM,MAAM,GAAG,iBAAiB,CAAC,IAAI,CAAC;IACtC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC;AAChD,CAAC"}
\ No newline at end of file
+{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../src/utils/deploy.ts"],"names":[],"mappings":";;;;;;AACA,oDAA4B;AAE5B,4CAAsD;AAM/C,KAAK,UAAU,MAAM,CAC1B,OAAwB,EACxB,GAAG,IAAe;IAElB,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;IACvD,MAAM,EAAE,iBAAiB,EAAE,GAAG,gBAAgB,CAAC;IAE/C,MAAM,OAAO,GAAW,IAAA,0BAAkB,EAAC;QACzC,IAAI,EAAE,MAAM,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE;QACvC,KAAK,EAAE,iBAAiB,CAAC,KAAK;KAC/B,CAAC,CAAC;IACH,IAAI,OAAO,KAAK,gBAAgB,CAAC,OAAO,EAAE;QACxC,IAAA,eAAK,EACH,oCAAoC,gBAAgB,CAAC,OAAO,OAAO,OAAO,cAAc,iBAAiB,CAAC,KAAK,EAAE,CAClH,CAAC;KACH;IAED,MAAM,MAAM,GAAG,iBAAiB,CAAC,IAAI,CAAC;IACtC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC;AAChD,CAAC;AAnBD,wBAmBC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts
index e36ed40..b324d38 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts
@@ -2,7 +2,6 @@ import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import { Signer, ContractFactory } from 'ethers';
 export declare function getProxyFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory>;
 export declare function getTransparentUpgradeableProxyFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory>;
-export declare function getITransparentUpgradeableProxyFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory>;
 export declare function getProxyAdminFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory>;
 export declare function getBeaconProxyFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory>;
 export declare function getUpgradeableBeaconFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory>;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts.map
index 2c28892..0a39b48 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"factories.d.ts","sourceRoot":"","sources":["../../src/utils/factories.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAQjD,wBAAsB,eAAe,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAE/G;AAED,wBAAsB,qCAAqC,CACzD,GAAG,EAAE,yBAAyB,EAC9B,MAAM,CAAC,EAAE,MAAM,GACd,OAAO,CAAC,eAAe,CAAC,CAE1B;AAED,wBAAsB,sCAAsC,CAC1D,GAAG,EAAE,yBAAyB,EAC9B,MAAM,CAAC,EAAE,MAAM,GACd,OAAO,CAAC,eAAe,CAAC,CAE1B;AAED,wBAAsB,oBAAoB,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAEpH;AAED,wBAAsB,qBAAqB,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAErH;AAED,wBAAsB,2BAA2B,CAC/C,GAAG,EAAE,yBAAyB,EAC9B,MAAM,CAAC,EAAE,MAAM,GACd,OAAO,CAAC,eAAe,CAAC,CAE1B"}
\ No newline at end of file
+{"version":3,"file":"factories.d.ts","sourceRoot":"","sources":["../../src/utils/factories.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAOjD,wBAAsB,eAAe,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAE/G;AAED,wBAAsB,qCAAqC,CACzD,GAAG,EAAE,yBAAyB,EAC9B,MAAM,CAAC,EAAE,MAAM,GACd,OAAO,CAAC,eAAe,CAAC,CAE1B;AAED,wBAAsB,oBAAoB,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAEpH;AAED,wBAAsB,qBAAqB,CAAC,GAAG,EAAE,yBAAyB,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAErH;AAED,wBAAsB,2BAA2B,CAC/C,GAAG,EAAE,yBAAyB,EAC9B,MAAM,CAAC,EAAE,MAAM,GACd,OAAO,CAAC,eAAe,CAAC,CAE1B"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js
index f4c4428..85bc3b2 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js
@@ -3,12 +3,11 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getUpgradeableBeaconFactory = exports.getBeaconProxyFactory = exports.getProxyAdminFactory = exports.getITransparentUpgradeableProxyFactory = exports.getTransparentUpgradeableProxyFactory = exports.getProxyFactory = void 0;
+exports.getUpgradeableBeaconFactory = exports.getBeaconProxyFactory = exports.getProxyAdminFactory = exports.getTransparentUpgradeableProxyFactory = exports.getProxyFactory = void 0;
 const ERC1967Proxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol/ERC1967Proxy.json"));
 const BeaconProxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol/BeaconProxy.json"));
 const UpgradeableBeacon_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol/UpgradeableBeacon.json"));
 const TransparentUpgradeableProxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy.json"));
-const ITransparentUpgradeableProxy_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/ITransparentUpgradeableProxy.json"));
 const ProxyAdmin_json_1 = __importDefault(require("@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol/ProxyAdmin.json"));
 async function getProxyFactory(hre, signer) {
     return hre.ethers.getContractFactory(ERC1967Proxy_json_1.default.abi, ERC1967Proxy_json_1.default.bytecode, signer);
@@ -18,10 +17,6 @@ async function getTransparentUpgradeableProxyFactory(hre, signer) {
     return hre.ethers.getContractFactory(TransparentUpgradeableProxy_json_1.default.abi, TransparentUpgradeableProxy_json_1.default.bytecode, signer);
 }
 exports.getTransparentUpgradeableProxyFactory = getTransparentUpgradeableProxyFactory;
-async function getITransparentUpgradeableProxyFactory(hre, signer) {
-    return hre.ethers.getContractFactory(ITransparentUpgradeableProxy_json_1.default.abi, ITransparentUpgradeableProxy_json_1.default.bytecode, signer);
-}
-exports.getITransparentUpgradeableProxyFactory = getITransparentUpgradeableProxyFactory;
 async function getProxyAdminFactory(hre, signer) {
     return hre.ethers.getContractFactory(ProxyAdmin_json_1.default.abi, ProxyAdmin_json_1.default.bytecode, signer);
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js.map
index cf0fa1f..4b39103 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/factories.js.map
@@ -1 +1 @@
-{"version":3,"file":"factories.js","sourceRoot":"","sources":["../../src/utils/factories.ts"],"names":[],"mappings":";;;;;;AAEA,uKAA0I;AAC1I,mKAAsI;AACtI,qLAAwJ;AACxJ,wNAA2L;AAC3L,0NAA6L;AAC7L,qKAAwI;AAEjI,KAAK,UAAU,eAAe,CAAC,GAA8B,EAAE,MAAe;IACnF,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,2BAAY,CAAC,GAAG,EAAE,2BAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACxF,CAAC;AAFD,0CAEC;AAEM,KAAK,UAAU,qCAAqC,CACzD,GAA8B,EAC9B,MAAe;IAEf,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,0CAA2B,CAAC,GAAG,EAAE,0CAA2B,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACtH,CAAC;AALD,sFAKC;AAEM,KAAK,UAAU,sCAAsC,CAC1D,GAA8B,EAC9B,MAAe;IAEf,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,2CAA4B,CAAC,GAAG,EAAE,2CAA4B,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACxH,CAAC;AALD,wFAKC;AAEM,KAAK,UAAU,oBAAoB,CAAC,GAA8B,EAAE,MAAe;IACxF,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,yBAAU,CAAC,GAAG,EAAE,yBAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACpF,CAAC;AAFD,oDAEC;AAEM,KAAK,UAAU,qBAAqB,CAAC,GAA8B,EAAE,MAAe;IACzF,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,0BAAW,CAAC,GAAG,EAAE,0BAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACtF,CAAC;AAFD,sDAEC;AAEM,KAAK,UAAU,2BAA2B,CAC/C,GAA8B,EAC9B,MAAe;IAEf,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,gCAAiB,CAAC,GAAG,EAAE,gCAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAClG,CAAC;AALD,kEAKC"}
\ No newline at end of file
+{"version":3,"file":"factories.js","sourceRoot":"","sources":["../../src/utils/factories.ts"],"names":[],"mappings":";;;;;;AAEA,uKAA0I;AAC1I,mKAAsI;AACtI,qLAAwJ;AACxJ,wNAA2L;AAC3L,qKAAwI;AAEjI,KAAK,UAAU,eAAe,CAAC,GAA8B,EAAE,MAAe;IACnF,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,2BAAY,CAAC,GAAG,EAAE,2BAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACxF,CAAC;AAFD,0CAEC;AAEM,KAAK,UAAU,qCAAqC,CACzD,GAA8B,EAC9B,MAAe;IAEf,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,0CAA2B,CAAC,GAAG,EAAE,0CAA2B,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACtH,CAAC;AALD,sFAKC;AAEM,KAAK,UAAU,oBAAoB,CAAC,GAA8B,EAAE,MAAe;IACxF,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,yBAAU,CAAC,GAAG,EAAE,yBAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACpF,CAAC;AAFD,oDAEC;AAEM,KAAK,UAAU,qBAAqB,CAAC,GAA8B,EAAE,MAAe;IACzF,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,0BAAW,CAAC,GAAG,EAAE,0BAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACtF,CAAC;AAFD,sDAEC;AAEM,KAAK,UAAU,2BAA2B,CAC/C,GAA8B,EAC9B,MAAe;IAEf,OAAO,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,gCAAiB,CAAC,GAAG,EAAE,gCAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAClG,CAAC;AALD,kEAKC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts
index c9bbda9..4753ded 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts
@@ -1,8 +1,8 @@
 import type { SolcOutput } from '@openzeppelin/upgrades-core';
-type RecursivePartial<T> = {
+declare type RecursivePartial<T> = {
     [k in keyof T]?: RecursivePartial<T[k]>;
 };
-type MaybeSolcOutput = RecursivePartial<SolcOutput>;
+declare type MaybeSolcOutput = RecursivePartial<SolcOutput>;
 export declare function isFullSolcOutput(output: MaybeSolcOutput | undefined): boolean;
 export {};
 //# sourceMappingURL=is-full-solc-output.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts.map
index cbb3653..b027316 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/is-full-solc-output.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"is-full-solc-output.d.ts","sourceRoot":"","sources":["../../src/utils/is-full-solc-output.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAE9D,KAAK,gBAAgB,CAAC,CAAC,IAAI;KAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAAE,CAAC;AAEvE,KAAK,eAAe,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAEpD,wBAAgB,gBAAgB,CAAC,MAAM,EAAE,eAAe,GAAG,SAAS,GAAG,OAAO,CAuB7E"}
\ No newline at end of file
+{"version":3,"file":"is-full-solc-output.d.ts","sourceRoot":"","sources":["../../src/utils/is-full-solc-output.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAE9D,aAAK,gBAAgB,CAAC,CAAC,IAAI;KAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAAE,CAAC;AAEvE,aAAK,eAAe,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;AAEpD,wBAAgB,gBAAgB,CAAC,MAAM,EAAE,eAAe,GAAG,SAAS,GAAG,OAAO,CAuB7E"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts
index 3843aef..c0ce154 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts
@@ -1,61 +1,31 @@
 import { DeployOpts, ProxyKindOption, StandaloneValidationOptions, ValidationOptions } from '@openzeppelin/upgrades-core';
-/**
- * Options for functions that can deploy an implementation contract.
- */
-export type StandaloneOptions = StandaloneValidationOptions & DeployOpts & {
+export declare type StandaloneOptions = StandaloneValidationOptions & DeployOpts & {
     constructorArgs?: unknown[];
-    /**
-     * @deprecated Use `redeployImplementation = 'never'` instead.
-     */
     useDeployedImplementation?: boolean;
-    redeployImplementation?: 'always' | 'never' | 'onchange';
 };
-/**
- * Options for functions that can deploy a new version of an implementation contract for upgrading.
- */
-export type UpgradeOptions = ValidationOptions & StandaloneOptions;
+export declare type UpgradeOptions = ValidationOptions & StandaloneOptions;
 export declare function withDefaults(opts?: UpgradeOptions): Required<UpgradeOptions>;
-/**
- * Option for functions that support getting a transaction response.
- */
-export type GetTxResponse = {
+export declare type GetTxResponse = {
     getTxResponse?: boolean;
 };
-type Initializer = {
+declare type Initializer = {
     initializer?: string | false;
 };
-/**
- * Option to enable or disable Platform deployments.
- */
-export type Platform = {
-    usePlatformDeploy?: boolean;
-};
-/**
- * Options for functions that support Platform deployments.
- */
-export type PlatformDeployOptions = Platform & {
-    verifySourceCode?: boolean;
-    relayerId?: string;
-    salt?: string;
-};
-export type DeployBeaconProxyOptions = DeployOpts & ProxyKindOption & Initializer & PlatformDeployOptions;
-export type DeployBeaconOptions = StandaloneOptions & Platform;
-export type DeployImplementationOptions = StandaloneOptions & GetTxResponse & PlatformDeployOptions;
-export type DeployContractOptions = StandaloneOptions & GetTxResponse & PlatformDeployOptions & {
-    unsafeAllowDeployContract?: boolean;
-};
-export type DeployProxyAdminOptions = DeployOpts & Platform;
-export type DeployProxyOptions = StandaloneOptions & Initializer & PlatformDeployOptions;
-export type ForceImportOptions = ProxyKindOption;
-export type PrepareUpgradeOptions = UpgradeOptions & GetTxResponse & PlatformDeployOptions;
-export type UpgradeBeaconOptions = UpgradeOptions & Platform;
-export type UpgradeProxyOptions = UpgradeOptions & {
+export declare type DeployBeaconProxyOptions = ProxyKindOption & Initializer;
+export declare type DeployBeaconOptions = StandaloneOptions;
+export declare type DeployImplementationOptions = StandaloneOptions & GetTxResponse;
+export declare type DeployProxyAdminOptions = DeployOpts;
+export declare type DeployProxyOptions = StandaloneOptions & Initializer;
+export declare type ForceImportOptions = ProxyKindOption;
+export declare type PrepareUpgradeOptions = UpgradeOptions & GetTxResponse;
+export declare type UpgradeBeaconOptions = UpgradeOptions;
+export declare type UpgradeProxyOptions = UpgradeOptions & {
     call?: {
         fn: string;
         args?: unknown[];
     } | string;
-} & Platform;
-export type ValidateImplementationOptions = StandaloneValidationOptions;
-export type ValidateUpgradeOptions = ValidationOptions;
+};
+export declare type ValidateImplementationOptions = StandaloneValidationOptions;
+export declare type ValidateUpgradeOptions = ValidationOptions;
 export {};
 //# sourceMappingURL=options.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts.map
index fd38d45..639b944 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"options.d.ts","sourceRoot":"","sources":["../../src/utils/options.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACV,eAAe,EACf,2BAA2B,EAC3B,iBAAiB,EAElB,MAAM,6BAA6B,CAAC;AAErC;;GAEG;AACH,MAAM,MAAM,iBAAiB,GAAG,2BAA2B,GACzD,UAAU,GAAG;IACX,eAAe,CAAC,EAAE,OAAO,EAAE,CAAC;IAC5B;;OAEG;IACH,yBAAyB,CAAC,EAAE,OAAO,CAAC;IACpC,sBAAsB,CAAC,EAAE,QAAQ,GAAG,OAAO,GAAG,UAAU,CAAC;CAC1D,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,cAAc,GAAG,iBAAiB,GAAG,iBAAiB,CAAC;AAEnE,wBAAgB,YAAY,CAAC,IAAI,GAAE,cAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,CAShF;AAED;;GAEG;AACH,MAAM,MAAM,aAAa,GAAG;IAC1B,aAAa,CAAC,EAAE,OAAO,CAAC;CACzB,CAAC;AAEF,KAAK,WAAW,GAAG;IACjB,WAAW,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC;CAC9B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,QAAQ,GAAG;IACrB,iBAAiB,CAAC,EAAE,OAAO,CAAC;CAC7B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,qBAAqB,GAAG,QAAQ,GAAG;IAC7C,gBAAgB,CAAC,EAAE,OAAO,CAAC;IAC3B,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,IAAI,CAAC,EAAE,MAAM,CAAC;CACf,CAAC;AAEF,MAAM,MAAM,wBAAwB,GAAG,UAAU,GAAG,eAAe,GAAG,WAAW,GAAG,qBAAqB,CAAC;AAC1G,MAAM,MAAM,mBAAmB,GAAG,iBAAiB,GAAG,QAAQ,CAAC;AAC/D,MAAM,MAAM,2BAA2B,GAAG,iBAAiB,GAAG,aAAa,GAAG,qBAAqB,CAAC;AACpG,MAAM,MAAM,qBAAqB,GAAG,iBAAiB,GACnD,aAAa,GACb,qBAAqB,GAAG;IACtB,yBAAyB,CAAC,EAAE,OAAO,CAAC;CACrC,CAAC;AACJ,MAAM,MAAM,uBAAuB,GAAG,UAAU,GAAG,QAAQ,CAAC;AAC5D,MAAM,MAAM,kBAAkB,GAAG,iBAAiB,GAAG,WAAW,GAAG,qBAAqB,CAAC;AACzF,MAAM,MAAM,kBAAkB,GAAG,eAAe,CAAC;AACjD,MAAM,MAAM,qBAAqB,GAAG,cAAc,GAAG,aAAa,GAAG,qBAAqB,CAAC;AAC3F,MAAM,MAAM,oBAAoB,GAAG,cAAc,GAAG,QAAQ,CAAC;AAC7D,MAAM,MAAM,mBAAmB,GAAG,cAAc,GAAG;IACjD,IAAI,CAAC,EAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAA;KAAE,GAAG,MAAM,CAAC;CAClD,GAAG,QAAQ,CAAC;AACb,MAAM,MAAM,6BAA6B,GAAG,2BAA2B,CAAC;AACxE,MAAM,MAAM,sBAAsB,GAAG,iBAAiB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"options.d.ts","sourceRoot":"","sources":["../../src/utils/options.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACV,eAAe,EACf,2BAA2B,EAC3B,iBAAiB,EAElB,MAAM,6BAA6B,CAAC;AAErC,oBAAY,iBAAiB,GAAG,2BAA2B,GACzD,UAAU,GAAG;IACX,eAAe,CAAC,EAAE,OAAO,EAAE,CAAC;IAC5B,yBAAyB,CAAC,EAAE,OAAO,CAAC;CACrC,CAAC;AAEJ,oBAAY,cAAc,GAAG,iBAAiB,GAAG,iBAAiB,CAAC;AAEnE,wBAAgB,YAAY,CAAC,IAAI,GAAE,cAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,CAQhF;AAED,oBAAY,aAAa,GAAG;IAC1B,aAAa,CAAC,EAAE,OAAO,CAAC;CACzB,CAAC;AAEF,aAAK,WAAW,GAAG;IACjB,WAAW,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC;CAC9B,CAAC;AAEF,oBAAY,wBAAwB,GAAG,eAAe,GAAG,WAAW,CAAC;AACrE,oBAAY,mBAAmB,GAAG,iBAAiB,CAAC;AACpD,oBAAY,2BAA2B,GAAG,iBAAiB,GAAG,aAAa,CAAC;AAC5E,oBAAY,uBAAuB,GAAG,UAAU,CAAC;AACjD,oBAAY,kBAAkB,GAAG,iBAAiB,GAAG,WAAW,CAAC;AACjE,oBAAY,kBAAkB,GAAG,eAAe,CAAC;AACjD,oBAAY,qBAAqB,GAAG,cAAc,GAAG,aAAa,CAAC;AACnE,oBAAY,oBAAoB,GAAG,cAAc,CAAC;AAClD,oBAAY,mBAAmB,GAAG,cAAc,GAAG;IACjD,IAAI,CAAC,EAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAA;KAAE,GAAG,MAAM,CAAC;CAClD,CAAC;AACF,oBAAY,6BAA6B,GAAG,2BAA2B,CAAC;AACxE,oBAAY,sBAAsB,GAAG,iBAAiB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js
index dc0227b..5044595 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js
@@ -7,8 +7,7 @@ function withDefaults(opts = {}) {
         constructorArgs: opts.constructorArgs ?? [],
         timeout: opts.timeout ?? 60e3,
         pollingInterval: opts.pollingInterval ?? 5e3,
-        useDeployedImplementation: opts.useDeployedImplementation ?? false,
-        redeployImplementation: opts.redeployImplementation ?? 'onchange',
+        useDeployedImplementation: opts.useDeployedImplementation ?? true,
         ...(0, upgrades_core_1.withValidationDefaults)(opts),
     };
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js.map
index 65c3d1b..828a3ad 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/options.js.map
@@ -1 +1 @@
-{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/utils/options.ts"],"names":[],"mappings":";;;AAAA,+DAMqC;AAoBrC,SAAgB,YAAY,CAAC,OAAuB,EAAE;IACpD,OAAO;QACL,eAAe,EAAE,IAAI,CAAC,eAAe,IAAI,EAAE;QAC3C,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI;QAC7B,eAAe,EAAE,IAAI,CAAC,eAAe,IAAI,GAAG;QAC5C,yBAAyB,EAAE,IAAI,CAAC,yBAAyB,IAAI,KAAK;QAClE,sBAAsB,EAAE,IAAI,CAAC,sBAAsB,IAAI,UAAU;QACjE,GAAG,IAAA,sCAAsB,EAAC,IAAI,CAAC;KAChC,CAAC;AACJ,CAAC;AATD,oCASC"}
\ No newline at end of file
+{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/utils/options.ts"],"names":[],"mappings":";;;AAAA,+DAMqC;AAUrC,SAAgB,YAAY,CAAC,OAAuB,EAAE;IACpD,OAAO;QACL,eAAe,EAAE,IAAI,CAAC,eAAe,IAAI,EAAE;QAC3C,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI;QAC7B,eAAe,EAAE,IAAI,CAAC,eAAe,IAAI,GAAG;QAC5C,yBAAyB,EAAE,IAAI,CAAC,yBAAyB,IAAI,IAAI;QACjE,GAAG,IAAA,sCAAsB,EAAC,IAAI,CAAC;KAChC,CAAC;AACJ,CAAC;AARD,oCAQC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts
index c3169ad..b4d20d9 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts
@@ -1,14 +1,6 @@
 import { ValidationOptions } from '@openzeppelin/upgrades-core';
 import { DeployData } from './deploy-impl';
 export declare function validateImpl(deployData: DeployData, opts: ValidationOptions, currentImplAddress?: string): Promise<void>;
-/**
- * Processes the proxy kind and validates that the implementation in deployData is upgrade safe
- * (compared to the proxy's current implementation if proxyAddress is specified).
- */
 export declare function validateProxyImpl(deployData: DeployData, opts: ValidationOptions, proxyAddress?: string): Promise<void>;
-/**
- * Asserts that the address is not a proxy and validates that the implementation in deployData is upgrade safe
- * compared to the beacon's current implementation.
- */
 export declare function validateBeaconImpl(deployData: DeployData, opts: ValidationOptions, beaconAddress?: string): Promise<void>;
 //# sourceMappingURL=validate-impl.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts.map
index 68d75c2..8c8d559 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"validate-impl.d.ts","sourceRoot":"","sources":["../../src/utils/validate-impl.ts"],"names":[],"mappings":"AAAA,OAAO,EASL,iBAAiB,EAClB,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAyB3C,wBAAsB,YAAY,CAChC,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,iBAAiB,EACvB,kBAAkB,CAAC,EAAE,MAAM,GAC1B,OAAO,CAAC,IAAI,CAAC,CAUf;AAED;;;GAGG;AACH,wBAAsB,iBAAiB,CACrC,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,iBAAiB,EACvB,YAAY,CAAC,EAAE,MAAM,GACpB,OAAO,CAAC,IAAI,CAAC,CAGf;AAED;;;GAGG;AACH,wBAAsB,kBAAkB,CACtC,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,iBAAiB,EACvB,aAAa,CAAC,EAAE,MAAM,GACrB,OAAO,CAAC,IAAI,CAAC,CAIf"}
\ No newline at end of file
+{"version":3,"file":"validate-impl.d.ts","sourceRoot":"","sources":["../../src/utils/validate-impl.ts"],"names":[],"mappings":"AAAA,OAAO,EASL,iBAAiB,EAClB,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAmB3C,wBAAsB,YAAY,CAChC,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,iBAAiB,EACvB,kBAAkB,CAAC,EAAE,MAAM,GAC1B,OAAO,CAAC,IAAI,CAAC,CAUf;AAED,wBAAsB,iBAAiB,CACrC,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,iBAAiB,EACvB,YAAY,CAAC,EAAE,MAAM,GACpB,OAAO,CAAC,IAAI,CAAC,CAGf;AAED,wBAAsB,kBAAkB,CACtC,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,iBAAiB,EACvB,aAAa,CAAC,EAAE,MAAM,GACrB,OAAO,CAAC,IAAI,CAAC,CAIf"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js
index 19ebda8..c0096ab 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js
@@ -2,9 +2,6 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.validateBeaconImpl = exports.validateProxyImpl = exports.validateImpl = void 0;
 const upgrades_core_1 = require("@openzeppelin/upgrades-core");
-/**
- * Processes the proxy kind and returns the implementation address if proxyAddress is provided.
- */
 async function processProxyImpl(deployData, proxyAddress, opts) {
     await (0, upgrades_core_1.processProxyKind)(deployData.provider, proxyAddress, opts, deployData.validations, deployData.version);
     let currentImplAddress;
@@ -14,9 +11,6 @@ async function processProxyImpl(deployData, proxyAddress, opts) {
     }
     return currentImplAddress;
 }
-/**
- * Asserts that the address is not a proxy and returns the beacon's implementation address.
- */
 async function processBeaconImpl(deployData, beaconAddress) {
     // upgrade scenario
     await (0, upgrades_core_1.assertNotProxy)(deployData.provider, beaconAddress);
@@ -33,19 +27,11 @@ async function validateImpl(deployData, opts, currentImplAddress) {
     }
 }
 exports.validateImpl = validateImpl;
-/**
- * Processes the proxy kind and validates that the implementation in deployData is upgrade safe
- * (compared to the proxy's current implementation if proxyAddress is specified).
- */
 async function validateProxyImpl(deployData, opts, proxyAddress) {
     const currentImplAddress = await processProxyImpl(deployData, proxyAddress, opts);
     return validateImpl(deployData, opts, currentImplAddress);
 }
 exports.validateProxyImpl = validateProxyImpl;
-/**
- * Asserts that the address is not a proxy and validates that the implementation in deployData is upgrade safe
- * compared to the beacon's current implementation.
- */
 async function validateBeaconImpl(deployData, opts, beaconAddress) {
     const currentImplAddress = beaconAddress !== undefined ? await processBeaconImpl(deployData, beaconAddress) : undefined;
     return validateImpl(deployData, opts, currentImplAddress);
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js.map
index 36b3527..dd0c72d 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/utils/validate-impl.js.map
@@ -1 +1 @@
-{"version":3,"file":"validate-impl.js","sourceRoot":"","sources":["../../src/utils/validate-impl.ts"],"names":[],"mappings":";;;AAAA,+DAUqC;AAGrC;;GAEG;AACH,KAAK,UAAU,gBAAgB,CAAC,UAAsB,EAAE,YAAgC,EAAE,IAAuB;IAC/G,MAAM,IAAA,gCAAgB,EAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IAE5G,IAAI,kBAAsC,CAAC;IAC3C,IAAI,YAAY,KAAK,SAAS,EAAE;QAC9B,mBAAmB;QACnB,kBAAkB,GAAG,MAAM,IAAA,wCAAwB,EAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KACxF;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,iBAAiB,CAAC,UAAsB,EAAE,aAAqB;IAC5E,mBAAmB;IACnB,MAAM,IAAA,8BAAc,EAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACzD,OAAO,MAAM,IAAA,kDAAkC,EAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;AACtF,CAAC;AAEM,KAAK,UAAU,YAAY,CAChC,UAAsB,EACtB,IAAuB,EACvB,kBAA2B;IAE3B,IAAA,iCAAiB,EAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAEnF,IAAI,kBAAkB,KAAK,SAAS,EAAE;QACpC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAChE,MAAM,aAAa,GAAG,MAAM,IAAA,0CAA0B,EAAC,QAAQ,EAAE,UAAU,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;QAC7G,IAAI,IAAI,CAAC,sBAAsB,KAAK,IAAI,EAAE;YACxC,IAAA,wCAAwB,EAAC,aAAa,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;SACjF;KACF;AACH,CAAC;AAdD,oCAcC;AAED;;;GAGG;AACI,KAAK,UAAU,iBAAiB,CACrC,UAAsB,EACtB,IAAuB,EACvB,YAAqB;IAErB,MAAM,kBAAkB,GAAG,MAAM,gBAAgB,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAClF,OAAO,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AAC5D,CAAC;AAPD,8CAOC;AAED;;;GAGG;AACI,KAAK,UAAU,kBAAkB,CACtC,UAAsB,EACtB,IAAuB,EACvB,aAAsB;IAEtB,MAAM,kBAAkB,GACtB,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,iBAAiB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/F,OAAO,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AAC5D,CAAC;AARD,gDAQC"}
\ No newline at end of file
+{"version":3,"file":"validate-impl.js","sourceRoot":"","sources":["../../src/utils/validate-impl.ts"],"names":[],"mappings":";;;AAAA,+DAUqC;AAGrC,KAAK,UAAU,gBAAgB,CAAC,UAAsB,EAAE,YAAgC,EAAE,IAAuB;IAC/G,MAAM,IAAA,gCAAgB,EAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IAE5G,IAAI,kBAAsC,CAAC;IAC3C,IAAI,YAAY,KAAK,SAAS,EAAE;QAC9B,mBAAmB;QACnB,kBAAkB,GAAG,MAAM,IAAA,wCAAwB,EAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KACxF;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAED,KAAK,UAAU,iBAAiB,CAAC,UAAsB,EAAE,aAAqB;IAC5E,mBAAmB;IACnB,MAAM,IAAA,8BAAc,EAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACzD,OAAO,MAAM,IAAA,kDAAkC,EAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;AACtF,CAAC;AAEM,KAAK,UAAU,YAAY,CAChC,UAAsB,EACtB,IAAuB,EACvB,kBAA2B;IAE3B,IAAA,iCAAiB,EAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAEnF,IAAI,kBAAkB,KAAK,SAAS,EAAE;QACpC,MAAM,QAAQ,GAAG,MAAM,wBAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAChE,MAAM,aAAa,GAAG,MAAM,IAAA,0CAA0B,EAAC,QAAQ,EAAE,UAAU,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;QAC7G,IAAI,IAAI,CAAC,sBAAsB,KAAK,IAAI,EAAE;YACxC,IAAA,wCAAwB,EAAC,aAAa,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;SACjF;KACF;AACH,CAAC;AAdD,oCAcC;AAEM,KAAK,UAAU,iBAAiB,CACrC,UAAsB,EACtB,IAAuB,EACvB,YAAqB;IAErB,MAAM,kBAAkB,GAAG,MAAM,gBAAgB,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAClF,OAAO,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AAC5D,CAAC;AAPD,8CAOC;AAEM,KAAK,UAAU,kBAAkB,CACtC,UAAsB,EACtB,IAAuB,EACvB,aAAsB;IAEtB,MAAM,kBAAkB,GACtB,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,iBAAiB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/F,OAAO,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AAC5D,CAAC;AARD,gDAQC"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts
index bfc9a55..987ba50 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts
@@ -1,6 +1,6 @@
 import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory } from 'ethers';
 import { ValidateImplementationOptions } from './utils';
-export type ValidateImplementationFunction = (ImplFactory: ContractFactory, opts?: ValidateImplementationOptions) => Promise<void>;
+export declare type ValidateImplementationFunction = (ImplFactory: ContractFactory, opts?: ValidateImplementationOptions) => Promise<void>;
 export declare function makeValidateImplementation(hre: HardhatRuntimeEnvironment): ValidateImplementationFunction;
 //# sourceMappingURL=validate-implementation.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts.map
index 6e7f702..f863b19 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/validate-implementation.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"validate-implementation.d.ts","sourceRoot":"","sources":["../src/validate-implementation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAI9C,OAAO,EAAE,6BAA6B,EAAE,MAAM,SAAS,CAAC;AAExD,MAAM,MAAM,8BAA8B,GAAG,CAC3C,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,6BAA6B,KACjC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEnB,wBAAgB,0BAA0B,CAAC,GAAG,EAAE,yBAAyB,GAAG,8BAA8B,CAKzG"}
\ No newline at end of file
+{"version":3,"file":"validate-implementation.d.ts","sourceRoot":"","sources":["../src/validate-implementation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAI9C,OAAO,EAAE,6BAA6B,EAAE,MAAM,SAAS,CAAC;AAExD,oBAAY,8BAA8B,GAAG,CAC3C,WAAW,EAAE,eAAe,EAC5B,IAAI,CAAC,EAAE,6BAA6B,KACjC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEnB,wBAAgB,0BAA0B,CAAC,GAAG,EAAE,yBAAyB,GAAG,8BAA8B,CAKzG"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts
index ca8b99e..79ea32c 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts
@@ -1,6 +1,6 @@
 import { HardhatRuntimeEnvironment, RunSuperFunction } from 'hardhat/types';
 /**
- * Overrides hardhat-etherscan's verify:verify subtask to fully verify a proxy or beacon.
+ * Overrides hardhat-etherscan's verify:verify subtask to fully verify a proxy.
  *
  * Verifies the contract at an address. If the address is an ERC-1967 compatible proxy, verifies the proxy and associated proxy contracts,
  * as well as the implementation. Otherwise, calls hardhat-etherscan's verify function directly.
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts.map
index fb47ebb..bad15c3 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"verify-proxy.d.ts","sourceRoot":"","sources":["../src/verify-proxy.ts"],"names":[],"mappings":"AAuBA,OAAO,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AA+C5E;;;;;;;;;;GAUG;AACH,wBAAsB,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,yBAAyB,EAAE,QAAQ,EAAE,gBAAgB,CAAC,GAAG,CAAC,gBA6CtG"}
\ No newline at end of file
+{"version":3,"file":"verify-proxy.d.ts","sourceRoot":"","sources":["../src/verify-proxy.ts"],"names":[],"mappings":"AAsBA,OAAO,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AA0C5E;;;;;;;;;;GAUG;AACH,wBAAsB,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,yBAAyB,EAAE,QAAQ,EAAE,gBAAgB,CAAC,GAAG,CAAC,gBAoCtG"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js
index 5636dc2..eaf7f6d 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js
@@ -27,7 +27,7 @@ const verifiableContracts = {
     proxyAdmin: { artifact: ProxyAdmin_json_1.default, event: 'OwnershipTransferred(address,address)' },
 };
 /**
- * Overrides hardhat-etherscan's verify:verify subtask to fully verify a proxy or beacon.
+ * Overrides hardhat-etherscan's verify:verify subtask to fully verify a proxy.
  *
  * Verifies the contract at an address. If the address is an ERC-1967 compatible proxy, verifies the proxy and associated proxy contracts,
  * as well as the implementation. Otherwise, calls hardhat-etherscan's verify function directly.
@@ -48,55 +48,37 @@ async function verify(args, hre, runSuper) {
     }
     const provider = hre.network.provider;
     const proxyAddress = args.address;
-    const errorReport = {
-        errors: [],
-        severity: 'error',
-    };
-    let proxy = true;
+    const errors = [];
     if (await (0, upgrades_core_1.isTransparentOrUUPSProxy)(provider, proxyAddress)) {
-        await fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, errorReport);
+        await fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, errors);
     }
     else if (await (0, upgrades_core_1.isBeaconProxy)(provider, proxyAddress)) {
-        await fullVerifyBeaconProxy(hre, proxyAddress, hardhatVerify, errorReport);
-    }
-    else if (await (0, upgrades_core_1.isBeacon)(provider, proxyAddress)) {
-        proxy = false;
-        const etherscanApi = await (0, etherscan_api_1.getEtherscanAPIConfig)(hre);
-        await fullVerifyBeacon(hre, proxyAddress, hardhatVerify, etherscanApi, errorReport);
+        await fullVerifyBeaconProxy(hre, proxyAddress, hardhatVerify, errors);
     }
     else {
         // Doesn't look like a proxy, so just verify directly
         return hardhatVerify(proxyAddress);
     }
-    if (errorReport.errors.length > 0) {
-        displayErrorReport(errorReport);
-    }
-    else {
-        console.info(`\n${proxy ? 'Proxy' : 'Contract'} fully verified.`);
+    if (errors.length > 0) {
+        throw new upgrades_core_1.UpgradesError(getVerificationErrorSummary(errors));
     }
+    console.info('\nProxy fully verified.');
     async function hardhatVerify(address) {
         return await runSuper({ ...args, address });
     }
 }
 exports.verify = verify;
 /**
- * Throws or warns with a formatted summary of all of the verification errors that have been recorded.
- *
- * @param errorReport Accumulated verification errors
- * @throws UpgradesError if errorReport.severity is 'error'
+ * @param errors Accumulated verification errors
+ * @returns Formatted summary of all of the verification errors that have been recorded.
  */
-function displayErrorReport(errorReport) {
-    let summary = `\nVerification completed with the following ${errorReport.severity === 'error' ? 'errors' : 'warnings'}.`;
-    for (let i = 0; i < errorReport.errors.length; i++) {
-        const error = errorReport.errors[i];
-        summary += `\n\n${errorReport.severity === 'error' ? 'Error' : 'Warning'} ${i + 1}: ${error}`;
-    }
-    if (errorReport.severity === 'error') {
-        throw new upgrades_core_1.UpgradesError(summary);
-    }
-    else {
-        console.warn(summary);
+function getVerificationErrorSummary(errors) {
+    let str = 'Verification completed with the following errors.';
+    for (let i = 0; i < errors.length; i++) {
+        const error = errors[i];
+        str += `\n\nError ${i + 1}: ${error}`;
     }
+    return str;
 }
 /**
  * Log an error about the given contract's verification attempt, and save it so it can be summarized at the end.
@@ -104,30 +86,21 @@ function displayErrorReport(errorReport) {
  * @param address The address that failed to verify
  * @param contractType The type or name of the contract
  * @param details The error details
- * @param errorReport Accumulated verification errors
+ * @param errors Accumulated verification errors
  */
-function recordVerificationError(address, contractType, details, errorReport) {
+function recordVerificationError(address, contractType, details, errors) {
     const message = `Failed to verify ${contractType} contract at ${address}: ${details}`;
-    recordError(message, errorReport);
+    recordError(message, errors);
 }
-function recordError(message, errorReport) {
+function recordError(message, errors) {
     console.error(message);
-    errorReport.errors.push(message);
+    errors.push(message);
 }
 /**
  * Indicates that the expected event topic was not found in the contract's logs according to the Etherscan API.
  */
 class EventNotFound extends upgrades_core_1.UpgradesError {
 }
-/**
- * Indicates that the contract's bytecode does not match with the plugin's artifact.
- */
-class BytecodeNotMatchArtifact extends Error {
-    constructor(message, contractName) {
-        super(message);
-        this.contractName = contractName;
-    }
-}
 /**
  * Fully verifies all contracts related to the given transparent or UUPS proxy address: implementation, admin (if any), and proxy.
  * Also links the proxy to the implementation ABI on Etherscan.
@@ -141,15 +114,15 @@ class BytecodeNotMatchArtifact extends Error {
  * @param hre
  * @param proxyAddress The transparent or UUPS proxy address
  * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
- * @param errorReport Accumulated verification errors
+ * @errors Accumulated verification errors
  */
-async function fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, errorReport) {
+async function fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, errors) {
     const provider = hre.network.provider;
     const implAddress = await (0, upgrades_core_1.getImplementationAddress)(provider, proxyAddress);
-    await verifyImplementation(hardhatVerify, implAddress, errorReport);
+    await verifyImplementation(hardhatVerify, implAddress, errors);
     const etherscanApi = await (0, etherscan_api_1.getEtherscanAPIConfig)(hre);
     await verifyTransparentOrUUPS();
-    await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errorReport);
+    await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errors);
     // Either UUPS or Transparent proxy could have admin slot set, although typically this should only be for Transparent
     await verifyAdmin();
     async function verifyAdmin() {
@@ -157,10 +130,7 @@ async function fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, err
         if (!(0, upgrades_core_1.isEmptySlot)(adminAddress)) {
             console.log(`Verifying proxy admin: ${adminAddress}`);
             try {
-                await verifyWithArtifactOrFallback(hre, hardhatVerify, etherscanApi, adminAddress, [verifiableContracts.proxyAdmin], errorReport, 
-                // The user provided the proxy address to verify, whereas this function is only verifying the related proxy admin.
-                // So even if this falls back and succeeds, we want to keep any errors that might have occurred while verifying the proxy itself.
-                false);
+                await verifyContractWithCreationEvent(hre, etherscanApi, adminAddress, [verifiableContracts.proxyAdmin], errors);
             }
             catch (e) {
                 if (e instanceof EventNotFound) {
@@ -171,7 +141,7 @@ async function fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, err
     }
     async function verifyTransparentOrUUPS() {
         console.log(`Verifying proxy: ${proxyAddress}`);
-        await verifyWithArtifactOrFallback(hre, hardhatVerify, etherscanApi, proxyAddress, [verifiableContracts.transparentUpgradeableProxy, verifiableContracts.erc1967proxy], errorReport, true);
+        await verifyContractWithCreationEvent(hre, etherscanApi, proxyAddress, [verifiableContracts.transparentUpgradeableProxy, verifiableContracts.erc1967proxy], errors);
     }
 }
 /**
@@ -181,38 +151,24 @@ async function fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, err
  * @param hre
  * @param proxyAddress The beacon proxy address
  * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
- * @param errorReport Accumulated verification errors
+ * @errors Accumulated verification errors
  */
-async function fullVerifyBeaconProxy(hre, proxyAddress, hardhatVerify, errorReport) {
+async function fullVerifyBeaconProxy(hre, proxyAddress, hardhatVerify, errors) {
     const provider = hre.network.provider;
     const beaconAddress = await (0, upgrades_core_1.getBeaconAddress)(provider, proxyAddress);
     const implAddress = await (0, upgrades_core_1.getImplementationAddressFromBeacon)(provider, beaconAddress);
+    await verifyImplementation(hardhatVerify, implAddress, errors);
     const etherscanApi = await (0, etherscan_api_1.getEtherscanAPIConfig)(hre);
-    await fullVerifyBeacon(hre, beaconAddress, hardhatVerify, etherscanApi, errorReport);
+    await verifyBeacon();
     await verifyBeaconProxy();
-    await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errorReport);
+    await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errors);
     async function verifyBeaconProxy() {
         console.log(`Verifying beacon proxy: ${proxyAddress}`);
-        await verifyWithArtifactOrFallback(hre, hardhatVerify, etherscanApi, proxyAddress, [verifiableContracts.beaconProxy], errorReport, true);
+        await verifyContractWithCreationEvent(hre, etherscanApi, proxyAddress, [verifiableContracts.beaconProxy], errors);
     }
-}
-/**
- * Verifies all contracts resulting from a beacon deployment: implementation, beacon
- *
- * @param hre
- * @param beaconAddress The beacon address
- * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
- * @param etherscanApi Configuration for the Etherscan API
- * @param errorReport Accumulated verification errors
- */
-async function fullVerifyBeacon(hre, beaconAddress, hardhatVerify, etherscanApi, errorReport) {
-    const provider = hre.network.provider;
-    const implAddress = await (0, upgrades_core_1.getImplementationAddressFromBeacon)(provider, beaconAddress);
-    await verifyImplementation(hardhatVerify, implAddress, errorReport);
-    await verifyBeacon();
     async function verifyBeacon() {
-        console.log(`Verifying beacon or beacon-like contract: ${beaconAddress}`);
-        await verifyWithArtifactOrFallback(hre, hardhatVerify, etherscanApi, beaconAddress, [verifiableContracts.upgradeableBeacon], errorReport, true);
+        console.log(`Verifying beacon: ${beaconAddress}`);
+        await verifyContractWithCreationEvent(hre, etherscanApi, beaconAddress, [verifiableContracts.upgradeableBeacon], errors);
     }
 }
 /**
@@ -220,9 +176,9 @@ async function fullVerifyBeacon(hre, beaconAddress, hardhatVerify, etherscanApi,
  *
  * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
  * @param implAddress The implementation address
- * @param errorReport Accumulated verification errors
+ * @param errors Accumulated verification errors
  */
-async function verifyImplementation(hardhatVerify, implAddress, errorReport) {
+async function verifyImplementation(hardhatVerify, implAddress, errors) {
     try {
         console.log(`Verifying implementation: ${implAddress}`);
         await hardhatVerify(implAddress);
@@ -232,7 +188,7 @@ async function verifyImplementation(hardhatVerify, implAddress, errorReport) {
             console.log(`Implementation ${implAddress} already verified.`);
         }
         else {
-            recordVerificationError(implAddress, 'implementation', e.message, errorReport);
+            recordVerificationError(implAddress, 'implementation', e.message, errors);
         }
     }
 }
@@ -261,64 +217,7 @@ async function searchEvent(etherscanApi, address, possibleContractInfo) {
     throw new EventNotFound(`Could not find an event with any of the following topics in the logs for address ${address}: ${events.join(', ')}`, () => 'If the proxy was recently deployed, the transaction may not be available on Etherscan yet. Try running the verify task again after waiting a few blocks.');
 }
 /**
- * Verifies a contract by matching with known artifacts.
- *
- * If a match was not found, falls back to verify directly using the regular hardhat verify task.
- *
- * If the fallback passes, logs as success.
- * If the fallback also fails, records errors for both the original and fallback attempts.
- *
- * @param hre
- * @param etherscanApi The Etherscan API config
- * @param address The contract address to verify
- * @param possibleContractInfo An array of possible contract artifacts to use for verification along
- *  with the corresponding creation event expected in the logs.
- * @param errorReport Accumulated verification errors
- * @param convertErrorsToWarningsOnFallbackSuccess If fallback verification occurred and succeeded, whether any
- *  previously accumulated errors should be converted into warnings in the final summary.
- * @throws {EventNotFound} if none of the events were found in the contract's logs according to Etherscan.
- */
-async function verifyWithArtifactOrFallback(hre, hardhatVerify, etherscanApi, address, possibleContractInfo, errorReport, convertErrorsToWarningsOnFallbackSuccess) {
-    try {
-        await attemptVerifyWithCreationEvent(hre, etherscanApi, address, possibleContractInfo, errorReport);
-        return true;
-    }
-    catch (origError) {
-        if (origError instanceof BytecodeNotMatchArtifact || origError instanceof EventNotFound) {
-            // Try falling back to regular hardhat verify in case the source code is available in the user's project.
-            try {
-                await hardhatVerify(address);
-            }
-            catch (fallbackError) {
-                if (fallbackError.message.toLowerCase().includes('already verified')) {
-                    console.log(`Contract at ${address} already verified.`);
-                }
-                else {
-                    // Fallback failed, so record both the original error and the fallback attempt, then return
-                    if (origError instanceof BytecodeNotMatchArtifact) {
-                        recordVerificationError(address, origError.contractName, origError.message, errorReport);
-                    }
-                    else {
-                        recordError(origError.message, errorReport);
-                    }
-                    recordError(`Failed to verify directly using hardhat verify: ${fallbackError.message}`, errorReport);
-                    return;
-                }
-            }
-            // Since the contract was able to be verified directly, we don't want the task to fail so we should convert earlier errors into warnings for other related contracts.
-            // For example, the user provided constructor arguments for the verify command will apply to all calls of the regular hardhat verify,
-            // so it is not possible to successfully verify both an impl and a proxy that uses the above fallback at the same time.
-            if (convertErrorsToWarningsOnFallbackSuccess) {
-                errorReport.severity = 'warn';
-            }
-        }
-        else {
-            throw origError;
-        }
-    }
-}
-/**
- * Attempts to verify a contract by looking up an event that should have been logged during contract construction,
+ * Verifies a contract by looking up an event that should have been logged during contract construction,
  * finds the txHash for that, and infers the constructor args to use for verification.
  *
  * Iterates through each element of possibleContractInfo to look for that element's event, until an event is found.
@@ -328,11 +227,10 @@ async function verifyWithArtifactOrFallback(hre, hardhatVerify, etherscanApi, ad
  * @param address The contract address to verify
  * @param possibleContractInfo An array of possible contract artifacts to use for verification along
  *  with the corresponding creation event expected in the logs.
- * @param errorReport Accumulated verification errors
+ * @param errors Accumulated verification errors
  * @throws {EventNotFound} if none of the events were found in the contract's logs according to Etherscan.
- * @throws {BytecodeNotMatchArtifact} if the contract's bytecode does not match with the plugin's known artifact.
  */
-async function attemptVerifyWithCreationEvent(hre, etherscanApi, address, possibleContractInfo, errorReport) {
+async function verifyContractWithCreationEvent(hre, etherscanApi, address, possibleContractInfo, errors) {
     const { contractInfo, txHash } = await searchEvent(etherscanApi, address, possibleContractInfo);
     (0, debug_1.default)(`verifying contract ${contractInfo.artifact.contractName} at ${address}`);
     const tx = await (0, upgrades_core_1.getTransactionByHash)(hre.network.provider, txHash);
@@ -344,10 +242,10 @@ async function attemptVerifyWithCreationEvent(hre, etherscanApi, address, possib
     if (constructorArguments === undefined) {
         // The creation bytecode for the address does not match with the expected artifact.
         // This may be because a different version of the contract was deployed compared to what is in the plugins.
-        throw new BytecodeNotMatchArtifact(`Bytecode does not match with the current version of ${contractInfo.artifact.contractName} in the Hardhat Upgrades plugin.`, contractInfo.artifact.contractName);
+        recordVerificationError(address, contractInfo.artifact.contractName, `Bytecode does not match with the current version of ${contractInfo.artifact.contractName} in the Hardhat Upgrades plugin.`, errors);
     }
     else {
-        await verifyContractWithConstructorArgs(etherscanApi, address, contractInfo.artifact, constructorArguments, errorReport);
+        await verifyContractWithConstructorArgs(etherscanApi, address, contractInfo.artifact, constructorArguments, errors);
     }
 }
 /**
@@ -358,7 +256,7 @@ async function attemptVerifyWithCreationEvent(hre, etherscanApi, address, possib
  * @param artifact The contract artifact to use for verification.
  * @param constructorArguments The constructor arguments to use for verification.
  */
-async function verifyContractWithConstructorArgs(etherscanApi, address, artifact, constructorArguments, errorReport) {
+async function verifyContractWithConstructorArgs(etherscanApi, address, artifact, constructorArguments, errors) {
     (0, debug_1.default)(`verifying contract ${address} with constructor args ${constructorArguments}`);
     const params = {
         apiKey: etherscanApi.key,
@@ -381,7 +279,7 @@ async function verifyContractWithConstructorArgs(etherscanApi, address, artifact
             console.log(`Successfully verified contract ${artifact.contractName} at ${address}.`);
         }
         else {
-            recordVerificationError(address, artifact.contractName, status.message, errorReport);
+            recordVerificationError(address, artifact.contractName, status.message, errors);
         }
     }
     catch (e) {
@@ -389,7 +287,7 @@ async function verifyContractWithConstructorArgs(etherscanApi, address, artifact
             console.log(`Contract at ${address} already verified.`);
         }
         else {
-            recordVerificationError(address, artifact.contractName, e.message, errorReport);
+            recordVerificationError(address, artifact.contractName, e.message, errors);
         }
     }
 }
@@ -418,7 +316,7 @@ async function getContractCreationTxHash(address, topic, etherscanApi) {
         const result = responseBody.result;
         return result[0].transactionHash; // get the txhash from the first instance of this event
     }
-    else if (responseBody.message === 'No records found' || responseBody.message === 'No logs found') {
+    else if (responseBody.message === 'No records found') {
         (0, debug_1.default)(`no result found for event topic ${topic} at address ${address}`);
         return undefined;
     }
@@ -433,7 +331,7 @@ async function getContractCreationTxHash(address, topic, etherscanApi) {
  * @param proxyAddress The proxy address
  * @param implAddress The implementation address
  */
-async function linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errorReport) {
+async function linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errors) {
     console.log(`Linking proxy ${proxyAddress} with implementation`);
     const params = {
         module: 'contract',
@@ -455,7 +353,7 @@ async function linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAd
         console.log('Successfully linked proxy to implementation.');
     }
     else {
-        recordError(`Failed to link proxy ${proxyAddress} with its implementation. Reason: ${responseBody.result}`, errorReport);
+        recordError(`Failed to link proxy ${proxyAddress} with its implementation. Reason: ${responseBody.result}`, errors);
     }
     async function delay(ms) {
         return new Promise(resolve => setTimeout(resolve, ms));
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js.map b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js.map
index 244398f..eaa7256 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js.map
+++ b/node_modules/@openzeppelin/hardhat-upgrades/dist/verify-proxy.js.map
@@ -1 +1 @@
-{"version":3,"file":"verify-proxy.js","sourceRoot":"","sources":["../src/verify-proxy.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"verify-proxy.js","sourceRoot":"","sources":["../src/verify-proxy.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/admin.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/admin.ts
index d339231..2d7deb8 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/admin.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/admin.ts
@@ -1,40 +1,37 @@
 import chalk from 'chalk';
 import type { HardhatRuntimeEnvironment } from 'hardhat/types';
 import { Manifest, getAdminAddress } from '@openzeppelin/upgrades-core';
-import { Contract, Signer } from 'ethers';
+import { Contract } from 'ethers';
 import { getProxyAdminFactory } from './utils';
-import { disablePlatform } from './platform/utils';
 
 const SUCCESS_CHECK = chalk.green('✔') + ' ';
 const FAILURE_CROSS = chalk.red('✘') + ' ';
 
-export type ChangeAdminFunction = (proxyAddress: string, newAdmin: string, signer?: Signer) => Promise<void>;
-export type TransferProxyAdminOwnershipFunction = (newOwner: string, signer?: Signer) => Promise<void>;
-export type GetInstanceFunction = (signer?: Signer) => Promise<Contract>;
+export type ChangeAdminFunction = (proxyAddress: string, newAdmin: string) => Promise<void>;
+export type TransferProxyAdminOwnershipFunction = (newOwner: string) => Promise<void>;
+export type GetInstanceFunction = () => Promise<Contract>;
 
-export function makeChangeProxyAdmin(hre: HardhatRuntimeEnvironment, platformModule: boolean): ChangeAdminFunction {
-  return async function changeProxyAdmin(proxyAddress, newAdmin, signer?: Signer) {
-    disablePlatform(hre, platformModule, {}, changeProxyAdmin.name);
-
-    const admin = await getManifestAdmin(hre, signer);
+export function makeChangeProxyAdmin(hre: HardhatRuntimeEnvironment): ChangeAdminFunction {
+  return async function changeProxyAdmin(proxyAddress, newAdmin) {
+    const admin = await getManifestAdmin(hre);
     const proxyAdminAddress = await getAdminAddress(hre.network.provider, proxyAddress);
 
+
+    console.log("!!!!!!!");
+    console.log(admin.address);
+    console.log(proxyAdminAddress);
+
     if (admin.address !== proxyAdminAddress) {
-      throw new Error('Proxy admin is not the one registered in the network manifest');
+      throw new Error('!!! Proxy admin is not the one registered in the network manifest');
     } else if (admin.address !== newAdmin) {
       await admin.changeProxyAdmin(proxyAddress, newAdmin);
     }
   };
 }
 
-export function makeTransferProxyAdminOwnership(
-  hre: HardhatRuntimeEnvironment,
-  platformModule: boolean,
-): TransferProxyAdminOwnershipFunction {
-  return async function transferProxyAdminOwnership(newOwner, signer?: Signer) {
-    disablePlatform(hre, platformModule, {}, transferProxyAdminOwnership.name);
-
-    const admin = await getManifestAdmin(hre, signer);
+export function makeTransferProxyAdminOwnership(hre: HardhatRuntimeEnvironment): TransferProxyAdminOwnershipFunction {
+  return async function transferProxyAdminOwnership(newOwner) {
+    const admin = await getManifestAdmin(hre);
     await admin.transferOwnership(newOwner);
 
     const { provider } = hre.network;
@@ -51,12 +48,12 @@ export function makeTransferProxyAdminOwnership(
 }
 
 export function makeGetInstanceFunction(hre: HardhatRuntimeEnvironment): GetInstanceFunction {
-  return async function getInstance(signer?: Signer) {
-    return await getManifestAdmin(hre, signer);
+  return async function getInstance() {
+    return await getManifestAdmin(hre);
   };
 }
 
-export async function getManifestAdmin(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<Contract> {
+export async function getManifestAdmin(hre: HardhatRuntimeEnvironment): Promise<Contract> {
   const manifest = await Manifest.forNetwork(hre.network.provider);
   const manifestAdmin = await manifest.getAdmin();
   const proxyAdminAddress = manifestAdmin?.address;
@@ -65,6 +62,6 @@ export async function getManifestAdmin(hre: HardhatRuntimeEnvironment, signer?:
     throw new Error('No ProxyAdmin was found in the network manifest');
   }
 
-  const AdminFactory = await getProxyAdminFactory(hre, signer);
+  const AdminFactory = await getProxyAdminFactory(hre);
   return AdminFactory.attach(proxyAdminAddress);
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon-proxy.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon-proxy.ts
index 36933b0..dbbeaa7 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon-proxy.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon-proxy.ts
@@ -9,7 +9,6 @@ import {
   DeployBeaconProxyUnsupportedError,
   DeployBeaconProxyKindError,
   UpgradesError,
-  RemoteDeploymentId,
 } from '@openzeppelin/upgrades-core';
 
 import {
@@ -21,8 +20,6 @@ import {
   getContractAddress,
   getInitializerData,
 } from './utils';
-import { enablePlatform } from './platform/utils';
-import { getContractInstance } from './utils/contract-instance';
 
 export interface DeployBeaconProxyFunction {
   (
@@ -34,10 +31,7 @@ export interface DeployBeaconProxyFunction {
   (beacon: ContractAddressOrInstance, attachTo: ContractFactory, opts?: DeployBeaconProxyOptions): Promise<Contract>;
 }
 
-export function makeDeployBeaconProxy(
-  hre: HardhatRuntimeEnvironment,
-  platformModule: boolean,
-): DeployBeaconProxyFunction {
+export function makeDeployBeaconProxy(hre: HardhatRuntimeEnvironment): DeployBeaconProxyFunction {
   return async function deployBeaconProxy(
     beacon: ContractAddressOrInstance,
     attachTo: ContractFactory,
@@ -55,8 +49,6 @@ export function makeDeployBeaconProxy(
       args = [];
     }
 
-    opts = enablePlatform(hre, platformModule, opts);
-
     const { provider } = hre.network;
     const manifest = await Manifest.forNetwork(provider);
 
@@ -80,13 +72,16 @@ export function makeDeployBeaconProxy(
     }
 
     const BeaconProxyFactory = await getBeaconProxyFactory(hre, attachTo.signer);
-    const proxyDeployment: Required<ProxyDeployment & DeployTransaction> & RemoteDeploymentId = Object.assign(
+    const proxyDeployment: Required<ProxyDeployment & DeployTransaction> = Object.assign(
       { kind: opts.kind },
-      await deploy(hre, opts, BeaconProxyFactory, beaconAddress, data),
+      await deploy(BeaconProxyFactory, beaconAddress, data),
     );
 
     await manifest.addProxy(proxyDeployment);
 
-    return getContractInstance(hre, attachTo, opts, proxyDeployment);
+    const inst = attachTo.attach(proxyDeployment.address);
+    // @ts-ignore Won't be readonly because inst was created through attach.
+    inst.deployTransaction = proxyDeployment.deployTransaction;
+    return inst;
   };
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon.ts
index e569475..ec8b819 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-beacon.ts
@@ -4,20 +4,17 @@ import type { ContractFactory, Contract } from 'ethers';
 import { Deployment } from '@openzeppelin/upgrades-core';
 
 import { DeployBeaconOptions, deploy, DeployTransaction, getUpgradeableBeaconFactory, deployBeaconImpl } from './utils';
-import { disablePlatform } from './platform/utils';
 
 export interface DeployBeaconFunction {
   (ImplFactory: ContractFactory, opts?: DeployBeaconOptions): Promise<Contract>;
 }
 
-export function makeDeployBeacon(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployBeaconFunction {
+export function makeDeployBeacon(hre: HardhatRuntimeEnvironment): DeployBeaconFunction {
   return async function deployBeacon(ImplFactory: ContractFactory, opts: DeployBeaconOptions = {}) {
-    disablePlatform(hre, platformModule, opts, deployBeacon.name);
-
     const { impl } = await deployBeaconImpl(hre, ImplFactory, opts);
 
     const UpgradeableBeaconFactory = await getUpgradeableBeaconFactory(hre, ImplFactory.signer);
-    const beaconDeployment: Deployment & DeployTransaction = await deploy(hre, opts, UpgradeableBeaconFactory, impl);
+    const beaconDeployment: Required<Deployment & DeployTransaction> = await deploy(UpgradeableBeaconFactory, impl);
     const beaconContract = UpgradeableBeaconFactory.attach(beaconDeployment.address);
 
     // @ts-ignore Won't be readonly because beaconContract was created through attach.
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-contract.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-contract.ts
deleted file mode 100644
index d7fad3d..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-contract.ts
+++ /dev/null
@@ -1,84 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import type { ContractFactory, Contract } from 'ethers';
-
-import { deploy, DeployContractOptions, DeployTransaction } from './utils';
-import { DeployData, getDeployData } from './utils/deploy-impl';
-import { enablePlatform } from './platform/utils';
-import {
-  Deployment,
-  RemoteDeploymentId,
-  getContractNameAndRunValidation,
-  inferProxyKind,
-  UpgradesError,
-  inferInitializable,
-} from '@openzeppelin/upgrades-core';
-import { getContractInstance } from './utils/contract-instance';
-
-export interface DeployContractFunction {
-  (Contract: ContractFactory, args?: unknown[], opts?: DeployContractOptions): Promise<Contract>;
-  (Contract: ContractFactory, opts?: DeployContractOptions): Promise<Contract>;
-}
-
-async function deployNonUpgradeableContract(
-  hre: HardhatRuntimeEnvironment,
-  Contract: ContractFactory,
-  opts: DeployContractOptions,
-) {
-  const deployData = await getDeployData(hre, Contract, opts);
-
-  if (!opts.unsafeAllowDeployContract) {
-    assertNonUpgradeable(deployData);
-  }
-
-  const deployment: Required<Deployment & DeployTransaction> & RemoteDeploymentId = await deploy(
-    hre,
-    opts,
-    Contract,
-    ...deployData.fullOpts.constructorArgs,
-  );
-
-  return deployment;
-}
-
-function assertNonUpgradeable(deployData: DeployData) {
-  const [fullContractName, runValidation] = getContractNameAndRunValidation(deployData.validations, deployData.version);
-  const c = runValidation[fullContractName];
-  if (inferInitializable(c) || inferProxyKind(deployData.validations, deployData.version) === 'uups') {
-    throw new UpgradesError(
-      `The contract ${fullContractName} looks like an upgradeable contract.`,
-      () =>
-        'Upgradable contracts cannot be deployed using the deployContract function. Use deployProxy, deployBeacon, or deployImplementation.\n' +
-        'If this is not intended to be an upgradeable contract, set the unsafeAllowDeployContract option to true and run the deployContract function again.',
-    );
-  }
-}
-
-export function makeDeployContract(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployContractFunction {
-  return async function deployContract(
-    Contract,
-    args: unknown[] | DeployContractOptions = [],
-    opts: DeployContractOptions = {},
-  ) {
-    if (!Array.isArray(args)) {
-      opts = args;
-      args = [];
-    }
-
-    opts = enablePlatform(hre, platformModule, opts);
-
-    if (!opts.usePlatformDeploy) {
-      throw new Error(`The ${deployContract.name} function cannot have the \`usePlatformDeploy\` option disabled.`);
-    }
-
-    if (opts.constructorArgs !== undefined) {
-      throw new Error(
-        `The ${deployContract.name} function does not support the constructorArgs option. Pass in constructor arguments using the format: deployContract(MyContract, [ 'my arg' ]);`,
-      );
-    }
-    opts.constructorArgs = args;
-
-    const deployment = await deployNonUpgradeableContract(hre, Contract, opts);
-
-    return getContractInstance(hre, Contract, opts, deployment);
-  };
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-implementation.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-implementation.ts
index 83431c8..d6f0b1c 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-implementation.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-implementation.ts
@@ -2,8 +2,7 @@ import { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory, ethers } from 'ethers';
 
 import { DeployImplementationOptions } from './utils';
-import { deployUpgradeableImpl } from './utils/deploy-impl';
-import { enablePlatform } from './platform/utils';
+import { deployStandaloneImpl } from './utils/deploy-impl';
 
 export type DeployImplementationFunction = (
   ImplFactory: ContractFactory,
@@ -12,14 +11,9 @@ export type DeployImplementationFunction = (
 
 export type DeployImplementationResponse = string | ethers.providers.TransactionResponse;
 
-export function makeDeployImplementation(
-  hre: HardhatRuntimeEnvironment,
-  platformModule: boolean,
-): DeployImplementationFunction {
+export function makeDeployImplementation(hre: HardhatRuntimeEnvironment): DeployImplementationFunction {
   return async function deployImplementation(ImplFactory, opts: DeployImplementationOptions = {}) {
-    opts = enablePlatform(hre, platformModule, opts);
-
-    const deployedImpl = await deployUpgradeableImpl(hre, ImplFactory, opts);
+    const deployedImpl = await deployStandaloneImpl(hre, ImplFactory, opts);
 
     if (opts.getTxResponse && deployedImpl.txResponse !== undefined) {
       return deployedImpl.txResponse;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy-admin.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy-admin.ts
index 95a3053..ded07cd 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy-admin.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy-admin.ts
@@ -4,19 +4,16 @@ import { fetchOrDeployAdmin } from '@openzeppelin/upgrades-core';
 
 import { deploy, DeployProxyAdminOptions, getProxyAdminFactory } from './utils';
 import { Signer } from 'ethers';
-import { disablePlatform } from './platform/utils';
 
 export interface DeployAdminFunction {
   (signer?: Signer, opts?: DeployProxyAdminOptions): Promise<string>;
 }
 
-export function makeDeployProxyAdmin(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployAdminFunction {
+export function makeDeployProxyAdmin(hre: HardhatRuntimeEnvironment): DeployAdminFunction {
   return async function deployProxyAdmin(signer?: Signer, opts: DeployProxyAdminOptions = {}) {
-    disablePlatform(hre, platformModule, opts, deployProxyAdmin.name);
-
     const { provider } = hre.network;
 
     const AdminFactory = await getProxyAdminFactory(hre, signer);
-    return await fetchOrDeployAdmin(provider, () => deploy(hre, opts, AdminFactory), opts);
+    return await fetchOrDeployAdmin(provider, () => deploy(AdminFactory), opts);
   };
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy.ts
index 72a1966..a048d7b 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/deploy-proxy.ts
@@ -1,13 +1,7 @@
 import type { HardhatRuntimeEnvironment } from 'hardhat/types';
 import type { ContractFactory, Contract } from 'ethers';
 
-import {
-  Manifest,
-  logWarning,
-  ProxyDeployment,
-  BeaconProxyUnsupportedError,
-  RemoteDeploymentId,
-} from '@openzeppelin/upgrades-core';
+import { Manifest, logWarning, ProxyDeployment, BeaconProxyUnsupportedError } from '@openzeppelin/upgrades-core';
 
 import {
   DeployProxyOptions,
@@ -18,15 +12,13 @@ import {
   deployProxyImpl,
   getInitializerData,
 } from './utils';
-import { enablePlatform } from './platform/utils';
-import { getContractInstance } from './utils/contract-instance';
 
 export interface DeployFunction {
   (ImplFactory: ContractFactory, args?: unknown[], opts?: DeployProxyOptions): Promise<Contract>;
   (ImplFactory: ContractFactory, opts?: DeployProxyOptions): Promise<Contract>;
 }
 
-export function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule: boolean): DeployFunction {
+export function makeDeployProxy(hre: HardhatRuntimeEnvironment): DeployFunction {
   return async function deployProxy(
     ImplFactory: ContractFactory,
     args: unknown[] | DeployProxyOptions = [],
@@ -37,13 +29,10 @@ export function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule:
       args = [];
     }
 
-    opts = enablePlatform(hre, platformModule, opts);
-
     const { provider } = hre.network;
     const manifest = await Manifest.forNetwork(provider);
 
     const { impl, kind } = await deployProxyImpl(hre, ImplFactory, opts);
-
     const contractInterface = ImplFactory.interface;
     const data = getInitializerData(contractInterface, args, opts.initializer);
 
@@ -56,7 +45,7 @@ export function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule:
       }
     }
 
-    let proxyDeployment: Required<ProxyDeployment & DeployTransaction> & RemoteDeploymentId;
+    let proxyDeployment: Required<ProxyDeployment & DeployTransaction>;
     switch (kind) {
       case 'beacon': {
         throw new BeaconProxyUnsupportedError();
@@ -64,7 +53,7 @@ export function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule:
 
       case 'uups': {
         const ProxyFactory = await getProxyFactory(hre, ImplFactory.signer);
-        proxyDeployment = Object.assign({ kind }, await deploy(hre, opts, ProxyFactory, impl, data));
+        proxyDeployment = Object.assign({ kind }, await deploy(ProxyFactory, impl, data));
         break;
       }
 
@@ -73,7 +62,7 @@ export function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule:
         const TransparentUpgradeableProxyFactory = await getTransparentUpgradeableProxyFactory(hre, ImplFactory.signer);
         proxyDeployment = Object.assign(
           { kind },
-          await deploy(hre, opts, TransparentUpgradeableProxyFactory, impl, adminAddress, data),
+          await deploy(TransparentUpgradeableProxyFactory, impl, adminAddress, data),
         );
         break;
       }
@@ -81,6 +70,9 @@ export function makeDeployProxy(hre: HardhatRuntimeEnvironment, platformModule:
 
     await manifest.addProxy(proxyDeployment);
 
-    return getContractInstance(hre, ImplFactory, opts, proxyDeployment);
+    const inst = ImplFactory.attach(proxyDeployment.address);
+    // @ts-ignore Won't be readonly because inst was created through attach.
+    inst.deployTransaction = proxyDeployment.deployTransaction;
+    return inst;
   };
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/index.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/index.ts
index 86f89d4..16995bc 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/index.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/index.ts
@@ -5,7 +5,7 @@ import './type-extensions';
 import { subtask, extendEnvironment, extendConfig } from 'hardhat/config';
 import { TASK_COMPILE_SOLIDITY, TASK_COMPILE_SOLIDITY_COMPILE } from 'hardhat/builtin-tasks/task-names';
 import { lazyObject } from 'hardhat/plugins';
-import { HardhatConfig, HardhatRuntimeEnvironment } from 'hardhat/types';
+import { HardhatConfig } from 'hardhat/types';
 import { getImplementationAddressFromBeacon, silenceWarnings, SolcInput } from '@openzeppelin/upgrades-core';
 import type { DeployFunction } from './deploy-proxy';
 import type { PrepareUpgradeFunction } from './prepare-upgrade';
@@ -19,9 +19,6 @@ import type { ValidateImplementationFunction } from './validate-implementation';
 import type { ValidateUpgradeFunction } from './validate-upgrade';
 import type { DeployImplementationFunction } from './deploy-implementation';
 import { DeployAdminFunction, makeDeployProxyAdmin } from './deploy-proxy-admin';
-import type { DeployContractFunction } from './deploy-contract';
-import type { ProposeUpgradeFunction } from './platform/propose-upgrade';
-import type { GetDefaultApprovalProcessFunction } from './platform/get-default-approval-process';
 
 export interface HardhatUpgrades {
   deployProxy: DeployFunction;
@@ -51,12 +48,6 @@ export interface HardhatUpgrades {
   };
 }
 
-export interface PlatformHardhatUpgrades extends HardhatUpgrades {
-  deployContract: DeployContractFunction;
-  proposeUpgrade: ProposeUpgradeFunction;
-  getDefaultApprovalProcess: GetDefaultApprovalProcessFunction;
-}
-
 interface RunCompilerArgs {
   input: SolcInput;
   solcVersion: string;
@@ -97,11 +88,52 @@ subtask(TASK_COMPILE_SOLIDITY_COMPILE, async (args: RunCompilerArgs, hre, runSup
 
 extendEnvironment(hre => {
   hre.upgrades = lazyObject((): HardhatUpgrades => {
-    return makeUpgradesFunctions(hre);
-  });
-
-  hre.platform = lazyObject((): PlatformHardhatUpgrades => {
-    return makePlatformFunctions(hre);
+    const {
+      silenceWarnings,
+      getAdminAddress,
+      getImplementationAddress,
+      getBeaconAddress,
+    } = require('@openzeppelin/upgrades-core');
+    const { makeDeployProxy } = require('./deploy-proxy');
+    const { makeUpgradeProxy } = require('./upgrade-proxy');
+    const { makeValidateImplementation } = require('./validate-implementation');
+    const { makeValidateUpgrade } = require('./validate-upgrade');
+    const { makeDeployImplementation } = require('./deploy-implementation');
+    const { makePrepareUpgrade } = require('./prepare-upgrade');
+    const { makeDeployBeacon } = require('./deploy-beacon');
+    const { makeDeployBeaconProxy } = require('./deploy-beacon-proxy');
+    const { makeUpgradeBeacon } = require('./upgrade-beacon');
+    const { makeForceImport } = require('./force-import');
+    const { makeChangeProxyAdmin, makeTransferProxyAdminOwnership, makeGetInstanceFunction } = require('./admin');
+
+    return {
+      silenceWarnings,
+      deployProxy: makeDeployProxy(hre),
+      upgradeProxy: makeUpgradeProxy(hre),
+      validateImplementation: makeValidateImplementation(hre),
+      validateUpgrade: makeValidateUpgrade(hre),
+      deployImplementation: makeDeployImplementation(hre),
+      prepareUpgrade: makePrepareUpgrade(hre),
+      deployBeacon: makeDeployBeacon(hre),
+      deployBeaconProxy: makeDeployBeaconProxy(hre),
+      upgradeBeacon: makeUpgradeBeacon(hre),
+      deployProxyAdmin: makeDeployProxyAdmin(hre),
+      forceImport: makeForceImport(hre),
+      admin: {
+        getInstance: makeGetInstanceFunction(hre),
+        changeProxyAdmin: makeChangeProxyAdmin(hre),
+        transferProxyAdminOwnership: makeTransferProxyAdminOwnership(hre),
+      },
+      erc1967: {
+        getAdminAddress: proxyAddress => getAdminAddress(hre.network.provider, proxyAddress),
+        getImplementationAddress: proxyAddress => getImplementationAddress(hre.network.provider, proxyAddress),
+        getBeaconAddress: proxyAddress => getBeaconAddress(hre.network.provider, proxyAddress),
+      },
+      beacon: {
+        getImplementationAddress: beaconAddress =>
+          getImplementationAddressFromBeacon(hre.network.provider, beaconAddress),
+      },
+    };
   });
 });
 
@@ -125,72 +157,6 @@ if (tryRequire('@nomiclabs/hardhat-etherscan')) {
   });
 }
 
-function makeFunctions(hre: HardhatRuntimeEnvironment, platform: boolean) {
-  const {
-    silenceWarnings,
-    getAdminAddress,
-    getImplementationAddress,
-    getBeaconAddress,
-  } = require('@openzeppelin/upgrades-core');
-  const { makeDeployProxy } = require('./deploy-proxy');
-  const { makeUpgradeProxy } = require('./upgrade-proxy');
-  const { makeValidateImplementation } = require('./validate-implementation');
-  const { makeValidateUpgrade } = require('./validate-upgrade');
-  const { makeDeployImplementation } = require('./deploy-implementation');
-  const { makePrepareUpgrade } = require('./prepare-upgrade');
-  const { makeDeployBeacon } = require('./deploy-beacon');
-  const { makeDeployBeaconProxy } = require('./deploy-beacon-proxy');
-  const { makeUpgradeBeacon } = require('./upgrade-beacon');
-  const { makeForceImport } = require('./force-import');
-  const { makeChangeProxyAdmin, makeTransferProxyAdminOwnership, makeGetInstanceFunction } = require('./admin');
-
-  return {
-    silenceWarnings,
-    deployProxy: makeDeployProxy(hre, platform),
-    upgradeProxy: makeUpgradeProxy(hre, platform), // block on platform
-    validateImplementation: makeValidateImplementation(hre),
-    validateUpgrade: makeValidateUpgrade(hre),
-    deployImplementation: makeDeployImplementation(hre, platform),
-    prepareUpgrade: makePrepareUpgrade(hre, platform),
-    deployBeacon: makeDeployBeacon(hre, platform), // block on platform
-    deployBeaconProxy: makeDeployBeaconProxy(hre, platform),
-    upgradeBeacon: makeUpgradeBeacon(hre, platform), // block on platform
-    deployProxyAdmin: makeDeployProxyAdmin(hre, platform), // block on platform
-    forceImport: makeForceImport(hre),
-    admin: {
-      getInstance: makeGetInstanceFunction(hre),
-      changeProxyAdmin: makeChangeProxyAdmin(hre, platform), // block on platform
-      transferProxyAdminOwnership: makeTransferProxyAdminOwnership(hre, platform), // block on platform
-    },
-    erc1967: {
-      getAdminAddress: (proxyAddress: string) => getAdminAddress(hre.network.provider, proxyAddress),
-      getImplementationAddress: (proxyAddress: string) => getImplementationAddress(hre.network.provider, proxyAddress),
-      getBeaconAddress: (proxyAddress: string) => getBeaconAddress(hre.network.provider, proxyAddress),
-    },
-    beacon: {
-      getImplementationAddress: (beaconAddress: string) =>
-        getImplementationAddressFromBeacon(hre.network.provider, beaconAddress),
-    },
-  };
-}
-
-function makeUpgradesFunctions(hre: HardhatRuntimeEnvironment): HardhatUpgrades {
-  return makeFunctions(hre, false);
-}
-
-function makePlatformFunctions(hre: HardhatRuntimeEnvironment): PlatformHardhatUpgrades {
-  const { makeDeployContract } = require('./deploy-contract');
-  const { makeProposeUpgrade } = require('./platform/propose-upgrade');
-  const { makeGetDefaultApprovalProcess } = require('./platform/get-default-approval-process');
-
-  return {
-    ...makeFunctions(hre, true),
-    deployContract: makeDeployContract(hre, true),
-    proposeUpgrade: makeProposeUpgrade(hre, true),
-    getDefaultApprovalProcess: makeGetDefaultApprovalProcess(hre),
-  };
-}
-
 function tryRequire(id: string) {
   try {
     require(id);
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/deploy.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/platform/deploy.ts
deleted file mode 100644
index 197cc3c..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/deploy.ts
+++ /dev/null
@@ -1,181 +0,0 @@
-import type { ethers, ContractFactory } from 'ethers';
-import { CompilerInput, CompilerOutputContract, HardhatRuntimeEnvironment } from 'hardhat/types';
-
-import { parseFullyQualifiedName } from 'hardhat/utils/contract-names';
-
-import { DeploymentResponse, SourceCodeLicense } from '@openzeppelin/platform-deploy-client';
-import {
-  Deployment,
-  RemoteDeploymentId,
-  getContractNameAndRunValidation,
-  UpgradesError,
-} from '@openzeppelin/upgrades-core';
-
-import artifactsBuildInfo from '@openzeppelin/upgrades-core/artifacts/build-info.json';
-
-import ERC1967Proxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol/ERC1967Proxy.json';
-import BeaconProxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol/BeaconProxy.json';
-import UpgradeableBeacon from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol/UpgradeableBeacon.json';
-import TransparentUpgradeableProxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy.json';
-import ProxyAdmin from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol/ProxyAdmin.json';
-
-import { getNetwork, getPlatformClient } from './utils';
-import { DeployTransaction, PlatformDeployOptions, UpgradeOptions } from '../utils';
-import debug from '../utils/debug';
-import { getDeployData } from '../utils/deploy-impl';
-import { ContractSourceNotFoundError } from '@openzeppelin/upgrades-core';
-
-const deployableProxyContracts = [
-  ERC1967Proxy,
-  BeaconProxy,
-  UpgradeableBeacon,
-  TransparentUpgradeableProxy,
-  ProxyAdmin,
-];
-
-interface ReducedBuildInfo {
-  _format: string;
-  id: string;
-  solcVersion: string;
-  solcLongVersion: string;
-  input: CompilerInput;
-  output: {
-    contracts: any;
-  };
-}
-
-interface ContractInfo {
-  sourceName: string;
-  contractName: string;
-  buildInfo: ReducedBuildInfo;
-}
-
-type CompilerOutputWithMetadata = CompilerOutputContract & {
-  metadata?: string;
-};
-
-export async function platformDeploy(
-  hre: HardhatRuntimeEnvironment,
-  factory: ContractFactory,
-  opts: UpgradeOptions & PlatformDeployOptions,
-  ...args: unknown[]
-): Promise<Required<Deployment & DeployTransaction> & RemoteDeploymentId> {
-  const client = getPlatformClient(hre);
-
-  const constructorArgs = [...args] as (string | number | boolean)[];
-  const contractInfo = await getContractInfo(hre, factory, { constructorArgs, ...opts });
-  const network = await getNetwork(hre);
-  debug(`Network ${network}`);
-
-  const verifySourceCode = opts.verifySourceCode ?? true;
-  debug(`Verify source code: ${verifySourceCode}`);
-
-  let license: string | undefined = undefined;
-  if (verifySourceCode) {
-    license = getLicenseFromMetadata(contractInfo);
-    debug(`License type: ${license}`);
-  }
-
-  if (opts.salt !== undefined) {
-    debug(`Salt: ${opts.salt}`);
-  }
-
-  let deploymentResponse: DeploymentResponse;
-  try {
-    deploymentResponse = await client.Deployment.deploy({
-      contractName: contractInfo.contractName,
-      contractPath: contractInfo.sourceName,
-      network: network,
-      artifactPayload: JSON.stringify(contractInfo.buildInfo),
-      licenseType: license as SourceCodeLicense | undefined, // cast without validation but catch error from API below
-      constructorInputs: constructorArgs,
-      verifySourceCode: verifySourceCode,
-      relayerId: opts.relayerId,
-      salt: opts.salt,
-    });
-  } catch (e: any) {
-    if (e.response?.data?.message?.includes('licenseType should be equal to one of the allowed values')) {
-      throw new UpgradesError(
-        `License type ${license} is not a valid SPDX license identifier for block explorer verification.`,
-        () => 'Specify a valid SPDX-License-Identifier in your contract.',
-      );
-    } else {
-      throw e;
-    }
-  }
-
-  const txResponse = await hre.ethers.provider.getTransaction(deploymentResponse.txHash);
-  const checksumAddress = hre.ethers.utils.getAddress(deploymentResponse.address);
-  return {
-    address: checksumAddress,
-    txHash: deploymentResponse.txHash,
-    deployTransaction: txResponse,
-    remoteDeploymentId: deploymentResponse.deploymentId,
-  };
-}
-
-async function getContractInfo(
-  hre: HardhatRuntimeEnvironment,
-  factory: ethers.ContractFactory,
-  opts: UpgradeOptions,
-): Promise<ContractInfo> {
-  let fullContractName;
-  try {
-    // Get fully qualified contract name from validations
-    const deployData = await getDeployData(hre, factory, opts);
-    [fullContractName] = getContractNameAndRunValidation(deployData.validations, deployData.version);
-    debug(`Contract ${fullContractName}`);
-  } catch (e) {
-    if (e instanceof ContractSourceNotFoundError) {
-      // Proxy contracts would not be found in the validations, so try to get these from the plugin's precompiled artifacts.
-      for (const artifact of deployableProxyContracts) {
-        if (artifact.bytecode === factory.bytecode) {
-          const sourceName = artifact.sourceName;
-          const contractName = artifact.contractName;
-          const buildInfo = artifactsBuildInfo;
-          debug(`Proxy contract ${sourceName}:${contractName}`);
-          return { sourceName, contractName, buildInfo };
-        }
-      }
-    }
-    // If nothing else worked, re-throw error about the contract not being found.
-    throw e;
-  }
-
-  const { sourceName, contractName } = parseFullyQualifiedName(fullContractName);
-  // Get the build-info file corresponding to the fully qualified contract name
-  const buildInfo = await hre.artifacts.getBuildInfo(fullContractName);
-  if (buildInfo === undefined) {
-    throw new UpgradesError(
-      `Could not get Hardhat compilation artifact for contract ${fullContractName}`,
-      () => `Run \`npx hardhat compile\``,
-    );
-  }
-  return { sourceName, contractName, buildInfo };
-}
-
-/**
- * Get the license type from the contract metadata without validating its validity, except converts undefined or UNLICENSED to None.
- */
-function getLicenseFromMetadata(contractInfo: ContractInfo): string {
-  const compilerOutput: CompilerOutputWithMetadata =
-    contractInfo.buildInfo.output.contracts[contractInfo.sourceName][contractInfo.contractName];
-
-  const metadataString = compilerOutput.metadata;
-  if (metadataString === undefined) {
-    throw new UpgradesError(
-      'License type could not be determined from contract metadata',
-      () => 'Enable metadata output in your compiler settings.',
-    );
-  }
-
-  const metadata = JSON.parse(metadataString);
-
-  const license: string = metadata.sources[contractInfo.sourceName].license;
-  if (license === undefined || license === 'UNLICENSED') {
-    // UNLICENSED means no license according to solidity docs
-    return 'None';
-  } else {
-    return license;
-  }
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/get-default-approval-process.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/platform/get-default-approval-process.ts
deleted file mode 100644
index 28e7c1a..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/get-default-approval-process.ts
+++ /dev/null
@@ -1,31 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-
-import { getNetwork, getPlatformClient } from './utils';
-
-export interface ApprovalProcess {
-  approvalProcessId: string;
-  address?: string;
-}
-
-export type GetDefaultApprovalProcessFunction = () => Promise<ApprovalProcess>;
-
-export function makeGetDefaultApprovalProcess(hre: HardhatRuntimeEnvironment): GetDefaultApprovalProcessFunction {
-  return async function getDefaultApprovalProcess() {
-    const client = getPlatformClient(hre);
-    const network = await getNetwork(hre);
-
-    const response = await client.Upgrade.getApprovalProcess(network);
-
-    if (response.network !== network) {
-      // This should not happen
-      throw new Error(
-        `Returned an approval process for network ${response.network} which does not match current network ${network}`,
-      );
-    }
-
-    return {
-      approvalProcessId: response.approvalProcessId,
-      address: response.via,
-    };
-  };
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/propose-upgrade.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/platform/propose-upgrade.ts
deleted file mode 100644
index 5e99300..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/propose-upgrade.ts
+++ /dev/null
@@ -1,80 +0,0 @@
-import '@openzeppelin/hardhat-upgrades/dist/type-extensions';
-import {
-  getAdminAddress,
-  getImplementationAddress,
-  isBeaconProxy,
-  isTransparentProxy,
-} from '@openzeppelin/upgrades-core';
-import { ContractFactory, ethers } from 'ethers';
-import { FormatTypes } from 'ethers/lib/utils';
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { PlatformDeployOptions, UpgradeOptions } from '../utils';
-import { getNetwork, enablePlatform, getPlatformClient } from './utils';
-import { deployImplForUpgrade } from '../prepare-upgrade';
-
-export interface UpgradeProposalResponse {
-  proposalId: string;
-  url?: string;
-  txResponse?: ethers.providers.TransactionResponse;
-}
-
-export type ProposeUpgradeFunction = (
-  proxyAddress: string,
-  contractNameOrImplFactory: string | ContractFactory,
-  opts?: ProposalOptions,
-) => Promise<UpgradeProposalResponse>;
-
-export interface ProposalOptions extends UpgradeOptions, PlatformDeployOptions {
-  approvalProcessId?: string;
-}
-
-export function makeProposeUpgrade(hre: HardhatRuntimeEnvironment, platformModule: boolean): ProposeUpgradeFunction {
-  return async function proposeUpgrade(proxyAddress, contractNameOrImplFactory, opts = {}) {
-    opts = enablePlatform(hre, platformModule, opts);
-
-    const client = getPlatformClient(hre);
-    const network = await getNetwork(hre);
-
-    if (await isBeaconProxy(hre.network.provider, proxyAddress)) {
-      throw new Error(`Beacon proxy is not currently supported with platform.proposeUpgrade()`);
-    } else {
-      // try getting the implementation address so that it will give an error if it's not a transparent/uups proxy
-      await getImplementationAddress(hre.network.provider, proxyAddress);
-    }
-
-    let proxyAdmin = undefined;
-    if (await isTransparentProxy(hre.network.provider, proxyAddress)) {
-      // use the erc1967 admin address as the proxy admin
-      proxyAdmin = await getAdminAddress(hre.network.provider, proxyAddress);
-    }
-
-    const implFactory =
-      typeof contractNameOrImplFactory === 'string'
-        ? await hre.ethers.getContractFactory(contractNameOrImplFactory)
-        : contractNameOrImplFactory;
-    const abi = implFactory.interface.format(FormatTypes.json) as string;
-
-    const deployedImpl = await deployImplForUpgrade(hre, proxyAddress, implFactory, {
-      getTxResponse: true,
-      ...opts,
-    });
-
-    const txResponse = deployedImpl.txResponse;
-    const newImplementation = deployedImpl.impl;
-
-    const upgradeProposalResponse = await client.Upgrade.upgrade({
-      proxyAddress: proxyAddress,
-      proxyAdminAddress: proxyAdmin,
-      newImplementationABI: abi,
-      newImplementationAddress: newImplementation,
-      network: network,
-      approvalProcessId: opts.approvalProcessId,
-    });
-
-    return {
-      proposalId: upgradeProposalResponse.proposalId,
-      url: upgradeProposalResponse.externalUrl,
-      txResponse,
-    };
-  };
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/utils.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/platform/utils.ts
deleted file mode 100644
index 83f4bc2..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/platform/utils.ts
+++ /dev/null
@@ -1,160 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import {
-  getChainId,
-  hasCode,
-  RemoteDeployment,
-  DeployOpts,
-  isDeploymentCompleted,
-  UpgradesError,
-} from '@openzeppelin/upgrades-core';
-
-import { Network, fromChainId } from '@openzeppelin/defender-base-client';
-import {
-  BlockExplorerApiKeyClient,
-  DeploymentClient,
-  DeploymentConfigClient,
-  PlatformClient,
-  UpgradeClient,
-} from '@openzeppelin/platform-deploy-client';
-
-import { HardhatPlatformConfig } from '../type-extensions';
-import { Platform } from '../utils';
-import debug from '../utils/debug';
-
-import { promisify } from 'util';
-const sleep = promisify(setTimeout);
-
-export function getPlatformApiKey(hre: HardhatRuntimeEnvironment): HardhatPlatformConfig {
-  const cfg = hre.config.platform;
-  if (!cfg || !cfg.apiKey || !cfg.apiSecret) {
-    const sampleConfig = JSON.stringify({ apiKey: 'YOUR_API_KEY', apiSecret: 'YOUR_API_SECRET' }, null, 2);
-    throw new Error(
-      `Missing OpenZeppelin Platform API key and secret in hardhat config. Add the following to your hardhat.config.js configuration:\nplatform: ${sampleConfig}\n`,
-    );
-  }
-  return cfg;
-}
-
-export async function getNetwork(hre: HardhatRuntimeEnvironment): Promise<Network> {
-  const { provider } = hre.network;
-  const chainId = hre.network.config.chainId ?? (await getChainId(provider));
-  const network = fromChainId(chainId);
-  if (network === undefined) {
-    throw new Error(`Network ${chainId} is not supported by the OpenZeppelin Platform`);
-  }
-  return network;
-}
-
-export function enablePlatform<T extends Platform>(
-  hre: HardhatRuntimeEnvironment,
-  platformModule: boolean,
-  opts: T,
-): T {
-  if ((hre.config.platform?.usePlatformDeploy || platformModule) && opts.usePlatformDeploy === undefined) {
-    return {
-      ...opts,
-      usePlatformDeploy: true,
-    };
-  } else {
-    return opts;
-  }
-}
-
-/**
- * Disables Platform for a function that does not support it.
- * If opts.usePlatformDeploy or platformModule is true, throws an error.
- * If hre.config.platform.usePlatformDeploy is true, logs a debug message and passes (to allow fallback to Hardhat signer).
- *
- * @param hre The Hardhat runtime environment
- * @param platformModule Whether the function was called from the platform module
- * @param opts The options passed to the function
- * @param unsupportedFunction The name of the function that does not support Platform
- */
-export function disablePlatform(
-  hre: HardhatRuntimeEnvironment,
-  platformModule: boolean,
-  opts: Platform,
-  unsupportedFunction: string,
-): void {
-  if (opts.usePlatformDeploy) {
-    throw new UpgradesError(
-      `The function ${unsupportedFunction} is not supported with the \`usePlatformDeploy\` option.`,
-    );
-  } else if (platformModule) {
-    throw new UpgradesError(
-      `The function ${unsupportedFunction} is not supported with the \`platform\` module.`,
-      () => `Call the function as upgrades.${unsupportedFunction} to use the Hardhat signer.`,
-    );
-  } else if (hre.config.platform?.usePlatformDeploy) {
-    debug(
-      `The function ${unsupportedFunction} is not supported with the \`platform.usePlatformDeploy\` configuration option. Using the Hardhat signer instead.`,
-    );
-  }
-}
-
-interface PlatformClient {
-  Deployment: DeploymentClient;
-  DeploymentConfig: DeploymentConfigClient;
-  BlockExplorerApiKey: BlockExplorerApiKeyClient;
-  Upgrade: UpgradeClient;
-}
-
-export function getPlatformClient(hre: HardhatRuntimeEnvironment): PlatformClient {
-  return PlatformClient(getPlatformApiKey(hre));
-}
-
-/**
- * Gets the remote deployment response for the given id.
- *
- * @param hre The Hardhat runtime environment
- * @param remoteDeploymentId The deployment id.
- * @returns The remote deployment response, or undefined if the deployment is not found.
- * @throws Error if the deployment response could not be retrieved.
- */
-export async function getRemoteDeployment(
-  hre: HardhatRuntimeEnvironment,
-  remoteDeploymentId: string,
-): Promise<RemoteDeployment | undefined> {
-  const client = getPlatformClient(hre);
-  try {
-    return (await client.Deployment.get(remoteDeploymentId)) as RemoteDeployment;
-  } catch (e) {
-    const message = (e as any).response?.data?.message;
-    if (message?.match(/deployment with id .* not found\./)) {
-      return undefined;
-    }
-    throw e;
-  }
-}
-
-/**
- * Waits indefinitely for the deployment until it is completed or failed.
- * Returns the last known transaction hash seen from the remote deployment, or undefined if the remote deployment was not retrieved.
- */
-export async function waitForDeployment(
-  hre: HardhatRuntimeEnvironment,
-  opts: DeployOpts,
-  address: string,
-  remoteDeploymentId: string,
-): Promise<string | undefined> {
-  const pollInterval = opts.pollingInterval ?? 5e3;
-  let lastKnownTxHash: string | undefined;
-
-  // eslint-disable-next-line no-constant-condition
-  while (true) {
-    if (await hasCode(hre.ethers.provider, address)) {
-      debug('code in target address found', address);
-      break;
-    }
-
-    const response = await getRemoteDeployment(hre, remoteDeploymentId);
-    lastKnownTxHash = response?.txHash;
-    const completed = await isDeploymentCompleted(address, remoteDeploymentId, response);
-    if (completed) {
-      break;
-    } else {
-      await sleep(pollInterval);
-    }
-  }
-  return lastKnownTxHash;
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/prepare-upgrade.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/prepare-upgrade.ts
index 07fe92e..fe5b587 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/prepare-upgrade.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/prepare-upgrade.ts
@@ -13,23 +13,31 @@ import {
   isBeaconProxy,
   isTransparentOrUUPSProxy,
   isBeacon,
-  PrepareUpgradeRequiresKindError,
+  PrepareUpgradeUnsupportedError,
 } from '@openzeppelin/upgrades-core';
 import { DeployImplementationResponse } from './deploy-implementation';
-import { enablePlatform } from './platform/utils';
-import { deployUpgradeableImpl, DeployedImpl } from './utils/deploy-impl';
 
 export type PrepareUpgradeFunction = (
-  referenceAddressOrContract: ContractAddressOrInstance,
+  proxyOrBeaconAddress: ContractAddressOrInstance,
   ImplFactory: ContractFactory,
   opts?: PrepareUpgradeOptions,
 ) => Promise<DeployImplementationResponse>;
 
-export function makePrepareUpgrade(hre: HardhatRuntimeEnvironment, platformModule: boolean): PrepareUpgradeFunction {
-  return async function prepareUpgrade(referenceAddressOrContract, ImplFactory, opts: PrepareUpgradeOptions = {}) {
-    opts = enablePlatform(hre, platformModule, opts);
-
-    const deployedImpl = await deployImplForUpgrade(hre, referenceAddressOrContract, ImplFactory, opts);
+export function makePrepareUpgrade(hre: HardhatRuntimeEnvironment): PrepareUpgradeFunction {
+  return async function prepareUpgrade(proxyOrBeacon, ImplFactory, opts: PrepareUpgradeOptions = {}) {
+    const proxyOrBeaconAddress = getContractAddress(proxyOrBeacon);
+    const { provider } = hre.network;
+    let deployedImpl;
+    if (await isTransparentOrUUPSProxy(provider, proxyOrBeaconAddress)) {
+      deployedImpl = await deployProxyImpl(hre, ImplFactory, opts, proxyOrBeaconAddress);
+    } else if (await isBeaconProxy(provider, proxyOrBeaconAddress)) {
+      const beaconAddress = await getBeaconAddress(provider, proxyOrBeaconAddress);
+      deployedImpl = await deployBeaconImpl(hre, ImplFactory, opts, beaconAddress);
+    } else if (await isBeacon(provider, proxyOrBeaconAddress)) {
+      deployedImpl = await deployBeaconImpl(hre, ImplFactory, opts, proxyOrBeaconAddress);
+    } else {
+      throw new PrepareUpgradeUnsupportedError(proxyOrBeaconAddress);
+    }
 
     if (opts.getTxResponse && deployedImpl.txResponse !== undefined) {
       return deployedImpl.txResponse;
@@ -38,28 +46,3 @@ export function makePrepareUpgrade(hre: HardhatRuntimeEnvironment, platformModul
     }
   };
 }
-
-export async function deployImplForUpgrade(
-  hre: HardhatRuntimeEnvironment,
-  referenceAddressOrContract: ContractAddressOrInstance,
-  ImplFactory: ContractFactory,
-  opts: PrepareUpgradeOptions = {},
-): Promise<DeployedImpl> {
-  const referenceAddress = getContractAddress(referenceAddressOrContract);
-  const { provider } = hre.network;
-  let deployedImpl;
-  if (await isTransparentOrUUPSProxy(provider, referenceAddress)) {
-    deployedImpl = await deployProxyImpl(hre, ImplFactory, opts, referenceAddress);
-  } else if (await isBeaconProxy(provider, referenceAddress)) {
-    const beaconAddress = await getBeaconAddress(provider, referenceAddress);
-    deployedImpl = await deployBeaconImpl(hre, ImplFactory, opts, beaconAddress);
-  } else if (await isBeacon(provider, referenceAddress)) {
-    deployedImpl = await deployBeaconImpl(hre, ImplFactory, opts, referenceAddress);
-  } else {
-    if (opts.kind === undefined) {
-      throw new PrepareUpgradeRequiresKindError();
-    }
-    deployedImpl = await deployUpgradeableImpl(hre, ImplFactory, opts, referenceAddress);
-  }
-  return deployedImpl;
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/type-extensions.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/type-extensions.ts
index 0bfe266..393e79f 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/type-extensions.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/type-extensions.ts
@@ -1,26 +1,9 @@
 import 'hardhat/types/runtime';
 
-import type { HardhatUpgrades, PlatformHardhatUpgrades } from '.';
+import type { HardhatUpgrades } from '.';
 
 declare module 'hardhat/types/runtime' {
   export interface HardhatRuntimeEnvironment {
     upgrades: HardhatUpgrades;
-    platform: PlatformHardhatUpgrades;
-  }
-}
-
-export interface HardhatPlatformConfig {
-  apiKey: string;
-  apiSecret: string;
-  usePlatformDeploy?: boolean;
-}
-
-declare module 'hardhat/types/config' {
-  export interface HardhatUserConfig {
-    platform?: HardhatPlatformConfig;
-  }
-
-  export interface HardhatConfig {
-    platform?: HardhatPlatformConfig;
   }
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-beacon.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-beacon.ts
index c198b4d..9229c0f 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-beacon.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-beacon.ts
@@ -8,7 +8,6 @@ import {
   deployBeaconImpl,
   UpgradeBeaconOptions,
 } from './utils';
-import { disablePlatform } from './platform/utils';
 
 export type UpgradeBeaconFunction = (
   beacon: ContractAddressOrInstance,
@@ -16,10 +15,8 @@ export type UpgradeBeaconFunction = (
   opts?: UpgradeBeaconOptions,
 ) => Promise<Contract>;
 
-export function makeUpgradeBeacon(hre: HardhatRuntimeEnvironment, platformModule: boolean): UpgradeBeaconFunction {
+export function makeUpgradeBeacon(hre: HardhatRuntimeEnvironment): UpgradeBeaconFunction {
   return async function upgradeBeacon(beacon, ImplFactory, opts: UpgradeBeaconOptions = {}) {
-    disablePlatform(hre, platformModule, opts, upgradeBeacon.name);
-
     const beaconAddress = getContractAddress(beacon);
     const { impl: nextImpl } = await deployBeaconImpl(hre, ImplFactory, opts, beaconAddress);
 
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-proxy.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-proxy.ts
index a21c8a8..299abb1 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-proxy.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/upgrade-proxy.ts
@@ -6,12 +6,11 @@ import { Manifest, getAdminAddress, getCode, isEmptySlot } from '@openzeppelin/u
 import {
   UpgradeProxyOptions,
   deployProxyImpl,
-  getITransparentUpgradeableProxyFactory,
+  getTransparentUpgradeableProxyFactory,
   getProxyAdminFactory,
   getContractAddress,
   ContractAddressOrInstance,
 } from './utils';
-import { disablePlatform } from './platform/utils';
 
 export type UpgradeFunction = (
   proxy: ContractAddressOrInstance,
@@ -19,10 +18,8 @@ export type UpgradeFunction = (
   opts?: UpgradeProxyOptions,
 ) => Promise<Contract>;
 
-export function makeUpgradeProxy(hre: HardhatRuntimeEnvironment, platformModule: boolean): UpgradeFunction {
+export function makeUpgradeProxy(hre: HardhatRuntimeEnvironment): UpgradeFunction {
   return async function upgradeProxy(proxy, ImplFactory, opts: UpgradeProxyOptions = {}) {
-    disablePlatform(hre, platformModule, opts, upgradeProxy.name);
-
     const proxyAddress = getContractAddress(proxy);
 
     const { impl: nextImpl } = await deployProxyImpl(hre, ImplFactory, opts, proxyAddress);
@@ -46,9 +43,9 @@ export function makeUpgradeProxy(hre: HardhatRuntimeEnvironment, platformModule:
     const adminBytecode = await getCode(provider, adminAddress);
 
     if (isEmptySlot(adminAddress) || adminBytecode === '0x') {
-      // No admin contract: use ITransparentUpgradeableProxyFactory to get proxiable interface
-      const ITransparentUpgradeableProxyFactory = await getITransparentUpgradeableProxyFactory(hre, signer);
-      const proxy = ITransparentUpgradeableProxyFactory.attach(proxyAddress);
+      // No admin contract: use TransparentUpgradeableProxyFactory to get proxiable interface
+      const TransparentUpgradeableProxyFactory = await getTransparentUpgradeableProxyFactory(hre, signer);
+      const proxy = TransparentUpgradeableProxyFactory.attach(proxyAddress);
 
       return (nextImpl, call) => (call ? proxy.upgradeToAndCall(nextImpl, call) : proxy.upgradeTo(nextImpl));
     } else {
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/contract-instance.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/contract-instance.ts
deleted file mode 100644
index 4fa5ee7..0000000
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/contract-instance.ts
+++ /dev/null
@@ -1,47 +0,0 @@
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import type { ContractFactory } from 'ethers';
-import assert from 'assert';
-
-import { DeployTransaction, Platform } from '.';
-import { waitForDeployment } from '../platform/utils';
-import { Deployment, RemoteDeploymentId, DeployOpts } from '@openzeppelin/upgrades-core';
-
-/**
- * Gets a contract instance from a deployment, where the deployment may be remote.
- * If the deployment is remote, the instance have an overriden `deployed` method to wait for the remote deployment
- * and update its `deployTransaction` with the new transaction hash if it was detected to have changed.
- *
- * @param hre The Hardhat Runtime Environment
- * @param contract The contract factory
- * @param opts The deploy and platform options
- * @param deployment The deployment
- * @param deployTransaction The transaction that deployed the contract, if available
- * @returns The contract instance
- */
-export function getContractInstance(
-  hre: HardhatRuntimeEnvironment,
-  contract: ContractFactory,
-  opts: DeployOpts & Platform,
-  deployment: Deployment & DeployTransaction & RemoteDeploymentId,
-) {
-  const instance = contract.attach(deployment.address);
-
-  // @ts-ignore Won't be readonly because instance was created through attach.
-  instance.deployTransaction = deployment.deployTransaction;
-
-  if (opts.usePlatformDeploy && deployment.remoteDeploymentId !== undefined) {
-    const origDeployed = instance.deployed.bind(instance);
-    instance.deployed = async () => {
-      assert(deployment.remoteDeploymentId !== undefined);
-      const updatedTxHash = await waitForDeployment(hre, opts, instance.address, deployment.remoteDeploymentId);
-
-      if (updatedTxHash !== undefined && updatedTxHash !== deployment.txHash) {
-        // @ts-ignore Won't be readonly because instance was created through attach.
-        instance.deployTransaction = await hre.ethers.provider.getTransaction(updatedTxHash);
-      }
-
-      return await origDeployed();
-    };
-  }
-  return instance;
-}
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy-impl.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy-impl.ts
index dfffc6f..7dd5738 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy-impl.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy-impl.ts
@@ -13,18 +13,19 @@ import type { ContractFactory, ethers } from 'ethers';
 import { FormatTypes } from 'ethers/lib/utils';
 import type { EthereumProvider, HardhatRuntimeEnvironment } from 'hardhat/types';
 import { deploy } from './deploy';
-import { GetTxResponse, PlatformDeployOptions, StandaloneOptions, UpgradeOptions, withDefaults } from './options';
-import { getRemoteDeployment } from '../platform/utils';
+import { GetTxResponse, StandaloneOptions, UpgradeOptions, withDefaults } from './options';
 import { validateBeaconImpl, validateProxyImpl, validateImpl } from './validate-impl';
 import { readValidations } from './validations';
 
-export interface DeployedImpl {
+interface DeployedProxyImpl {
   impl: string;
+  kind: NonNullable<ValidationOptions['kind']>;
   txResponse?: ethers.providers.TransactionResponse;
 }
 
-export interface DeployedProxyImpl extends DeployedImpl {
-  kind: NonNullable<ValidationOptions['kind']>;
+interface DeployedBeaconImpl {
+  impl: string;
+  txResponse?: ethers.providers.TransactionResponse;
 }
 
 export interface DeployData {
@@ -52,14 +53,13 @@ export async function getDeployData(
   return { provider, validations, unlinkedBytecode, encodedArgs, version, layout, fullOpts };
 }
 
-export async function deployUpgradeableImpl(
+export async function deployStandaloneImpl(
   hre: HardhatRuntimeEnvironment,
   ImplFactory: ContractFactory,
   opts: StandaloneOptions,
-  currentImplAddress?: string,
-): Promise<DeployedImpl> {
+): Promise<DeployedProxyImpl> {
   const deployData = await getDeployData(hre, ImplFactory, opts);
-  await validateImpl(deployData, opts, currentImplAddress);
+  await validateImpl(deployData, opts);
   return await deployImpl(hre, deployData, ImplFactory, opts);
 }
 
@@ -71,13 +71,7 @@ export async function deployProxyImpl(
 ): Promise<DeployedProxyImpl> {
   const deployData = await getDeployData(hre, ImplFactory, opts);
   await validateProxyImpl(deployData, opts, proxyAddress);
-  if (opts.kind === undefined) {
-    throw new Error('Broken invariant: Proxy kind is undefined');
-  }
-  return {
-    ...(await deployImpl(hre, deployData, ImplFactory, opts)),
-    kind: opts.kind,
-  };
+  return await deployImpl(hre, deployData, ImplFactory, opts);
 }
 
 export async function deployBeaconImpl(
@@ -85,7 +79,7 @@ export async function deployBeaconImpl(
   ImplFactory: ContractFactory,
   opts: UpgradeOptions,
   beaconAddress?: string,
-): Promise<DeployedImpl> {
+): Promise<DeployedBeaconImpl> {
   const deployData = await getDeployData(hre, ImplFactory, opts);
   await validateBeaconImpl(deployData, opts, beaconAddress);
   return await deployImpl(hre, deployData, ImplFactory, opts);
@@ -95,42 +89,30 @@ async function deployImpl(
   hre: HardhatRuntimeEnvironment,
   deployData: DeployData,
   ImplFactory: ContractFactory,
-  opts: UpgradeOptions & GetTxResponse & PlatformDeployOptions,
-): Promise<DeployedImpl> {
+  opts: UpgradeOptions & GetTxResponse,
+): Promise<any> {
   const layout = deployData.layout;
 
-  if (opts.useDeployedImplementation && opts.redeployImplementation !== undefined) {
-    throw new UpgradesError(
-      'The useDeployedImplementation and redeployImplementation options cannot both be set at the same time',
-    );
-  }
-
-  const merge = deployData.fullOpts.redeployImplementation === 'always';
-
   const deployment = await fetchOrDeployGetDeployment(
     deployData.version,
     deployData.provider,
     async () => {
       const abi = ImplFactory.interface.format(FormatTypes.minimal) as string[];
       const attemptDeploy = () => {
-        if (deployData.fullOpts.useDeployedImplementation || deployData.fullOpts.redeployImplementation === 'never') {
-          throw new UpgradesError('The implementation contract was not previously deployed.', () => {
-            if (deployData.fullOpts.useDeployedImplementation) {
-              return 'The useDeployedImplementation option was set to true but the implementation contract was not previously deployed on this network.';
-            } else {
-              return "The redeployImplementation option was set to 'never' but the implementation contract was not previously deployed on this network.";
-            }
-          });
+        if (opts.useDeployedImplementation) {
+          throw new UpgradesError(
+            'The implementation contract was not previously deployed.',
+            () =>
+              'The useDeployedImplementation option was set to true but the implementation contract was not previously deployed on this network.',
+          );
         } else {
-          return deploy(hre, opts, ImplFactory, ...deployData.fullOpts.constructorArgs);
+          return deploy(ImplFactory, ...deployData.fullOpts.constructorArgs);
         }
       };
       const deployment = Object.assign({ abi }, await attemptDeploy());
       return { ...deployment, layout };
     },
     opts,
-    merge,
-    remoteDeploymentId => getRemoteDeployment(hre, remoteDeploymentId),
   );
 
   let txResponse;
@@ -138,9 +120,9 @@ async function deployImpl(
     if ('deployTransaction' in deployment) {
       txResponse = deployment.deployTransaction;
     } else if (deployment.txHash !== undefined) {
-      txResponse = await hre.ethers.provider.getTransaction(deployment.txHash);
+      txResponse = hre.ethers.provider.getTransaction(deployment.txHash);
     }
   }
 
-  return { impl: deployment.address, txResponse };
+  return { impl: deployment.address, kind: opts.kind, txResponse };
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy.ts
index 2082339..9364b5b 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/deploy.ts
@@ -1,29 +1,16 @@
-import type { Deployment, RemoteDeploymentId } from '@openzeppelin/upgrades-core';
+import type { Deployment } from '@openzeppelin/upgrades-core';
 import debug from './debug';
 import type { ethers, ContractFactory } from 'ethers';
 import { getContractAddress } from 'ethers/lib/utils';
-import { HardhatRuntimeEnvironment } from 'hardhat/types';
-import { platformDeploy } from '../platform/deploy';
-import { PlatformDeployOptions, UpgradeOptions } from './options';
 
 export interface DeployTransaction {
   deployTransaction: ethers.providers.TransactionResponse;
 }
 
 export async function deploy(
-  hre: HardhatRuntimeEnvironment,
-  opts: UpgradeOptions & PlatformDeployOptions,
   factory: ContractFactory,
   ...args: unknown[]
-): Promise<Required<Deployment & DeployTransaction> & RemoteDeploymentId> {
-  if (opts?.usePlatformDeploy) {
-    return await platformDeploy(hre, factory, opts, ...args);
-  } else {
-    return await ethersDeploy(factory, ...args);
-  }
-}
-
-async function ethersDeploy(factory: ContractFactory, ...args: unknown[]) {
+): Promise<Required<Deployment & DeployTransaction>> {
   const contractInstance = await factory.deploy(...args);
   const { deployTransaction } = contractInstance;
 
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/factories.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/factories.ts
index a794d66..404980e 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/factories.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/factories.ts
@@ -4,7 +4,6 @@ import ERC1967Proxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/co
 import BeaconProxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol/BeaconProxy.json';
 import UpgradeableBeacon from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol/UpgradeableBeacon.json';
 import TransparentUpgradeableProxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy.json';
-import ITransparentUpgradeableProxy from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol/ITransparentUpgradeableProxy.json';
 import ProxyAdmin from '@openzeppelin/upgrades-core/artifacts/@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol/ProxyAdmin.json';
 
 export async function getProxyFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory> {
@@ -18,13 +17,6 @@ export async function getTransparentUpgradeableProxyFactory(
   return hre.ethers.getContractFactory(TransparentUpgradeableProxy.abi, TransparentUpgradeableProxy.bytecode, signer);
 }
 
-export async function getITransparentUpgradeableProxyFactory(
-  hre: HardhatRuntimeEnvironment,
-  signer?: Signer,
-): Promise<ContractFactory> {
-  return hre.ethers.getContractFactory(ITransparentUpgradeableProxy.abi, ITransparentUpgradeableProxy.bytecode, signer);
-}
-
 export async function getProxyAdminFactory(hre: HardhatRuntimeEnvironment, signer?: Signer): Promise<ContractFactory> {
   return hre.ethers.getContractFactory(ProxyAdmin.abi, ProxyAdmin.bytecode, signer);
 }
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/options.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/options.ts
index efa3910..42a725f 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/options.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/options.ts
@@ -6,22 +6,12 @@ import {
   withValidationDefaults,
 } from '@openzeppelin/upgrades-core';
 
-/**
- * Options for functions that can deploy an implementation contract.
- */
 export type StandaloneOptions = StandaloneValidationOptions &
   DeployOpts & {
     constructorArgs?: unknown[];
-    /**
-     * @deprecated Use `redeployImplementation = 'never'` instead.
-     */
     useDeployedImplementation?: boolean;
-    redeployImplementation?: 'always' | 'never' | 'onchange';
   };
 
-/**
- * Options for functions that can deploy a new version of an implementation contract for upgrading.
- */
 export type UpgradeOptions = ValidationOptions & StandaloneOptions;
 
 export function withDefaults(opts: UpgradeOptions = {}): Required<UpgradeOptions> {
@@ -29,15 +19,11 @@ export function withDefaults(opts: UpgradeOptions = {}): Required<UpgradeOptions
     constructorArgs: opts.constructorArgs ?? [],
     timeout: opts.timeout ?? 60e3,
     pollingInterval: opts.pollingInterval ?? 5e3,
-    useDeployedImplementation: opts.useDeployedImplementation ?? false,
-    redeployImplementation: opts.redeployImplementation ?? 'onchange',
+    useDeployedImplementation: opts.useDeployedImplementation ?? true,
     ...withValidationDefaults(opts),
   };
 }
 
-/**
- * Option for functions that support getting a transaction response.
- */
 export type GetTxResponse = {
   getTxResponse?: boolean;
 };
@@ -46,37 +32,16 @@ type Initializer = {
   initializer?: string | false;
 };
 
-/**
- * Option to enable or disable Platform deployments.
- */
-export type Platform = {
-  usePlatformDeploy?: boolean;
-};
-
-/**
- * Options for functions that support Platform deployments.
- */
-export type PlatformDeployOptions = Platform & {
-  verifySourceCode?: boolean;
-  relayerId?: string;
-  salt?: string;
-};
-
-export type DeployBeaconProxyOptions = DeployOpts & ProxyKindOption & Initializer & PlatformDeployOptions;
-export type DeployBeaconOptions = StandaloneOptions & Platform;
-export type DeployImplementationOptions = StandaloneOptions & GetTxResponse & PlatformDeployOptions;
-export type DeployContractOptions = StandaloneOptions &
-  GetTxResponse &
-  PlatformDeployOptions & {
-    unsafeAllowDeployContract?: boolean;
-  };
-export type DeployProxyAdminOptions = DeployOpts & Platform;
-export type DeployProxyOptions = StandaloneOptions & Initializer & PlatformDeployOptions;
+export type DeployBeaconProxyOptions = ProxyKindOption & Initializer;
+export type DeployBeaconOptions = StandaloneOptions;
+export type DeployImplementationOptions = StandaloneOptions & GetTxResponse;
+export type DeployProxyAdminOptions = DeployOpts;
+export type DeployProxyOptions = StandaloneOptions & Initializer;
 export type ForceImportOptions = ProxyKindOption;
-export type PrepareUpgradeOptions = UpgradeOptions & GetTxResponse & PlatformDeployOptions;
-export type UpgradeBeaconOptions = UpgradeOptions & Platform;
+export type PrepareUpgradeOptions = UpgradeOptions & GetTxResponse;
+export type UpgradeBeaconOptions = UpgradeOptions;
 export type UpgradeProxyOptions = UpgradeOptions & {
   call?: { fn: string; args?: unknown[] } | string;
-} & Platform;
+};
 export type ValidateImplementationOptions = StandaloneValidationOptions;
 export type ValidateUpgradeOptions = ValidationOptions;
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/validate-impl.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/validate-impl.ts
index b033346..b1e41f5 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/utils/validate-impl.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/utils/validate-impl.ts
@@ -11,9 +11,6 @@ import {
 } from '@openzeppelin/upgrades-core';
 import { DeployData } from './deploy-impl';
 
-/**
- * Processes the proxy kind and returns the implementation address if proxyAddress is provided.
- */
 async function processProxyImpl(deployData: DeployData, proxyAddress: string | undefined, opts: ValidationOptions) {
   await processProxyKind(deployData.provider, proxyAddress, opts, deployData.validations, deployData.version);
 
@@ -25,9 +22,6 @@ async function processProxyImpl(deployData: DeployData, proxyAddress: string | u
   return currentImplAddress;
 }
 
-/**
- * Asserts that the address is not a proxy and returns the beacon's implementation address.
- */
 async function processBeaconImpl(deployData: DeployData, beaconAddress: string) {
   // upgrade scenario
   await assertNotProxy(deployData.provider, beaconAddress);
@@ -50,10 +44,6 @@ export async function validateImpl(
   }
 }
 
-/**
- * Processes the proxy kind and validates that the implementation in deployData is upgrade safe
- * (compared to the proxy's current implementation if proxyAddress is specified).
- */
 export async function validateProxyImpl(
   deployData: DeployData,
   opts: ValidationOptions,
@@ -63,10 +53,6 @@ export async function validateProxyImpl(
   return validateImpl(deployData, opts, currentImplAddress);
 }
 
-/**
- * Asserts that the address is not a proxy and validates that the implementation in deployData is upgrade safe
- * compared to the beacon's current implementation.
- */
 export async function validateBeaconImpl(
   deployData: DeployData,
   opts: ValidationOptions,
diff --git a/node_modules/@openzeppelin/hardhat-upgrades/src/verify-proxy.ts b/node_modules/@openzeppelin/hardhat-upgrades/src/verify-proxy.ts
index a41d270..682c341 100644
--- a/node_modules/@openzeppelin/hardhat-upgrades/src/verify-proxy.ts
+++ b/node_modules/@openzeppelin/hardhat-upgrades/src/verify-proxy.ts
@@ -15,7 +15,6 @@ import {
   UpgradesError,
   getAdminAddress,
   isTransparentOrUUPSProxy,
-  isBeacon,
   isBeaconProxy,
   isEmptySlot,
 } from '@openzeppelin/upgrades-core';
@@ -52,11 +51,6 @@ interface VerifiableContractInfo {
   event: string;
 }
 
-interface ErrorReport {
-  errors: string[];
-  severity: 'error' | 'warn';
-}
-
 /**
  * The proxy-related contracts and their corresponding events that may have been deployed the current version of this plugin.
  */
@@ -69,7 +63,7 @@ const verifiableContracts = {
 };
 
 /**
- * Overrides hardhat-etherscan's verify:verify subtask to fully verify a proxy or beacon.
+ * Overrides hardhat-etherscan's verify:verify subtask to fully verify a proxy.
  *
  * Verifies the contract at an address. If the address is an ERC-1967 compatible proxy, verifies the proxy and associated proxy contracts,
  * as well as the implementation. Otherwise, calls hardhat-etherscan's verify function directly.
@@ -95,56 +89,39 @@ export async function verify(args: any, hre: HardhatRuntimeEnvironment, runSuper
 
   const provider = hre.network.provider;
   const proxyAddress = args.address;
-  const errorReport: ErrorReport = {
-    errors: [],
-    severity: 'error',
-  };
-
-  let proxy = true;
+  const errors: string[] = [];
 
   if (await isTransparentOrUUPSProxy(provider, proxyAddress)) {
-    await fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, errorReport);
+    await fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, errors);
   } else if (await isBeaconProxy(provider, proxyAddress)) {
-    await fullVerifyBeaconProxy(hre, proxyAddress, hardhatVerify, errorReport);
-  } else if (await isBeacon(provider, proxyAddress)) {
-    proxy = false;
-    const etherscanApi = await getEtherscanAPIConfig(hre);
-    await fullVerifyBeacon(hre, proxyAddress, hardhatVerify, etherscanApi, errorReport);
+    await fullVerifyBeaconProxy(hre, proxyAddress, hardhatVerify, errors);
   } else {
     // Doesn't look like a proxy, so just verify directly
     return hardhatVerify(proxyAddress);
   }
 
-  if (errorReport.errors.length > 0) {
-    displayErrorReport(errorReport);
-  } else {
-    console.info(`\n${proxy ? 'Proxy' : 'Contract'} fully verified.`);
+  if (errors.length > 0) {
+    throw new UpgradesError(getVerificationErrorSummary(errors));
   }
 
+  console.info('\nProxy fully verified.');
+
   async function hardhatVerify(address: string) {
     return await runSuper({ ...args, address });
   }
 }
 
 /**
- * Throws or warns with a formatted summary of all of the verification errors that have been recorded.
- *
- * @param errorReport Accumulated verification errors
- * @throws UpgradesError if errorReport.severity is 'error'
+ * @param errors Accumulated verification errors
+ * @returns Formatted summary of all of the verification errors that have been recorded.
  */
-function displayErrorReport(errorReport: ErrorReport) {
-  let summary = `\nVerification completed with the following ${
-    errorReport.severity === 'error' ? 'errors' : 'warnings'
-  }.`;
-  for (let i = 0; i < errorReport.errors.length; i++) {
-    const error = errorReport.errors[i];
-    summary += `\n\n${errorReport.severity === 'error' ? 'Error' : 'Warning'} ${i + 1}: ${error}`;
-  }
-  if (errorReport.severity === 'error') {
-    throw new UpgradesError(summary);
-  } else {
-    console.warn(summary);
+function getVerificationErrorSummary(errors: string[]) {
+  let str = 'Verification completed with the following errors.';
+  for (let i = 0; i < errors.length; i++) {
+    const error = errors[i];
+    str += `\n\nError ${i + 1}: ${error}`;
   }
+  return str;
 }
 
 /**
@@ -153,16 +130,16 @@ function displayErrorReport(errorReport: ErrorReport) {
  * @param address The address that failed to verify
  * @param contractType The type or name of the contract
  * @param details The error details
- * @param errorReport Accumulated verification errors
+ * @param errors Accumulated verification errors
  */
-function recordVerificationError(address: string, contractType: string, details: string, errorReport: ErrorReport) {
+function recordVerificationError(address: string, contractType: string, details: string, errors: string[]) {
   const message = `Failed to verify ${contractType} contract at ${address}: ${details}`;
-  recordError(message, errorReport);
+  recordError(message, errors);
 }
 
-function recordError(message: string, errorReport: ErrorReport) {
+function recordError(message: string, errors: string[]) {
   console.error(message);
-  errorReport.errors.push(message);
+  errors.push(message);
 }
 
 /**
@@ -170,17 +147,6 @@ function recordError(message: string, errorReport: ErrorReport) {
  */
 class EventNotFound extends UpgradesError {}
 
-/**
- * Indicates that the contract's bytecode does not match with the plugin's artifact.
- */
-class BytecodeNotMatchArtifact extends Error {
-  contractName: string;
-  constructor(message: string, contractName: string) {
-    super(message);
-    this.contractName = contractName;
-  }
-}
-
 /**
  * Fully verifies all contracts related to the given transparent or UUPS proxy address: implementation, admin (if any), and proxy.
  * Also links the proxy to the implementation ABI on Etherscan.
@@ -194,22 +160,22 @@ class BytecodeNotMatchArtifact extends Error {
  * @param hre
  * @param proxyAddress The transparent or UUPS proxy address
  * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
- * @param errorReport Accumulated verification errors
+ * @errors Accumulated verification errors
  */
 async function fullVerifyTransparentOrUUPS(
   hre: HardhatRuntimeEnvironment,
   proxyAddress: any,
   hardhatVerify: (address: string) => Promise<any>,
-  errorReport: ErrorReport,
+  errors: string[],
 ) {
   const provider = hre.network.provider;
   const implAddress = await getImplementationAddress(provider, proxyAddress);
-  await verifyImplementation(hardhatVerify, implAddress, errorReport);
+  await verifyImplementation(hardhatVerify, implAddress, errors);
 
   const etherscanApi = await getEtherscanAPIConfig(hre);
 
   await verifyTransparentOrUUPS();
-  await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errorReport);
+  await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errors);
   // Either UUPS or Transparent proxy could have admin slot set, although typically this should only be for Transparent
   await verifyAdmin();
 
@@ -218,16 +184,12 @@ async function fullVerifyTransparentOrUUPS(
     if (!isEmptySlot(adminAddress)) {
       console.log(`Verifying proxy admin: ${adminAddress}`);
       try {
-        await verifyWithArtifactOrFallback(
+        await verifyContractWithCreationEvent(
           hre,
-          hardhatVerify,
           etherscanApi,
           adminAddress,
           [verifiableContracts.proxyAdmin],
-          errorReport,
-          // The user provided the proxy address to verify, whereas this function is only verifying the related proxy admin.
-          // So even if this falls back and succeeds, we want to keep any errors that might have occurred while verifying the proxy itself.
-          false,
+          errors,
         );
       } catch (e: any) {
         if (e instanceof EventNotFound) {
@@ -241,14 +203,12 @@ async function fullVerifyTransparentOrUUPS(
 
   async function verifyTransparentOrUUPS() {
     console.log(`Verifying proxy: ${proxyAddress}`);
-    await verifyWithArtifactOrFallback(
+    await verifyContractWithCreationEvent(
       hre,
-      hardhatVerify,
       etherscanApi,
       proxyAddress,
       [verifiableContracts.transparentUpgradeableProxy, verifiableContracts.erc1967proxy],
-      errorReport,
-      true,
+      errors,
     );
   }
 }
@@ -260,69 +220,39 @@ async function fullVerifyTransparentOrUUPS(
  * @param hre
  * @param proxyAddress The beacon proxy address
  * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
- * @param errorReport Accumulated verification errors
+ * @errors Accumulated verification errors
  */
 async function fullVerifyBeaconProxy(
   hre: HardhatRuntimeEnvironment,
   proxyAddress: any,
   hardhatVerify: (address: string) => Promise<any>,
-  errorReport: ErrorReport,
+  errors: string[],
 ) {
   const provider = hre.network.provider;
   const beaconAddress = await getBeaconAddress(provider, proxyAddress);
+
   const implAddress = await getImplementationAddressFromBeacon(provider, beaconAddress);
+  await verifyImplementation(hardhatVerify, implAddress, errors);
+
   const etherscanApi = await getEtherscanAPIConfig(hre);
 
-  await fullVerifyBeacon(hre, beaconAddress, hardhatVerify, etherscanApi, errorReport);
+  await verifyBeacon();
   await verifyBeaconProxy();
-  await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errorReport);
+  await linkProxyWithImplementationAbi(etherscanApi, proxyAddress, implAddress, errors);
 
   async function verifyBeaconProxy() {
     console.log(`Verifying beacon proxy: ${proxyAddress}`);
-    await verifyWithArtifactOrFallback(
-      hre,
-      hardhatVerify,
-      etherscanApi,
-      proxyAddress,
-      [verifiableContracts.beaconProxy],
-      errorReport,
-      true,
-    );
+    await verifyContractWithCreationEvent(hre, etherscanApi, proxyAddress, [verifiableContracts.beaconProxy], errors);
   }
-}
-
-/**
- * Verifies all contracts resulting from a beacon deployment: implementation, beacon
- *
- * @param hre
- * @param beaconAddress The beacon address
- * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
- * @param etherscanApi Configuration for the Etherscan API
- * @param errorReport Accumulated verification errors
- */
-async function fullVerifyBeacon(
-  hre: HardhatRuntimeEnvironment,
-  beaconAddress: any,
-  hardhatVerify: (address: string) => Promise<any>,
-  etherscanApi: EtherscanAPIConfig,
-  errorReport: ErrorReport,
-) {
-  const provider = hre.network.provider;
-
-  const implAddress = await getImplementationAddressFromBeacon(provider, beaconAddress);
-  await verifyImplementation(hardhatVerify, implAddress, errorReport);
-  await verifyBeacon();
 
   async function verifyBeacon() {
-    console.log(`Verifying beacon or beacon-like contract: ${beaconAddress}`);
-    await verifyWithArtifactOrFallback(
+    console.log(`Verifying beacon: ${beaconAddress}`);
+    await verifyContractWithCreationEvent(
       hre,
-      hardhatVerify,
       etherscanApi,
       beaconAddress,
       [verifiableContracts.upgradeableBeacon],
-      errorReport,
-      true,
+      errors,
     );
   }
 }
@@ -332,12 +262,12 @@ async function fullVerifyBeacon(
  *
  * @param hardhatVerify A function that invokes the hardhat-etherscan plugin's verify command
  * @param implAddress The implementation address
- * @param errorReport Accumulated verification errors
+ * @param errors Accumulated verification errors
  */
 async function verifyImplementation(
   hardhatVerify: (address: string) => Promise<any>,
   implAddress: string,
-  errorReport: ErrorReport,
+  errors: string[],
 ) {
   try {
     console.log(`Verifying implementation: ${implAddress}`);
@@ -346,7 +276,7 @@ async function verifyImplementation(
     if (e.message.toLowerCase().includes('already verified')) {
       console.log(`Implementation ${implAddress} already verified.`);
     } else {
-      recordVerificationError(implAddress, 'implementation', e.message, errorReport);
+      recordVerificationError(implAddress, 'implementation', e.message, errors);
     }
   }
 }
@@ -386,70 +316,7 @@ async function searchEvent(
 }
 
 /**
- * Verifies a contract by matching with known artifacts.
- *
- * If a match was not found, falls back to verify directly using the regular hardhat verify task.
- *
- * If the fallback passes, logs as success.
- * If the fallback also fails, records errors for both the original and fallback attempts.
- *
- * @param hre
- * @param etherscanApi The Etherscan API config
- * @param address The contract address to verify
- * @param possibleContractInfo An array of possible contract artifacts to use for verification along
- *  with the corresponding creation event expected in the logs.
- * @param errorReport Accumulated verification errors
- * @param convertErrorsToWarningsOnFallbackSuccess If fallback verification occurred and succeeded, whether any
- *  previously accumulated errors should be converted into warnings in the final summary.
- * @throws {EventNotFound} if none of the events were found in the contract's logs according to Etherscan.
- */
-async function verifyWithArtifactOrFallback(
-  hre: HardhatRuntimeEnvironment,
-  hardhatVerify: (address: string) => Promise<any>,
-  etherscanApi: EtherscanAPIConfig,
-  address: string,
-  possibleContractInfo: VerifiableContractInfo[],
-  errorReport: ErrorReport,
-  convertErrorsToWarningsOnFallbackSuccess: boolean,
-) {
-  try {
-    await attemptVerifyWithCreationEvent(hre, etherscanApi, address, possibleContractInfo, errorReport);
-    return true;
-  } catch (origError: any) {
-    if (origError instanceof BytecodeNotMatchArtifact || origError instanceof EventNotFound) {
-      // Try falling back to regular hardhat verify in case the source code is available in the user's project.
-      try {
-        await hardhatVerify(address);
-      } catch (fallbackError: any) {
-        if (fallbackError.message.toLowerCase().includes('already verified')) {
-          console.log(`Contract at ${address} already verified.`);
-        } else {
-          // Fallback failed, so record both the original error and the fallback attempt, then return
-          if (origError instanceof BytecodeNotMatchArtifact) {
-            recordVerificationError(address, origError.contractName, origError.message, errorReport);
-          } else {
-            recordError(origError.message, errorReport);
-          }
-
-          recordError(`Failed to verify directly using hardhat verify: ${fallbackError.message}`, errorReport);
-          return;
-        }
-      }
-
-      // Since the contract was able to be verified directly, we don't want the task to fail so we should convert earlier errors into warnings for other related contracts.
-      // For example, the user provided constructor arguments for the verify command will apply to all calls of the regular hardhat verify,
-      // so it is not possible to successfully verify both an impl and a proxy that uses the above fallback at the same time.
-      if (convertErrorsToWarningsOnFallbackSuccess) {
-        errorReport.severity = 'warn';
-      }
-    } else {
-      throw origError;
-    }
-  }
-}
-
-/**
- * Attempts to verify a contract by looking up an event that should have been logged during contract construction,
+ * Verifies a contract by looking up an event that should have been logged during contract construction,
  * finds the txHash for that, and infers the constructor args to use for verification.
  *
  * Iterates through each element of possibleContractInfo to look for that element's event, until an event is found.
@@ -459,16 +326,15 @@ async function verifyWithArtifactOrFallback(
  * @param address The contract address to verify
  * @param possibleContractInfo An array of possible contract artifacts to use for verification along
  *  with the corresponding creation event expected in the logs.
- * @param errorReport Accumulated verification errors
+ * @param errors Accumulated verification errors
  * @throws {EventNotFound} if none of the events were found in the contract's logs according to Etherscan.
- * @throws {BytecodeNotMatchArtifact} if the contract's bytecode does not match with the plugin's known artifact.
  */
-async function attemptVerifyWithCreationEvent(
+async function verifyContractWithCreationEvent(
   hre: HardhatRuntimeEnvironment,
   etherscanApi: EtherscanAPIConfig,
   address: string,
   possibleContractInfo: VerifiableContractInfo[],
-  errorReport: ErrorReport,
+  errors: string[],
 ) {
   const { contractInfo, txHash } = await searchEvent(etherscanApi, address, possibleContractInfo);
   debug(`verifying contract ${contractInfo.artifact.contractName} at ${address}`);
@@ -483,18 +349,14 @@ async function attemptVerifyWithCreationEvent(
   if (constructorArguments === undefined) {
     // The creation bytecode for the address does not match with the expected artifact.
     // This may be because a different version of the contract was deployed compared to what is in the plugins.
-    throw new BytecodeNotMatchArtifact(
-      `Bytecode does not match with the current version of ${contractInfo.artifact.contractName} in the Hardhat Upgrades plugin.`,
+    recordVerificationError(
+      address,
       contractInfo.artifact.contractName,
+      `Bytecode does not match with the current version of ${contractInfo.artifact.contractName} in the Hardhat Upgrades plugin.`,
+      errors,
     );
   } else {
-    await verifyContractWithConstructorArgs(
-      etherscanApi,
-      address,
-      contractInfo.artifact,
-      constructorArguments,
-      errorReport,
-    );
+    await verifyContractWithConstructorArgs(etherscanApi, address, contractInfo.artifact, constructorArguments, errors);
   }
 }
 
@@ -511,7 +373,7 @@ async function verifyContractWithConstructorArgs(
   address: any,
   artifact: ContractArtifact,
   constructorArguments: string,
-  errorReport: ErrorReport,
+  errors: string[],
 ) {
   debug(`verifying contract ${address} with constructor args ${constructorArguments}`);
 
@@ -537,13 +399,13 @@ async function verifyContractWithConstructorArgs(
     if (status.isVerificationSuccess()) {
       console.log(`Successfully verified contract ${artifact.contractName} at ${address}.`);
     } else {
-      recordVerificationError(address, artifact.contractName, status.message, errorReport);
+      recordVerificationError(address, artifact.contractName, status.message, errors);
     }
   } catch (e: any) {
     if (e.message.toLowerCase().includes('already verified')) {
       console.log(`Contract at ${address} already verified.`);
     } else {
-      recordVerificationError(address, artifact.contractName, e.message, errorReport);
+      recordVerificationError(address, artifact.contractName, e.message, errors);
     }
   }
 }
@@ -578,7 +440,7 @@ async function getContractCreationTxHash(
   if (responseBody.status === RESPONSE_OK) {
     const result = responseBody.result;
     return result[0].transactionHash; // get the txhash from the first instance of this event
-  } else if (responseBody.message === 'No records found' || responseBody.message === 'No logs found') {
+  } else if (responseBody.message === 'No records found') {
     debug(`no result found for event topic ${topic} at address ${address}`);
     return undefined;
   } else {
@@ -600,7 +462,7 @@ async function linkProxyWithImplementationAbi(
   etherscanApi: EtherscanAPIConfig,
   proxyAddress: string,
   implAddress: string,
-  errorReport: ErrorReport,
+  errors: string[],
 ) {
   console.log(`Linking proxy ${proxyAddress} with implementation`);
   const params = {
@@ -625,10 +487,7 @@ async function linkProxyWithImplementationAbi(
   if (responseBody.status === RESPONSE_OK) {
     console.log('Successfully linked proxy to implementation.');
   } else {
-    recordError(
-      `Failed to link proxy ${proxyAddress} with its implementation. Reason: ${responseBody.result}`,
-      errorReport,
-    );
+    recordError(`Failed to link proxy ${proxyAddress} with its implementation. Reason: ${responseBody.result}`, errors);
   }
 
   async function delay(ms: number): Promise<void> {
